<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Umi&amp;dva的基本使用</title>
      <link href="2020/02/25/ant-design-pro/"/>
      <url>2020/02/25/ant-design-pro/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Ant-Design-Pro介绍"><a href="#1-Ant-Design-Pro介绍" class="headerlink" title="1.Ant Design Pro介绍"></a>1.Ant Design Pro介绍</h1><p>Ant Design Pro 是一个企业级中后台前端/设计解决方案</p><blockquote><p>特性</p></blockquote><ul><li><strong>优雅美观</strong>：基于 Ant Design 体系精心设计</li><li><strong>常见设计模式</strong>：提炼自中后台应用的典型页面和场景</li><li><strong>最新技术栈</strong>：使用 React/dva/antd 等前端前沿技术开发</li><li><strong>响应式</strong>：针对不同屏幕大小设计</li><li><strong>主题</strong>：可配置的主题满足多样化的品牌诉求</li><li><strong>国际化</strong>：内建业界通用的国际化方案</li><li><strong>最佳实践</strong>：良好的工程实践助您持续产出高质量代码</li><li><strong>Mock 数据</strong>：实用的本地数据调试方案</li><li><strong>UI 测试</strong>：自动化测试保障前端产品质量</li></ul><p><img src="https://i.loli.net/2020/11/03/dCVM1AmtL3OrY4P.png"></p><p>创建项目：</p><p>yarn create umi myprotest</p><p>yarn install</p><p>yarn start</p><p>注意：这里创建项目的时候选择V5版本</p><p>​        Pro V4+antd@4 版本权限验证不好用。<strong>Pro V4+antd@4 可以查看完整版的ant design pro项目</strong>。</p><p>​        Pro V4+antd@3 版本有区块不好用</p><h1 id="2-目录结构和配置介绍"><a href="#2-目录结构和配置介绍" class="headerlink" title="2.目录结构和配置介绍"></a>2.目录结构和配置介绍</h1><h2 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h2><p><img src="https://i.loli.net/2020/11/03/PN8yAJ3OzcvteQM.png"></p><h2 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h2><h3 id="2-2-1-config-ts"><a href="#2-2-1-config-ts" class="headerlink" title="2.2.1 config.ts"></a>2.2.1 config.ts</h3><p>该文件类似.umirc.ts文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入umi中的配置文件的类型 ts中要用</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入默认的配置文件</span><span class="token keyword">import</span> defaultSettings <span class="token keyword">from</span> <span class="token string">'./defaultSettings'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代理配置文件</span><span class="token keyword">import</span> proxy <span class="token keyword">from</span> <span class="token string">'./proxy'</span><span class="token punctuation">;</span><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前开发环境\发布环境</span><span class="token keyword">const</span> <span class="token punctuation">{</span> REACT_APP_ENV <span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导出配置对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//文件名支持hash命名</span>  hash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//启用dva插件</span>  <span class="token comment" spellcheck="true">//每个插件都会对应一个 id 和一个 key，id 是路径的简写，key 是进一步简化后用于配置的唯一值。</span>  <span class="token comment" spellcheck="true">//比如插件 /node_modules/@umijs/plugin-antd ,id 为 @umijs/plugin-antd，key 为 antd。</span>  antd<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启用dva插件</span>  dva<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hmr<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//热更新</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启用layout布局插件  ant design pro中需要使用</span>  layout<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Ant Design Pro'</span><span class="token punctuation">,</span>    locale<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//国际化</span>    siderWidth<span class="token punctuation">:</span> <span class="token number">208</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//侧边栏宽度</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启用locale国际化插件 配置之后才可以使用useIntl </span>  locale<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认的语言环境</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//antd开启国际化</span>    antd<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// default true, when it is true, will use `navigator.language` overwrite default</span>    baseNavigator<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。</span>  dynamicImport<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loading<span class="token punctuation">:</span> <span class="token string">'@/components/PageLoading/index'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//兼容ie11</span>  targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ie<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// umi routes: https://umijs.org/docs/routing</span>  <span class="token comment" spellcheck="true">//路由配置</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//不使用默认的页面布局模板，如果此属性不写就会使用默认页面布局模板(app.tsx中声明的layout)</span>      layout<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//子路由</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>          path<span class="token punctuation">:</span> <span class="token string">'/user/login'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> <span class="token string">'./user/login'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/welcome'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'welcome'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// access: 'canUser',  //只有user登录可以访问  在access.ts中有声明</span>      icon<span class="token punctuation">:</span> <span class="token string">'smile'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//指定icon图标  可以使用ant design中的图标</span>      component<span class="token punctuation">:</span> <span class="token string">'./Welcome'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/admin'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>      icon<span class="token punctuation">:</span> <span class="token string">'crown'</span><span class="token punctuation">,</span>      access<span class="token punctuation">:</span> <span class="token string">'canAdmin'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//只有admin登录可以访问  在access.ts中有声明</span>      component<span class="token punctuation">:</span> <span class="token string">'./Admin'</span><span class="token punctuation">,</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/admin/sub-page'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'sub-page'</span><span class="token punctuation">,</span>          icon<span class="token punctuation">:</span> <span class="token string">'smile'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> <span class="token string">'./Welcome'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'list.table-list'</span><span class="token punctuation">,</span>      icon<span class="token punctuation">:</span> <span class="token string">'table'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/list'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'./ListTableList'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      redirect<span class="token punctuation">:</span> <span class="token string">'/welcome'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      component<span class="token punctuation">:</span> <span class="token string">'./404'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Theme for antd: https://ant.design/docs/react/customize-theme-cn</span>  theme<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...darkTheme,</span>    <span class="token comment" spellcheck="true">// 主要颜色,</span>    <span class="token string">'primary-color'</span><span class="token punctuation">:</span> defaultSettings<span class="token punctuation">.</span>primaryColor<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//主题颜色配置</span>    <span class="token comment" spellcheck="true">// 'font-size-base': '14px',</span>    <span class="token comment" spellcheck="true">// 'badge-font-size': '12px',</span>    <span class="token comment" spellcheck="true">// 'btn-font-size-lg': '@font-size-base',</span>    <span class="token comment" spellcheck="true">// 'menu-dark-bg': '#00182E',</span>    <span class="token comment" spellcheck="true">// 'menu-dark-submenu-bg': '#000B14',</span>    <span class="token comment" spellcheck="true">// 'layout-sider-background': '#00182E',</span>    <span class="token comment" spellcheck="true">// 'layout-body-background': '#f0f2f5',</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// @ts-ignore</span>  title<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  ignoreMomentLocale<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//代理</span>  proxy<span class="token punctuation">:</span> proxy<span class="token punctuation">[</span>REACT_APP_ENV <span class="token operator">||</span> <span class="token string">'dev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  manifest<span class="token punctuation">:</span> <span class="token punctuation">{</span>    basePath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//别名</span>  alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'@'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-2-defaultSettings-ts"><a href="#2-2-2-defaultSettings-ts" class="headerlink" title="2.2.2 defaultSettings.ts"></a>2.2.2 defaultSettings.ts</h3><p>页面样式的配置文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Settings <span class="token keyword">as</span> LayoutSettings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@ant-design/pro-layout'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  navTheme<span class="token punctuation">:</span> <span class="token string">'dark'</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//主题颜色   dark light</span>  primaryColor<span class="token punctuation">:</span> <span class="token string">'#1890ff'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//主要颜色</span>  layout<span class="token punctuation">:</span> <span class="token string">'mix'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//布局方式  slide</span>  contentWidth<span class="token punctuation">:</span> <span class="token string">'Fluid'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//内容宽度</span>  fixedHeader<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//固定头</span>  fixSiderbar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//固定左侧内容</span>  colorWeak<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//弱视</span>  menu<span class="token punctuation">:</span> <span class="token punctuation">{</span>    locale<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//菜单国际化</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  title<span class="token punctuation">:</span> <span class="token string">'Ant Design Pro'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//标题</span>  pwa<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  iconfontUrl<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//icon图标地址</span><span class="token punctuation">}</span> <span class="token keyword">as</span> LayoutSettings <span class="token operator">&amp;</span> <span class="token punctuation">{</span>  pwa<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-3-proxy-ts"><a href="#2-2-3-proxy-ts" class="headerlink" title="2.2.3 proxy.ts"></a>2.2.3 proxy.ts</h3><p>该文件主要是代理的配置文件，仅在开发环境有效</p><h3 id="2-2-4-app-tsx"><a href="#2-2-4-app-tsx" class="headerlink" title="2.2.4 app.tsx"></a>2.2.4 app.tsx</h3><p>app.tsx为运行时配置文件，导出的信息会使用对应的插件在运行时配置到程序中</p><h2 id="2-3-配置详解"><a href="#2-3-配置详解" class="headerlink" title="2.3 配置详解"></a>2.3 配置详解</h2><h3 id="2-3-1-路由和菜单"><a href="#2-3-1-路由和菜单" class="headerlink" title="2.3.1 路由和菜单"></a>2.3.1 路由和菜单</h3><p>ant design pro会根据配置的路由自动生成对应的菜单</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// umi routes: https://umijs.org/docs/routing</span><span class="token comment" spellcheck="true">// hideChildrenInMenu 用于隐藏不需要在菜单中展示的子路由。用法可以查看 分步表单 的配置。</span><span class="token comment" spellcheck="true">// hideInMenu 可以在菜单中不展示这个路由，包括子路由。</span><span class="token comment" spellcheck="true">//路由配置</span>routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//不使用默认的页面布局模板，如果此属性不写就会使用默认页面布局模板(app.tsx中声明的layout)</span>        layout<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//子路由</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>                path<span class="token punctuation">:</span> <span class="token string">'/user/login'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> <span class="token string">'./user/login'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/welcome'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'welcome'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// access: 'canUser',  //只有user登录可以访问  在access.ts中有声明</span>        icon<span class="token punctuation">:</span> <span class="token string">'smile'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//指定icon图标  可以使用ant design中的图标</span>        component<span class="token punctuation">:</span> <span class="token string">'./Welcome'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/admin'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">'crown'</span><span class="token punctuation">,</span>        access<span class="token punctuation">:</span> <span class="token string">'canAdmin'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//只有admin登录可以访问  在access.ts中有声明</span>        component<span class="token punctuation">:</span> <span class="token string">'./Admin'</span><span class="token punctuation">,</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/admin/sub-page'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'sub-page'</span><span class="token punctuation">,</span>                icon<span class="token punctuation">:</span> <span class="token string">'smile'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> <span class="token string">'./Welcome'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'list.table-list'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">'table'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">'/list'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token string">'./ListTableList'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        redirect<span class="token punctuation">:</span> <span class="token string">'/welcome'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        component<span class="token punctuation">:</span> <span class="token string">'./404'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h3 id="2-3-2-权限"><a href="#2-3-2-权限" class="headerlink" title="2.3.2 权限"></a>2.3.2 权限</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token number">1</span><span class="token punctuation">.</span>当要设定某些菜单只有部分用户可见的时候，可以在菜单配置中写 access<span class="token punctuation">:</span> <span class="token string">'canAdmin'</span><span class="token number">2</span><span class="token punctuation">.</span>canAdmin的信息在src<span class="token operator">/</span>access<span class="token punctuation">.</span>ts中声明，该文件中导出的access函数会用插件@umijs<span class="token operator">/</span>plugin<span class="token operator">-</span>access进行运行时配置，函数返回的结果要是下面类型 <span class="token operator">*</span>  返回结果<span class="token punctuation">:</span> <span class="token operator">*</span>  <span class="token punctuation">{</span> <span class="token operator">*</span>     canAdmin<span class="token punctuation">:</span><span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token operator">*</span>     canUser<span class="token punctuation">:</span><span class="token keyword">false</span> <span class="token operator">*</span>  <span class="token punctuation">}</span><span class="token number">3</span><span class="token punctuation">.</span>useAccess：可以在页面根据不同的登录用户显示不同的信息   <span class="token keyword">import</span> <span class="token punctuation">{</span> useAccess<span class="token punctuation">,</span> Access <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> access <span class="token operator">=</span> <span class="token function">useAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//此处为当前返回的结果数据</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>access<span class="token punctuation">.</span>canReadFoo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果可以读取 Foo，则...</span>   <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>Access     accessible<span class="token operator">=</span><span class="token punctuation">{</span>access<span class="token punctuation">.</span>canReadFoo<span class="token punctuation">}</span>     fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Can not read foo content<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span>          <span class="token operator">></span>          Foo content<span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Access<span class="token operator">></span></code></pre><h3 id="2-3-3-布局"><a href="#2-3-3-布局" class="headerlink" title="2.3.3 布局"></a>2.3.3 布局</h3><pre class=" language-javascript"><code class="language-javascript">当某个路由不需要布局文件的时候，只需要在config<span class="token punctuation">.</span>ts的路由配置中设定layout<span class="token punctuation">:</span> <span class="token boolean">false</span>即可，如果没有写这个，则会使用默认的布局文件默认的布局文件在app<span class="token punctuation">.</span>tsx中layout中声明，会使用@umijs<span class="token operator">/</span>plugin<span class="token operator">-</span>layout进行运行时配置</code></pre><h3 id="2-3-4-InitialState"><a href="#2-3-4-InitialState" class="headerlink" title="2.3.4 InitialState"></a>2.3.4 InitialState</h3><p>在app.tsx中导出getInitialState方法，会使用@umijs/plugin-initial-state插件进行运行时配置，该方法会在整个应用最开始执行，返回值会作为全局共享的数据。(每次刷新页面的之后都会执行)</p><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span><span class="token punctuation">.</span> app<span class="token punctuation">.</span>tsx使用getInitialState提供全局共享数据<span class="token comment" spellcheck="true">/**@umijs/plugin-initial-state  会启用这个插件* getInitialState会在整个应用最开始执行，返回值会作为全局共享的数据* 其他组件中可以使用useModel来获取这份数据 (类似生产者消费者模式)*/</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getInitialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token punctuation">{</span>  currentUser<span class="token operator">?</span><span class="token punctuation">:</span> API<span class="token punctuation">.</span>CurrentUser<span class="token punctuation">;</span>  settings<span class="token operator">?</span><span class="token punctuation">:</span> LayoutSettings<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果是登录页面，不执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>history<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname <span class="token operator">!==</span> <span class="token string">'/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> currentUser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        currentUser<span class="token punctuation">,</span>        settings<span class="token punctuation">:</span> defaultSettings<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/user/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    settings<span class="token punctuation">:</span> defaultSettings<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>#<span class="token number">2</span><span class="token punctuation">.</span>在其他组件中可以通过useModel获取上面暴露的数据<span class="token keyword">import</span> <span class="token punctuation">{</span> useModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//initialState是getInitialState方法的返回值</span><span class="token comment" spellcheck="true">//loading是数据加载状态</span><span class="token comment" spellcheck="true">//refresh可以重新执行getInitialState方法</span><span class="token keyword">const</span> <span class="token punctuation">{</span> initialState<span class="token punctuation">,</span>loading<span class="token punctuation">,</span>refresh <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">'@@initialState'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   </code></pre><h3 id="2-3-5-国际化"><a href="#2-3-5-国际化" class="headerlink" title="2.3.5 国际化"></a>2.3.5 国际化</h3><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span><span class="token punctuation">.</span>src<span class="token operator">/</span>locales 是国际化的配置文件#<span class="token number">2</span><span class="token punctuation">.</span>SelectLang是语言选择组件<span class="token keyword">import</span> <span class="token punctuation">{</span> SelectLang <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>#<span class="token number">3</span><span class="token punctuation">.</span>useIntl国际化库<span class="token keyword">import</span> <span class="token punctuation">{</span> useIntl<span class="token punctuation">,</span>FormattedMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//useIntl().formatMessage  使用formatMessage这个api进行国际化</span><span class="token function">useIntl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">'menu.home'</span><span class="token punctuation">,</span>    defaultMessage<span class="token punctuation">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//使用FormattedMessage组件进行国际化</span><span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token operator">&lt;</span>FormattedMessage id<span class="token operator">=</span><span class="token string">"menu.admin"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre><h1 id="3-知识点介绍"><a href="#3-知识点介绍" class="headerlink" title="3.知识点介绍"></a>3.知识点介绍</h1><h2 id="3-1-封装组件介绍"><a href="#3-1-封装组件介绍" class="headerlink" title="3.1 封装组件介绍"></a>3.1 封装组件介绍</h2><p>Footer 网页底部组件的封装</p><p>HeaderDropdown 鼠标移动的下拉组件的封装</p><p>PageLoading  页面加载组件的封装   需要在config.ts中配置</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//PageLoading  pro-layout封装的一个简单的加载页面</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PageLoading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@ant-design/pro-layout'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// loading components from code split</span><span class="token comment" spellcheck="true">// https://umijs.org/plugin/umi-plugin-react.html#dynamicimport</span><span class="token keyword">export</span> <span class="token keyword">default</span> PageLoading<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。</span>dynamicImport<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loading<span class="token punctuation">:</span> <span class="token string">'@/components/PageLoading/index'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>RightContent  登录后右上侧组件的封装(包含搜索、用户头像、语言选择等信息)</p><h2 id="3-2-procomponents"><a href="#3-2-procomponents" class="headerlink" title="3.2  procomponents"></a>3.2  procomponents</h2><p><a href="https://procomponents.ant.design/components/layout#api">https://procomponents.ant.design/components/layout#api</a></p><h3 id="3-2-1-高级布局ProLayout"><a href="#3-2-1-高级布局ProLayout" class="headerlink" title="3.2.1 高级布局ProLayout"></a>3.2.1 高级布局ProLayout</h3><h4 id="a-BasicLayout-amp-amp-BasicLayoutProps"><a href="#a-BasicLayout-amp-amp-BasicLayoutProps" class="headerlink" title="a) BasicLayout&amp;&amp;BasicLayoutProps"></a>a) BasicLayout&amp;&amp;BasicLayoutProps</h4><p>BasicLayout 基础页面布局，包含了头部导航，侧边栏和通知栏等等。</p><p>ProLayout 与 umi 配合使用会有最好的效果，umi 会把 config.ts 中的路由帮我们自动注入到配置的 layout 中，这样我们就可以免去手写菜单的烦恼。</p><p>BasicLayoutProps基本页面布局的属性</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * app.tsx :  这边没有直接使用BasicLayout，而是写一个箭头函数返回BasicLayoutProps的实现，原因在于此处要根据initialState处理页面切换。 * @umijs/plugin-layout * 默认登录后的页面布局模板 (此处权限验证的代码已经封装，看不到了，在老版本的项目中可以看到源代码) */</span><span class="token keyword">export</span> <span class="token keyword">const</span> layout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  initialState<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  initialState<span class="token punctuation">:</span> <span class="token punctuation">{</span> settings<span class="token operator">?</span><span class="token punctuation">:</span> LayoutSettings<span class="token punctuation">;</span> currentUser<span class="token operator">?</span><span class="token punctuation">:</span> API<span class="token punctuation">.</span>CurrentUser <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> BasicLayoutProps <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//渲染顶部右侧内容</span>    rightContentRender<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>RightContent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//关闭 content的 margin</span>    disableContentMargin<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//渲染网页底部页面</span>    footerRender<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//当切换页面的时候触发的事件</span>    onPageChange<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果没有登录，重定向到 login</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialState<span class="token operator">?</span><span class="token punctuation">.</span>currentUser<span class="token operator">?</span><span class="token punctuation">.</span>userid <span class="token operator">&amp;&amp;</span> history<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname <span class="token operator">!==</span> <span class="token string">'/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/user/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//渲染路径导航(代码为后来新增)</span>    breadcrumbRender<span class="token punctuation">:</span> <span class="token punctuation">(</span>routers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        breadcrumbName<span class="token punctuation">:</span> <span class="token function">useIntl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token string">'menu.home'</span><span class="token punctuation">,</span>          defaultMessage<span class="token punctuation">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">...</span>routers<span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//路径导航相关(代码为后来新增)</span>    itemRender<span class="token punctuation">:</span> <span class="token punctuation">(</span>route<span class="token punctuation">,</span> params<span class="token punctuation">,</span> routes<span class="token punctuation">,</span> paths<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> first <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> first <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>paths<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>route<span class="token punctuation">.</span>breadcrumbName<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>route<span class="token punctuation">.</span>breadcrumbName<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//渲染menu菜单头的方法(代码为后来新增)</span>    menuHeaderRender<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>测试菜单<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//渲染菜单数据(此处可以修改返回的菜单数据从而实现渲染服务器返回的菜单信息)</span>    <span class="token comment" spellcheck="true">//menuData 为confit.ts中配置的菜单信息</span>    menuDataRender<span class="token punctuation">:</span> <span class="token punctuation">(</span>menuData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> menuData<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*      return [        {          path: '/user',          layout: false,          //子路由          routes: [            {              name: 'login',              path: '/user/login',              component: './user/login',            },          ],        },        {          path: '/welcome',          name: 'welcome',          icon: &lt;QuestionCircleOutlined />,          component: './Welcome',        },      ];      */</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//传入配置参数</span>    <span class="token operator">...</span>initialState<span class="token operator">?</span><span class="token punctuation">.</span>settings<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="b-PageContainer"><a href="#b-PageContainer" class="headerlink" title="b) PageContainer"></a>b) PageContainer</h4><p>正文内容组件，封装了 ant design 的 PageHeader 组件，增加了 tabList 和 content。 根据当前的路由填入 title 和 breadcrumb。</p><pre class=" language-typescript"><code class="language-typescript">  <span class="token comment" spellcheck="true">//content 指定页面内容</span>  <span class="token comment" spellcheck="true">//title 指定页面标题</span>  <span class="token comment" spellcheck="true">//pageHeaderRender 重新渲染页面头</span>  <span class="token comment" spellcheck="true">//footer 网页尾部内容</span>  <span class="token comment" spellcheck="true">//tabList 切换的tab列表</span>  <span class="token operator">&lt;</span>PageContainer    content<span class="token operator">=</span><span class="token string">" 这个页面只有 admin 权限才能查看"</span>    title<span class="token operator">=</span><span class="token string">"管理员页面头部信息"</span>    pageHeaderRender<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    footer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>div<span class="token operator">></span>页面尾巴<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">}</span>    tabList<span class="token operator">=</span><span class="token punctuation">{</span>       <span class="token punctuation">[</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>tab<span class="token punctuation">:</span><span class="token operator">&lt;</span>div<span class="token operator">></span>张三<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>tab<span class="token punctuation">:</span><span class="token operator">&lt;</span>div<span class="token operator">></span>李四<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>正文内容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>PageContainer<span class="token operator">></span></code></pre><h4 id="c-DefaultFooter"><a href="#c-DefaultFooter" class="headerlink" title="c) DefaultFooter"></a>c) DefaultFooter</h4><p>网页默认的底部组件</p><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>DefaultFooter    copyright<span class="token operator">=</span><span class="token string">"2019 蚂蚁金服体验技术部出品"</span>    links<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        key<span class="token punctuation">:</span> <span class="token string">'Ant Design Pro'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'Ant Design Pro'</span><span class="token punctuation">,</span>        href<span class="token punctuation">:</span> <span class="token string">'https://pro.ant.design'</span><span class="token punctuation">,</span>        blankTarget<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        key<span class="token punctuation">:</span> <span class="token string">'github'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token operator">&lt;</span>GithubOutlined <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>        href<span class="token punctuation">:</span> <span class="token string">'https://github.com/ant-design/ant-design-pro'</span><span class="token punctuation">,</span>        blankTarget<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        key<span class="token punctuation">:</span> <span class="token string">'Ant Design'</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'Ant Design'</span><span class="token punctuation">,</span>        href<span class="token punctuation">:</span> <span class="token string">'https://ant.design'</span><span class="token punctuation">,</span>        blankTarget<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="d-PageLoading"><a href="#d-PageLoading" class="headerlink" title="d) PageLoading"></a>d) PageLoading</h4><p>加载页面组件，需要在config.ts中配置。配置之后加载页面就默认会用该组件</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。</span>dynamicImport<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loading<span class="token punctuation">:</span> <span class="token string">'@/components/PageLoading/index'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="e-FooterToolbar"><a href="#e-FooterToolbar" class="headerlink" title="e) FooterToolbar"></a>e) FooterToolbar</h4><p>底部工具栏组件</p><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>FooterToolbar    extra<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>        已选择项<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>服务调用次数总计万<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**批量删除按钮 */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>Button<span class="token operator">></span>批量删除<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**批量审批按钮 */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>批量审批<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>FooterToolbar<span class="token operator">></span></code></pre><h3 id="3-2-2-高级表格ProTable"><a href="#3-2-2-高级表格ProTable" class="headerlink" title="3.2.2  高级表格ProTable"></a>3.2.2  高级表格ProTable</h3><h4 id="a-ProColumns"><a href="#a-ProColumns" class="headerlink" title="a) ProColumns"></a>a) ProColumns</h4><p>高级列，会嵌套在高级表格中使用</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//定义高级列(会嵌套在高级表格中)</span>  <span class="token keyword">const</span> columns<span class="token punctuation">:</span> ProColumns<span class="token operator">&lt;</span>TableListItem<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'规则名称'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//页面显示的标题</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//对应数据源中的字段</span>      tip<span class="token punctuation">:</span> <span class="token string">'规则名称是唯一的 key'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//tip提示信息</span>      formItemProps<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//校验规则</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>            message<span class="token punctuation">:</span> <span class="token string">'规则名称为必填项'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//渲染列的方法 : dom为页面元素,entity为数据源</span>      render<span class="token punctuation">:</span> <span class="token punctuation">(</span>dom<span class="token punctuation">,</span> entity<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>a onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setRow</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>dom<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'描述'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'desc'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//input的type类型</span>      valueType<span class="token punctuation">:</span> <span class="token string">'textarea'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'服务调用次数'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'callNo'</span><span class="token punctuation">,</span>      sorter<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//新建表单和查询的展开表单中不显示当前信息</span>      hideInForm<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//渲染文字的方法</span>      renderText<span class="token punctuation">:</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 万`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'状态'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'status'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//新建表单和查询的展开表单中不显示当前信息</span>      hideInForm<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//枚举值</span>      valueEnum<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'关闭'</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">'Default'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'运行中'</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">'Processing'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'已上线'</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">'Success'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'异常'</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">'Error'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'上次调度时间'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'updatedAt'</span><span class="token punctuation">,</span>      sorter<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// input的type类型</span>      valueType<span class="token punctuation">:</span> <span class="token string">'dateTime'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 新建表单查询的展开表单中不显示当前信息</span>      <span class="token comment" spellcheck="true">// hideInForm: true,</span>      <span class="token comment" spellcheck="true">// 自定义渲染内容(会在新增表单和查询的展开表单中显示,要看到这个属性的结果需要把hideInForm: true去掉)</span>      renderFormItem<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token punctuation">{</span> defaultRender<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">,</span> form<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前数据的状态信息</span>        <span class="token keyword">const</span> status <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token operator">===</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token operator">===</span> <span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token operator">&lt;</span>Input <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> placeholder<span class="token operator">=</span><span class="token string">"请输入异常原因！"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">defaultRender</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'操作'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'option'</span><span class="token punctuation">,</span>      valueType<span class="token punctuation">:</span> <span class="token string">'option'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//渲染操作栏的方法</span>      render<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> record<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**配置按钮 */</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span>a            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//点击配置按钮让更新表单可见</span>              <span class="token function">handleUpdateModalVisible</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//点击配置按钮设置更新表单的数据</span>              <span class="token function">setStepFormValues</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token operator">></span>            配置          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>          <span class="token operator">&lt;</span>Divider type<span class="token operator">=</span><span class="token string">"vertical"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**订阅警报按钮 */</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>订阅警报<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="b-ProTable-amp-ActionType"><a href="#b-ProTable-amp-ActionType" class="headerlink" title="b) ProTable&amp;ActionType"></a>b) ProTable&amp;ActionType</h4><p>ProTable 高级表格</p><p>ActionType  记录高级表格的常用事件  (reload reset reloadAndRest等事件)</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> ProTable<span class="token punctuation">,</span> <span class="token punctuation">{</span> ProColumns<span class="token punctuation">,</span> ActionType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@ant-design/pro-table'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//actionRef 记录高级表格的常用事件  (reload reset reloadAndRest等事件)</span><span class="token keyword">const</span> actionRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>ActionType<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>ProTable<span class="token operator">&lt;</span>TableListItem<span class="token operator">></span>        headerTitle<span class="token operator">=</span><span class="token string">"查询表格"</span> <span class="token comment" spellcheck="true">//表格标题</span>        actionRef<span class="token operator">=</span><span class="token punctuation">{</span>actionRef<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//表格事件的引用</span>        rowKey<span class="token operator">=</span><span class="token string">"key"</span> <span class="token comment" spellcheck="true">//表格每一行的key，这边为数据源中每一条数据的key</span>        search<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>          labelWidth<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//搜索lable的宽度   如果不想显示搜索栏，设置成false即可</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//渲染工具栏(新建按钮)</span>        toolBarRender<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">//点击新建按钮，让新建表单可见</span>          <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>新建<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置表格数据 (columns配置的sorter没有用，这边入参的sorter为空，要实现排序，手动storter写死)</span>        request<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> sorter<span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//指定表格列</span>        columns<span class="token operator">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//选中每一行(打钩)，记录下选中的数据</span>        rowSelection<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="3-2-3-高级描述ProDescriptions"><a href="#3-2-3-高级描述ProDescriptions" class="headerlink" title="3.2.3 高级描述ProDescriptions"></a>3.2.3 高级描述ProDescriptions</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> ProDescriptions <span class="token keyword">from</span> <span class="token string">'@ant-design/pro-descriptions'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>ProDescriptions<span class="token operator">&lt;</span>TableListItem<span class="token operator">></span>    <span class="token comment" spellcheck="true">//几列显示</span>    column<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//标题 如果row存在则取name，如果row不存在则不取name，避免row不存在的时候报错</span>    title<span class="token operator">=</span><span class="token punctuation">{</span>row<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置ProDescriptions的数据</span>    request<span class="token operator">=</span><span class="token punctuation">{</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        data<span class="token punctuation">:</span> row <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//传参，参数改变的时候会触发页面刷新</span>    params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        id<span class="token punctuation">:</span> row<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置ProDescriptions的列数据</span>    columns<span class="token operator">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="3-3-登录页面及流程"><a href="#3-3-登录页面及流程" class="headerlink" title="3.3 登录页面及流程"></a>3.3 登录页面及流程</h2><h3 id="3-3-1-登录页面及子组件"><a href="#3-3-1-登录页面及子组件" class="headerlink" title="3.3.1 登录页面及子组件"></a>3.3.1 登录页面及子组件</h3><p>user/login/index.tsx   登录页面</p><p>user/login/components/login/index.tsx  封装的login组件，同时把Tab、Submit、Username、Password、Mobile、Captcha等组件挂在到当前index.tsx中</p><p>LoginContext.tsx  上下文对象，主要通过上下文在user/login/components/login/index.tsx中给子组件共享和暴露数据</p><p>LoginItem.tsx    登录项，主要在这里通过map.tsx中的配置动态创建登录子组件，包括Username、Password、Mobile、Captcha等</p><p>LoginSumit.tsx  提交登录表单的组件</p><p>LoginTab.tsx  登录切换Tab组件</p><h3 id="3-3-2-登录流程"><a href="#3-3-2-登录流程" class="headerlink" title="3.3.2 登录流程"></a>3.3.2 登录流程</h3><ol><li><p>提交登录表单</p></li><li><p>调用fakeAccountLogin这个service发送登录请求</p></li><li><p>登录成功之后跳回回调地址 </p><p>注意：这边使用window.location.href=”xx”，会刷新页面，从而触发app.tsx中的getInitialState方法重新执行</p></li><li><p>根据当前url从路由配置中找寻相应的规则，然后根据getInitialState中的CurrentUser做权限验证，呈现登录后的用户菜单和页面</p></li></ol><h2 id="3-4-列表页流程"><a href="#3-4-列表页流程" class="headerlink" title="3.4 列表页流程"></a>3.4 列表页流程</h2><h3 id="3-4-1-列表页面及子组件"><a href="#3-4-1-列表页面及子组件" class="headerlink" title="3.4.1 列表页面及子组件"></a>3.4.1 列表页面及子组件</h3><p>pages/ListTableList/index.tsx   列表页面</p><p>pages/ListTableList/service.ts  列表页面的请求文件</p><p>pages/ListTableList/data.d.ts   列表页面的类型声明文件</p><p>pages/ListTableList/components/createForm.tsx  创建表单的组件</p><p>pages/ListTableList/components/updateForm.tsx  更新表单的组件</p><h3 id="3-4-2-列表流程"><a href="#3-4-2-列表流程" class="headerlink" title="3.4.2 列表流程"></a>3.4.2 列表流程</h3><h4 id="a-列表页面展示、查询、分页"><a href="#a-列表页面展示、查询、分页" class="headerlink" title="a) 列表页面展示、查询、分页"></a>a) 列表页面展示、查询、分页</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//设置表格数据 (columns配置的sorter没有用，这边入参的sorter为空，要实现排序，手动storter写死)</span>request<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> sorter<span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>         <span class="token function">queryRule</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> sorter<span class="token punctuation">:</span> <span class="token punctuation">{</span> callNo<span class="token punctuation">:</span> <span class="token string">'ascend'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> filter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="b-规则新增"><a href="#b-规则新增" class="headerlink" title="b) 规则新增"></a>b) 规则新增</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//1.点击新建按钮，让新建表单模态框可见</span><span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">handleModalVisible</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>PlusOutlined <span class="token operator">/</span><span class="token operator">></span> 新建<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//2.点击新建表单的提交表单按钮，发送请求，然后让新建表单不可见，然后让外边的表单刷新页面</span><span class="token operator">&lt;</span>CreateForm onCancel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">handleModalVisible</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span> modalVisible<span class="token operator">=</span><span class="token punctuation">{</span>createModalVisible<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**嵌套一个ProTable */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>ProTable<span class="token operator">&lt;</span>TableListItem<span class="token punctuation">,</span> TableListItem<span class="token operator">></span>          <span class="token comment" spellcheck="true">//点击提交按钮 发送请求 让外部的ProTable刷新表格</span>          onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>async <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> success <span class="token operator">=</span> await <span class="token function">handleAdd</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">handleModalVisible</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>actionRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                actionRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//每一行的索引</span>          rowKey<span class="token operator">=</span><span class="token string">"key"</span>          <span class="token comment" spellcheck="true">//表格的类型</span>          type<span class="token operator">=</span><span class="token string">"form"</span>          <span class="token comment" spellcheck="true">//指定表格的列  此时columns中配置的hideInForm生效了</span>          columns<span class="token operator">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>CreateForm<span class="token operator">></span></code></pre><h4 id="c-规则更新"><a href="#c-规则更新" class="headerlink" title="c) 规则更新"></a>c) 规则更新</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//1.点击配置按钮，让配置表单可见，并设置配置表单的数据</span><span class="token function">handleUpdateModalVisible</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//点击配置按钮设置更新表单的数据</span><span class="token function">setStepFormValues</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.点击配置表单的提交按钮，发送请求，然后让配置表单不可见，然后让外边的表单刷新页面</span><span class="token operator">&lt;</span>UpdateForm          <span class="token comment" spellcheck="true">//提交表单 发送请求 让外部的ProTable刷新表格</span>          onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>async <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> success <span class="token operator">=</span> await <span class="token function">handleUpdate</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">handleUpdateModalVisible</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">setStepFormValues</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>actionRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                actionRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//取消更新表单</span>          onCancel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">handleUpdateModalVisible</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setStepFormValues</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//更新表单的显示隐藏状态</span>          updateModalVisible<span class="token operator">=</span><span class="token punctuation">{</span>updateModalVisible<span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//更新表单的数据</span>          values<span class="token operator">=</span><span class="token punctuation">{</span>stepFormValues<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="d-规则选中"><a href="#d-规则选中" class="headerlink" title="d) 规则选中"></a>d) 规则选中</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//1.选中规则，保存选中的数据到selectedRows数组</span>rowSelection<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    onChange<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> selectedRows<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setSelectedRows</span><span class="token punctuation">(</span>selectedRows<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.如果选中行的长度>0，则让底部FooterToolbar显示出来</span><span class="token comment" spellcheck="true">//点击批量删除，发送请求，设置选中的selectedRows数组为空(让FooterToolbar不可见)，同时让外边的表单刷新页面</span><span class="token punctuation">{</span>selectedRowsState<span class="token operator">?</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>FooterToolbar          extra<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>              已选择 <span class="token operator">&lt;</span>a style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontWeight<span class="token punctuation">:</span> <span class="token number">600</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>selectedRowsState<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> 项<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>              <span class="token operator">&lt;</span>span<span class="token operator">></span>                服务调用次数总计 <span class="token punctuation">{</span>selectedRowsState<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> pre <span class="token operator">+</span> item<span class="token punctuation">.</span>callNo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> 万              <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token punctuation">}</span>        <span class="token operator">></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**批量删除按钮 */</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span>Button            onClick<span class="token operator">=</span><span class="token punctuation">{</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              await <span class="token function">handleRemove</span><span class="token punctuation">(</span>selectedRowsState<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">setSelectedRows</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              actionRef<span class="token punctuation">.</span>current<span class="token operator">?</span><span class="token punctuation">.</span>reloadAndRest<span class="token operator">?</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token operator">></span>            批量删除          <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>           <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**批量审批按钮 */</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">></span>批量审批<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>FooterToolbar<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="e-查看规则名称"><a href="#e-查看规则名称" class="headerlink" title="e) 查看规则名称"></a>e) 查看规则名称</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//1.点击规则名称记录当前点击的规则数据(row)</span><span class="token operator">&lt;</span>a onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setRow</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>dom<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//2.当前记录的规则有数据的时候，让抽屉可见，并使用ProDescriptions展示数据</span><span class="token comment" spellcheck="true">// 点击抽屉组件的关闭按钮的时候，让row数据置空(此时Drawer会隐藏)</span><span class="token operator">&lt;</span>Drawer        width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">500</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当row数据存在的时候让抽屉组件显示</span>        visible<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span>row<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭抽屉组件的时候触发的方法</span>        onClose<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">setRow</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//是否显示抽屉组件的关闭按钮</span>        closable<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">false</span><span class="token punctuation">}</span>      <span class="token operator">></span>         <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**如果row中有信息则显示规则的详细信息 */</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span>row<span class="token operator">?</span><span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>ProDescriptions<span class="token operator">&lt;</span>TableListItem<span class="token operator">></span>            <span class="token comment" spellcheck="true">//几列显示</span>            column<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//标题 如果row存在则取name，如果row不存在则不取name，避免row不存在的时候报错</span>            title<span class="token operator">=</span><span class="token punctuation">{</span>row<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//设置ProDescriptions的数据</span>            request<span class="token operator">=</span><span class="token punctuation">{</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>              data<span class="token punctuation">:</span> row <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//传参，参数改变的时候会触发reload</span>            params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              id<span class="token punctuation">:</span> row<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//设置ProDescriptions的列数据</span>            columns<span class="token operator">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Drawer<span class="token operator">></span></code></pre><h1 id="4-ant-design-pro区块"><a href="#4-ant-design-pro区块" class="headerlink" title="4. ant design pro区块"></a>4. ant design pro区块</h1><p><a href="https://pro.ant.design/docs/block-cn">https://pro.ant.design/docs/block-cn</a></p><p>区块是研发资产的一种，它是一系列快速搭建页面的代码片段，它可以帮助你快速的在项目中初始化好一个页面，帮助你更快速的开发代码。当前的区块都是页面级别的区块，你可以理解为它是一些项目中经常会用到的典型页面的模板，使用区块其实相当于从已有的项目中复制一些页面的代码到你当前的项目中。</p><ul><li>以前开发一个页面：创建 JS -&gt; 创建 CSS -&gt; 创建 Model -&gt; 创建 service -&gt; 写页面组件。</li><li>现在开发一个页面：下载区块 -&gt; 基于区块初始化好的页面组件修改代码。</li></ul><p>在 Pro 中资产被分为了两种，区块和模板。区块可以类比为一个组件，而模板代表一个页面。区块现在支持所有 antd 中的 demo，可以更加快速的将 demo 导入到项目中去。</p><h1 id="5-vue-antd-admin"><a href="#5-vue-antd-admin" class="headerlink" title="5.vue-antd-admin"></a>5.vue-antd-admin</h1><p><a href="https://github.com/iczer/vue-antd-admin">https://github.com/iczer/vue-antd-admin</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ant Design Pro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Umi&amp;dva的基本使用</title>
      <link href="2020/02/18/umi-dva/"/>
      <url>2020/02/18/umi-dva/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Umi介绍"><a href="#1-Umi介绍" class="headerlink" title="1. Umi介绍"></a>1. Umi介绍</h1><h2 id="1-1-Umi是什么"><a href="#1-1-Umi是什么" class="headerlink" title="1.1 Umi是什么"></a>1.1 Umi是什么</h2><p><a href="https://umijs.org/zh-CN/docs">https://umijs.org/zh-CN/docs</a>   </p><p>一套可插拔的企业级 react 应用框架，由dva作者 sorrycc 完成，它既是一个框架也是一个工具。</p><p>Umi 以路由为基础的，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。</p><p>他在Umi中引入了 UI 工具 antd，打包工具 roadhog，路由 react-router和状态管理器 dva，做到了可插拔机制。通过约定、自动生成和解析代码等方式来辅助开发，减少开发者要写的代码量。</p><blockquote><p><strong>它主要具备以下功能：</strong></p></blockquote><ul><li><strong>可扩展</strong>，Umi 实现了完整的生命周期，并使其插件化，Umi 内部功能也全由插件完成。此外还支持插件和插件集，以满足功能和垂直域的分层需求。</li><li> <strong>开箱即用</strong>，Umi 内置了路由、构建、部署、测试等，仅需一个依赖即可上手开发。并且还提供针对 React 的集成插件集，内涵丰富的功能，可满足日常 80% 的开发需求。</li><li> <strong>企业级</strong>，经蚂蚁内部 3000+ 项目以及阿里、优酷、网易、飞猪、口碑等公司项目的验证，值得信赖。</li><li><strong>大量自研</strong>，包含微前端、组件打包、文档工具、请求库、hooks 库、数据流等，满足日常项目的周边需求。</li><li> <strong>完备路由</strong>，同时支持配置式路由和约定式路由，同时保持功能的完备性，比如动态路由、嵌套路由、权限路由等等。</li><li> <strong>面向未来</strong>，在满足需求的同时，我们也不会停止对新技术的探索。比如 dll 提速、modern mode、webpack@5、自动化 external、bundler less 等等。</li></ul><blockquote><p><strong>为什么不是？<a href="https://github.com/facebook/create-react-app">create-react-app</a></strong></p></blockquote><p>create-react-app 是基于 webpack 的打包层方案，包含 build、dev、lint 等，他在打包层把体验做到了极致，但是不包含路由，不是框架，也不支持配置。所以，如果大家想基于他修改部分配置，或者希望在打包层之外也做技术收敛时，就会遇到困难。</p><blockquote><p><strong>什么时候不用 umi？</strong></p></blockquote><p>如果你，</p><ul><li>需要支持 IE 8 或更低版本的浏览器</li><li>需要支持 React 16.8.0 以下的 React</li><li>需要跑在 Node 10 以下的环境中</li><li>有很强的 webpack 自定义需求和主观意愿</li><li>需要选择不同的路由方案</li></ul><p>Umi 可能不适合你。</p><h2 id="1-2-Umi-如何工作"><a href="#1-2-Umi-如何工作" class="headerlink" title="1.2 Umi 如何工作"></a>1.2 Umi 如何工作</h2><p>写写 Umi 背后的思考和重要概念。</p><h3 id="1-2-1-技术收敛"><a href="#1-2-1-技术收敛" class="headerlink" title="1.2.1 技术收敛"></a>1.2.1 技术收敛</h3><p><img src="https://i.loli.net/2020/11/03/B7RONxakU4Zny2L.png" alt="1601014995473"></p><p>这张图是给内部框架 Bigfish 画的，套到 Umi 上同样合适。他把大家常用的技术栈进行整理，收敛到一起，让大家只用 Umi 就可以完成 80% 的日常工作。</p><h3 id="1-2-2-插件和插件集"><a href="#1-2-2-插件和插件集" class="headerlink" title="1.2.2 插件和插件集"></a>1.2.2 插件和插件集</h3><p><img src="https://i.loli.net/2020/11/03/AsTaIDd92cBoxMw.png" alt="1601015019180"></p><p>Umi 支持插件和插件集，通过这张图应该很好理解到他们的关系，通过插件集我们把插件收敛依赖然后支持不同的业务类型。</p><p>比如@umijs/preset-react就是一个Umi的插件集，里面整合了一些常用功能。</p><ul><li><a href="https://umijs.org/zh-CN/plugins/plugin-access">plugin-access</a>，权限管理</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-analytics">plugin-analytics</a>，统计管理</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-antd">plugin-antd</a>，整合 antd UI 组件</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-crossorigin">plugin-crossorigin</a>，通常用于 JS 出错统计</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-dva">plugin-dva</a>，整合 dva</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-helmet">plugin-helmet</a>，整合 <a href="https://github.com/nfl/react-helmet">react-helmet</a>，管理 HTML 文档标签（如标题、描述等）</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-initial-state">plugin-initial-state</a>，初始化数据管理</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-layout">plugin-layout</a>，配置启用 ant-design-pro 的布局</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-locale">plugin-locale</a>，国际化能力</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-model">plugin-model</a>，基于 hooks 的简易数据流</li><li><a href="https://umijs.org/zh-CN/plugins/plugin-request">plugin-request</a>，基于 umi-request 和 umi-hooks 的请求方案</li></ul><h3 id="1-2-3-配置式路由和约定式路由"><a href="#1-2-3-配置式路由和约定式路由" class="headerlink" title="1.2.3 配置式路由和约定式路由"></a>1.2.3 配置式路由和约定式路由</h3><p>Umi 的路由既支持配置式，又支持约定式。配置式是对于现实的低头，也是大部分用户在用的，因为他功能强大；约定式是我们希望走去的方向，因为他简洁优雅。</p><h3 id="1-2-4-umi-临时文件"><a href="#1-2-4-umi-临时文件" class="headerlink" title="1.2.4 .umi 临时文件"></a>1.2.4 .umi 临时文件</h3><p>.umi 临时目录是整个 Umi 项目的发动机，你的入口文件、路由等等都在这里，这些是由 umi 内部插件及三方插件生成的。</p><p>你通常会在 .umi 下看到以下目录，</p><pre><code>+ .umi  + core     # 内部插件生成  + pluginA  # 外部插件生成  + presetB  # 外部插件生成  + umi.ts   # 入口文件</code></pre><p>临时文件是 Umi 框架中非常重要的一部分，框架或插件会根据你的代码生成临时文件，这些原来需要放在项目里的脏乱差的部分都被藏在了这里。</p><p>你可以在这里调试代码，但不要在 .git 仓库里提交他，因为他的临时性，每次启动 umi 时都会被删除并重新生成。</p><h1 id="2-Umi3的使用"><a href="#2-Umi3的使用" class="headerlink" title="2. Umi3的使用"></a>2. Umi3的使用</h1><h2 id="2-1-安装Umi创建项目"><a href="#2-1-安装Umi创建项目" class="headerlink" title="2.1  安装Umi创建项目"></a>2.1  安装Umi创建项目</h2><pre class=" language-jsx"><code class="language-jsx">$ yarn global add umi@<span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">23</span>$ umi <span class="token operator">-</span>v<span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">23</span></code></pre><pre class=" language-jsx"><code class="language-jsx">$ mkdir myapp <span class="token operator">&amp;&amp;</span> cd myapp$ yarn create umi</code></pre><p><img src="https://i.loli.net/2020/11/03/3C7eyf5ipj2rVUZ.png" alt="1573453772780"></p><p><img src="https://i.loli.net/2020/11/03/RTlk5Cxa1t4smph.png" alt="1573453795170"></p><p><img src="https://i.loli.net/2020/11/03/vbmaTHMpRI3DtL7.png" alt="1601014079199"></p><h2 id="2-2-升级到Umi3"><a href="#2-2-升级到Umi3" class="headerlink" title="2.2 升级到Umi3"></a>2.2 升级到Umi3</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span> 删除<span class="token keyword">package</span><span class="token punctuation">.</span>json中 dva 和 antd 的依赖 <span class="token punctuation">(</span>Umi3中已经包含这两个依赖<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> 修改<span class="token keyword">package</span><span class="token punctuation">.</span>json中umi的包的版本号   <span class="token string">"umi"</span><span class="token punctuation">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span> 删除<span class="token keyword">package</span><span class="token punctuation">.</span>json中 umi<span class="token operator">-</span>plugin<span class="token operator">-</span>react 依赖，新增umijs<span class="token operator">/</span>preset<span class="token operator">-</span>react 依赖   <span class="token string">"@umijs/preset-react"</span><span class="token punctuation">:</span> <span class="token string">"^1"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span> 修改<span class="token keyword">package</span><span class="token punctuation">.</span>json中的node环境要求   <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token string">">=10.13.0"</span><span class="token number">5</span><span class="token punctuation">.</span> tsconfig<span class="token punctuation">.</span>json中的paths新增如下：   <span class="token string">"@@/*"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"src/.umi/*"</span><span class="token punctuation">]</span><span class="token number">6</span><span class="token punctuation">.</span> 修改 <span class="token punctuation">.</span>umirc<span class="token punctuation">.</span>ts文件    <span class="token operator">/</span><span class="token operator">/</span>引入umi中的配置文件的类型 ts中要用    <span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span> ref<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>umijs<span class="token punctuation">.</span>org<span class="token regex">/config/</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token operator">/</span><span class="token operator">/</span>路由配置      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>          <span class="token operator">/</span><span class="token operator">/</span>注意：这边文件的路径是相对于src<span class="token operator">/</span><span class="token punctuation">.</span>mui中来确定的          component<span class="token punctuation">:</span> <span class="token string">'../layouts/index'</span><span class="token punctuation">,</span>          routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>               path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>               component<span class="token punctuation">:</span> <span class="token string">'../pages/index'</span>             <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span>启用antd插件      <span class="token operator">/</span><span class="token operator">/</span>每个插件都会对应一个 id 和一个 key，id 是路径的简写，key 是进一步简化后用于配置的唯一值。      <span class="token operator">/</span><span class="token operator">/</span>比如插件 <span class="token operator">/</span>node_modules<span class="token operator">/</span>@umijs<span class="token operator">/</span>plugin<span class="token operator">-</span>antd <span class="token punctuation">,</span>id 为 @umijs<span class="token operator">/</span>plugin<span class="token operator">-</span>antd，key 为 antd。      antd<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span>启用dva插件      dva<span class="token punctuation">:</span> <span class="token punctuation">{</span>        hmr<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token operator">/</span><span class="token operator">/</span>启用dva model的热更新      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span>启用loacle插件  配置之后才可以使用useIntl       locale<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span>默认的语言环境        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>antd开启国际化        antd<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">,</span> when it is <span class="token boolean">true</span><span class="token punctuation">,</span> will use `navigator<span class="token punctuation">.</span>language` overwrite <span class="token keyword">default</span>        baseNavigator<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> 浏览器兼容      targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>        ie<span class="token punctuation">:</span> <span class="token number">11</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> 开启文件hash后缀      hash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> 启用 Hash 路由      history<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'hash'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> Theme <span class="token keyword">for</span> antd<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>ant<span class="token punctuation">.</span>design<span class="token operator">/</span>docs<span class="token operator">/</span>react<span class="token operator">/</span>customize<span class="token operator">-</span>theme<span class="token operator">-</span>cn      theme<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">...</span>darkTheme<span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span> 主要颜色<span class="token punctuation">,</span>        <span class="token string">'font-size-base'</span><span class="token punctuation">:</span> <span class="token string">'34px'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span>配置按需加载   即是否把构建产物进行拆分，在需要的时候下载额外的 JS 再执行。      dynamicImport<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> 指定react<span class="token operator">-</span>router的base，部署到根目录时需要配置      base<span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> 指定webpack的publicPath，指向静态资源文件所在的路径      publicPath<span class="token punctuation">:</span><span class="token string">'./'</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> DefinePlugin 全局常量定义      define<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> 代理配置      proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span> <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span>   target<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:10000/'</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>   changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>   pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token operator">/</span><span class="token operator">/</span> 别名      alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'@'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token punctuation">.</span> 注释掉 app<span class="token punctuation">.</span>ts中的<span class="token keyword">const</span> dva 代码    <span class="token operator">/</span><span class="token operator">*</span>    <span class="token keyword">export</span> <span class="token keyword">const</span> dva <span class="token operator">=</span> <span class="token punctuation">{</span>      config<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> ErrorEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          err<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">.</span> 修改pages<span class="token operator">/</span>index<span class="token punctuation">.</span>tsx    <span class="token comment" spellcheck="true">//useIntl 国际化的api</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> useIntl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://umijs.org/guide/getting-started.html"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token function">useIntl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'index.start'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><h2 id="2-3-运行项目"><a href="#2-3-运行项目" class="headerlink" title="2.3 运行项目"></a>2.3 运行项目</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//然后安装依赖</span>$ yarn<span class="token comment" spellcheck="true">//然后启动应用</span>$ yarn start</code></pre><p>几秒钟后，你会看到以下输出，</p><pre class=" language-jsx"><code class="language-jsx"> DONE  Compiled successfully <span class="token keyword">in</span> 212ms  App running at<span class="token punctuation">:</span>  <span class="token operator">-</span> Local<span class="token punctuation">:</span>   http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>  <span class="token operator">-</span> Network<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">{</span><span class="token punctuation">{</span> YourIP <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span></code></pre><p>在浏览器里打开 <a href="http://localhost:8000/">http://localhost:8000</a>，你会看到 umi 的欢迎界面。</p><p><img src="https://i.loli.net/2020/11/03/2kvGAwIRglafLX9.png" alt="img"></p><h2 id="2-4-目录结构介绍"><a href="#2-4-目录结构介绍" class="headerlink" title="2.4 目录结构介绍"></a>2.4 目录结构介绍</h2><p><img src="https://i.loli.net/2020/11/03/3wlgZrYOmbpd9tB.png" alt="1601020141915"></p><h2 id="2-5-配置文件介绍"><a href="#2-5-配置文件介绍" class="headerlink" title="2.5 配置文件介绍"></a>2.5 配置文件介绍</h2><h3 id="2-5-1-editorconfig"><a href="#2-5-1-editorconfig" class="headerlink" title="2.5.1 .editorconfig"></a>2.5.1 .editorconfig</h3><p>该文件是配置编辑器的一些设置，这里我修改了一个缩进，indent_size = 4。因为个人比较喜欢4个缩进，看着舒服。</p><h3 id="2-5-2-env"><a href="#2-5-2-env" class="headerlink" title="2.5.2 .env"></a>2.5.2 .env</h3><p>该文件是项目环境配置文件，默认的是BROWSER=none，这时候项目启动后，浏览器不会自动打开。</p><h3 id="2-5-3-eslintrc"><a href="#2-5-3-eslintrc" class="headerlink" title="2.5.3 .eslintrc"></a>2.5.3 .eslintrc</h3><p>多人开发时候，一套良好的代码规范是非常必要的。这里配置了一份基础eslint文件，供参考。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span>  <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"es6"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"browser"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"mocha"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>    <span class="token string">"react-app"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"strict"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//"indent": ["error", 4, { "SwitchCase": 1 }],</span>    <span class="token string">"eqeqeq"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"no-lone-blocks"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"no-lonely-if"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"no-multi-spaces"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"no-multiple-empty-lines"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"max"</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"no-param-reassign"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"no-spaced-func"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"no-use-before-define"</span><span class="token punctuation">:</span> <span class="token string">"warn"</span><span class="token punctuation">,</span>    <span class="token string">"no-unused-vars"</span><span class="token punctuation">:</span> <span class="token string">"warn"</span><span class="token punctuation">,</span>    <span class="token string">"no-with"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"default-case"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string">"key-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"beforeColon"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"afterColon"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"comma-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"before"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"after"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"generator-star-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"before"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"after"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"semi"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"warn"</span><span class="token punctuation">,</span>      <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"omitLastInOneLineBlock"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"no-restricted-globals"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"array-callback-return"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"no-console"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"warn"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"allow"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">"info"</span><span class="token punctuation">,</span>          <span class="token string">"warn"</span><span class="token punctuation">,</span>          <span class="token string">"error"</span><span class="token punctuation">,</span>          <span class="token string">"time"</span><span class="token punctuation">,</span>          <span class="token string">"timeEnd"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"react/react-in-jsx-scope"</span><span class="token punctuation">:</span> <span class="token string">"warn"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-3-umirc"><a href="#2-5-3-umirc" class="headerlink" title="2.5.3 .umirc"></a>2.5.3 .umirc</h3><p>.umirc为Umi项目的配置文件，.umirc.js 和 config/config.js二选一</p><h3 id="2-5-4-tsconfig-json"><a href="#2-5-4-tsconfig-json" class="headerlink" title="2.5.4 tsconfig.json"></a>2.5.4 tsconfig.json</h3><p>typescript的配置文件，可以配置ts编译的一些特征</p><p><a href="https://www.jianshu.com/p/78dcb09dac2c">https://www.jianshu.com/p/78dcb09dac2c</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//tsconfig.json 对象类型的索引签名隐式具有"any"类型 报错</span><span class="token string">"suppressImplicitAnyIndexErrors"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Basic Options */</span>    <span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"es5"</span> <span class="token comment" spellcheck="true">/* target用于指定编译之后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */</span><span class="token punctuation">,</span>    <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"commonjs"</span> <span class="token comment" spellcheck="true">/* 用来指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */</span><span class="token punctuation">,</span>    <span class="token string">"lib"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es6"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* lib用于指定要包含在编译中的库文件 */</span><span class="token punctuation">,</span>    <span class="token string">"allowJs"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">/* allowJs设置的值为true或false，用来指定是否允许编译js文件，默认是false，即不编译js文件 */</span>    <span class="token string">"checkJs"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">/* checkJs的值为true或false，用来指定是否检查和报告js文件中的错误，默认是false */</span>    <span class="token string">"jsx"</span><span class="token punctuation">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">/* 指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'. */</span>    <span class="token string">"declaration"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">/* declaration的值为true或false，用来指定是否在编译的时候生成相应的".d.ts"声明文件。如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件。但是declaration和allowJs不能同时设为true */</span>    <span class="token string">"declarationMap"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">/* 值为true或false，指定是否为声明文件.d.ts生成map文件 */</span>    <span class="token string">"sourceMap"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">/* sourceMap的值为true或false，用来指定编译时是否生成.map文件 */</span>    <span class="token string">"outFile"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">/* outFile用于指定将输出文件合并为一个文件，它的值为一个文件路径名。比如设置为"./dist/main.js"，则输出的文件为一个main.js文件。但是要注意，只有设置module的值为amd和system模块时才支持这个配置 */</span>    <span class="token string">"outDir"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">/* outDir用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹 */</span>    <span class="token string">"rootDir"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">/* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译 */</span>    <span class="token string">"composite"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">/* 是否编译构建引用项目  */</span>    <span class="token string">"incremental"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">/* Enable incremental compilation */</span>    <span class="token string">"tsBuildInfoFile"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">/* Specify file to store incremental compilation information */</span>    <span class="token string">"removeComments"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">/* removeComments的值为true或false，用于指定是否将编译后的文件中的注释删掉，设为true的话即删掉注释，默认为false */</span>    <span class="token string">"noEmit"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">/* 不生成编译文件，这个一般比较少用 */</span>    <span class="token string">"importHelpers"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">/* importHelpers的值为true或false，指定是否引入tslib里的辅助工具函数，默认为false */</span>    <span class="token string">"downlevelIteration"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/* 当target为'ES5' or 'ES3'时，为'for-of', spread, and destructuring'中的迭代器提供完全支持 */</span>    <span class="token string">"isolatedModules"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">/* isolatedModules的值为true或false，指定是否将每个文件作为单独的模块，默认为true，它不可以和declaration同时设定 */</span>    <span class="token comment" spellcheck="true">/* Strict Type-Checking Options */</span>    <span class="token string">"strict"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* strict的值为true或false，用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false */</span><span class="token punctuation">,</span>    <span class="token string">"noImplicitAny"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">/* noImplicitAny的值为true或false，如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any，如果noImplicitAny的值为true的话。则没有明确的类型会报错。默认值为false */</span>    <span class="token string">"strictNullChecks"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">/* strictNullChecks为true时，null和undefined值不能赋给非这两种类型的值，别的类型也不能赋给他们，除了any类型。还有个例外就是undefined可以赋值给void类型 */</span>    <span class="token string">"strictFunctionTypes"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">/* strictFunctionTypes的值为true或false，用于指定是否使用函数参数双向协变检查 */</span>    <span class="token string">"strictBindCallApply"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">/* 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */</span>    <span class="token string">"strictPropertyInitialization"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false */</span>   <span class="token string">"noImplicitThis"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">/* 当this表达式的值为any类型的时候，生成一个错误 */</span>    <span class="token string">"alwaysStrict"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">/* alwaysStrict的值为true或false，指定始终以严格模式检查每个模块，并且在编译之后的js文件中加入"use strict"字符串，用来告诉浏览器该js为严格模式 */</span>    <span class="token comment" spellcheck="true">/* Additional Checks */</span>    <span class="token string">"noUnusedLocals"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">/* 用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用eslint可以在你书写代码的时候做提示，你可以配合使用。它的默认值为false */</span>    <span class="token string">"noUnusedParameters"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/* 用于检查是否有在函数体中没有使用的参数，这个也可以配合eslint来做检查，默认为false */</span>    <span class="token string">"noImplicitReturns"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">/* 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false */</span>    <span class="token string">"noFallthroughCasesInSwitch"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 用于检查switch中是否有case没有使用break跳出switch，默认为false */</span>    <span class="token comment" spellcheck="true">/* Module Resolution Options */</span>    <span class="token string">"moduleResolution"</span><span class="token punctuation">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/* 用于选择模块解析策略，有'node'和'classic'两种类型' */</span>    <span class="token string">"baseUrl"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">/* baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响 */</span>    <span class="token string">"paths"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                           <span class="token comment" spellcheck="true">/* 用于设置模块名称到基于baseUrl的路径映射 */</span>    <span class="token string">"rootDirs"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">/* rootDirs可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径的内容都放到一个文件夹中 */</span>    <span class="token string">"typeRoots"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">/* typeRoots用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载 */</span>    <span class="token string">"types"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           <span class="token comment" spellcheck="true">/* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来 */</span>    <span class="token string">"allowSyntheticDefaultImports"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* 用来指定允许从没有默认导出的模块中默认导入 */</span>    <span class="token string">"esModuleInterop"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 */</span><span class="token punctuation">,</span>    <span class="token string">"preserveSymlinks"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">/* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识 */</span>    <span class="token comment" spellcheck="true">/* Source Map Options */</span>    <span class="token string">"sourceRoot"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">/* sourceRoot用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里 */</span>    <span class="token string">"mapRoot"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                         <span class="token comment" spellcheck="true">/* mapRoot用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性 */</span>    <span class="token string">"inlineSourceMap"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">/* 指定是否将map文件的内容和js文件编译在同一个js文件中，如果设为true，则map的内容会以//# sourceMappingURL=然后拼接base64字符串的形式插入在js文件底部 */</span>    <span class="token string">"inlineSources"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">/* 用于指定是否进一步将.ts文件的内容也包含到输入文件中 */</span>    <span class="token comment" spellcheck="true">/* Experimental Options */</span>    <span class="token string">"experimentalDecorators"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* 用于指定是否启用实验性的装饰器特性 */</span>    <span class="token string">"emitDecoratorMetadata"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">/* 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库 */</span>  <span class="token punctuation">}</span>  <span class="token string">"files"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件，如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用* ? **/ 等通配符</span>  <span class="token string">"include"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件</span>  <span class="token string">"exclude"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclude表示要排除的、不编译的文件，它也可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件</span>  <span class="token string">"compileOnSave"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// compileOnSave的值是true或false，如果设为true，在我们编辑了项目中的文件保存的时候，编辑器会根据tsconfig.json中的配置重新生成文件，不过这个要编辑器支持</span>  <span class="token string">"references"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 一个对象数组，指定要引用的项目</span><span class="token punctuation">}</span></code></pre><h2 id="2-6-路由和页面跳转"><a href="#2-6-路由和页面跳转" class="headerlink" title="2.6 路由和页面跳转"></a>2.6 路由和页面跳转</h2><h3 id="2-6-1-新建路由"><a href="#2-6-1-新建路由" class="headerlink" title="2.6.1 新建路由"></a>2.6.1 新建路由</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.敲入命令如下</span>$   umi g page product<span class="token operator">/</span>index <span class="token operator">--</span>typescript <span class="token operator">--</span>less   create src<span class="token operator">/</span>pages<span class="token operator">/</span>product<span class="token operator">/</span>index<span class="token punctuation">.</span>js   create src<span class="token operator">/</span>pages<span class="token operator">/</span>product<span class="token operator">/</span>index<span class="token punctuation">.</span>less✔  success<span class="token comment" spellcheck="true">//2.修改 .umirc.ts文件中路由配置</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//注意：路径如果是相对路径，会从 src/pages 开始找起。如果指向 src 目录的文件，可以用 @，也可以用 ../。比如 component: '@/layouts/basic'</span>      <span class="token comment" spellcheck="true">//注意：这里不会生成exact:true的配置</span>      component<span class="token punctuation">:</span> <span class="token string">'../layouts/index'</span><span class="token punctuation">,</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/product/index'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> <span class="token string">'../pages/product/index'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>           path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>           component<span class="token punctuation">:</span> <span class="token string">'../pages/index'</span>         <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//3.在src目录下创建typings.d.ts 文件 </span><span class="token comment" spellcheck="true">//模块声明文件：不写在引入less的时候ts会警告</span>declare module <span class="token string">'slash2'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.css'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.less'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.scss'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.sass'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.svg'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.png'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.jpg'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.jpeg'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.gif'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.bmp'</span><span class="token punctuation">;</span>declare module <span class="token string">'*.tiff'</span><span class="token punctuation">;</span>declare module <span class="token string">'omit.js'</span><span class="token punctuation">;</span></code></pre><h3 id="2-6-2-约定式路由"><a href="#2-6-2-约定式路由" class="headerlink" title="2.6.2 约定式路由"></a>2.6.2 约定式路由</h3><p>除配置式路由外，Umi 也支持约定式路由。约定式路由也叫文件路由，就是不需要手写配置，文件系统即路由，通过目录和文件及其命名分析出路由配置。</p><p><strong>如果没有 routes 配置，Umi 会进入约定式路由模式</strong>，然后分析 <code>src/pages</code> 目录拿到路由配置。</p><p>比如以下文件结构：</p><pre><code>.  └── pages    ├── index.tsx    └── users.tsx</code></pre><p>会得到以下路由配置，</p><pre><code>[  { exact: true, path: '/', component: '@/pages/index' },  { exact: true, path: '/users', component: '@/pages/users' },]</code></pre><p>需要注意的是，满足以下任意规则的文件不会被注册为路由，</p><ul><li>以 <code>.</code> 或 <code>_</code> 开头的文件或目录</li><li>以 <code>d.ts</code> 结尾的类型定义文件</li><li>以 <code>test.ts</code>、<code>spec.ts</code>、<code>e2e.ts</code> 结尾的测试文件（适用于 <code>.js</code>、<code>.jsx</code> 和 <code>.tsx</code> 文件）</li><li><code>components</code> 和 <code>component</code> 目录</li><li><code>utils</code> 和 <code>util</code> 目录</li><li>不是 <code>.js</code>、<code>.jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件</li><li>文件内容不包含 JSX 元素</li></ul><p><strong>所以当我们把.umirc.js中的routes配置注释掉的时候，访问路径<a href="http://localhost:8000/#/product">http://localhost:8000/#/product</a>能够正常展示页面。</strong></p><h3 id="2-6-3-路由配置"><a href="#2-6-3-路由配置" class="headerlink" title="2.6.3 路由配置"></a>2.6.3 路由配置</h3><pre class=" language-javascript"><code class="language-javascript">component<span class="token punctuation">:</span> <span class="token string">'@/layouts/index'</span>         <span class="token comment" spellcheck="true">//配置页面模板，不同的路由可以配置不同的layout</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/one'</span><span class="token punctuation">,</span> exact<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//严格匹配，location 是否和 path 完全对应上</span><span class="token comment" spellcheck="true">//配置子路由</span>routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/list'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/admin'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> <span class="token string">'admin'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//重定向</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**   * 路由配置注意点：   * 1.{path:"",component:"",routes:[{path:"",component:""}]}   *   第一层的配置一般用来配置页面布局文件，我们不需要给它加exact:true，否则会导致routes里面的规则不能够被加载   *   routes里面的规则用来配置具体路由,我们也不需要给它加exact:true，因为会默认生成   * 2.一般我们不会这样写 {path:"/product",component:"@/pages/index"}，还是会在每一个页面的上层套一个布局文件。   *   如果我们这样写，那么会和第一种写法冲突，因为我们在访问localhost:8000/product的时候也会匹配localhost:8000/，从而导致/product路径不能匹配   * 3.使用路径的时候，如果是相对路径，则参照pages目录来的。如果想要引用layout文件的中的组件，可以使用@符号，@ 符号表示src目录   *   * */</span></code></pre><h3 id="2-6-4-路由跳转和传参"><a href="#2-6-4-路由跳转和传参" class="headerlink" title="2.6.4 路由跳转和传参"></a>2.6.4 路由跳转和传参</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/users"</span><span class="token operator">></span>Users Page<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 跳转到指定路由</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 带参数跳转到指定路由</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/list?a=b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  pathname<span class="token punctuation">:</span> <span class="token string">'/list'</span><span class="token punctuation">,</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 跳转到上一个路由</span>history<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//路由组件可通过 props 获取到以下属性，</span>match，当前路由和 url match 后的对象，包含 params、path、url 和 isExact 属性location，表示应用当前出于哪个位置，包含 pathname、search、query 等属性history，同 api history 接口route，当前路由配置，包含 path、exact、component、routes 等routes，全部路由信息</code></pre><h3 id="2-6-5-动态路由参数"><a href="#2-6-5-动态路由参数" class="headerlink" title="2.6.5 动态路由参数"></a>2.6.5 动态路由参数</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//1.新建productDetail/index/[id].tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./productDetail.less'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要从props中获取location history match等参数，需要引入RouteComponentProps类型</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouteComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">RouterInfo</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> RouteComponentProps<span class="token operator">&lt;</span>RouterInfo<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">></span>Page productDetail<span class="token operator">/</span>index <span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.修改.umirc.ts</span>routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//注意：这边文件的路径是相对于src/.mui中来确定的</span>      component<span class="token punctuation">:</span> <span class="token string">'../layouts/index'</span><span class="token punctuation">,</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/product/index'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> <span class="token string">'../pages/product/index'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>           path<span class="token punctuation">:</span> <span class="token string">'/productDetail/:id'</span><span class="token punctuation">,</span>           component<span class="token punctuation">:</span> <span class="token string">'../pages/productDetail/index/[id]'</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>           path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>           component<span class="token punctuation">:</span> <span class="token string">'../pages/index'</span>         <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span></code></pre><h2 id="2-7-样式和资源文件"><a href="#2-7-样式和资源文件" class="headerlink" title="2.7 样式和资源文件"></a>2.7 样式和资源文件</h2><h3 id="2-7-1-全局样式"><a href="#2-7-1-全局样式" class="headerlink" title="2.7.1 全局样式"></a>2.7.1 全局样式</h3><p>Umi 中约定 <code>src/global.css</code> 为全局样式，如果存在此文件，会被自动引入到入口文件最前面。</p><p>比如用于覆盖样式，</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.ant-select-selection</span> </span><span class="token punctuation">{</span>  <span class="token property">max-height</span><span class="token punctuation">:</span> <span class="token number">51</span>px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-2-CSS-Modules"><a href="#2-7-2-CSS-Modules" class="headerlink" title="2.7.2 CSS Modules"></a>2.7.2 CSS Modules</h3><p>Umi 会自动识别 CSS Modules 的使用，你把他当做 CSS Modules 用时才是 CSS Modules。</p><p>比如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// CSS Modules</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./foo.css'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 非 CSS Modules</span><span class="token keyword">import</span> <span class="token string">'./foo.css'</span><span class="token punctuation">;</span></code></pre><h3 id="2-7-3-CSS-预处理器"><a href="#2-7-3-CSS-预处理器" class="headerlink" title="2.7.3 CSS 预处理器"></a>2.7.3 CSS 预处理器</h3><p>Umi 内置支持 less，不支持 sass 和 stylus，但如果有需求，可以通过 chainWebpack 配置或者 Umi 插件的形式支持。</p><h3 id="2-7-4-ts中使用图片"><a href="#2-7-4-ts中使用图片" class="headerlink" title="2.7.4 ts中使用图片"></a>2.7.4 ts中使用图片</h3><p>通过 require 引用相对路径的图片。</p><p>比如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo.png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>支持别名，比如通过 <code>@</code> 指向 src 目录：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@/foo.png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="2-7-5-CSS-里使用图片"><a href="#2-7-5-CSS-里使用图片" class="headerlink" title="2.7.5 CSS 里使用图片"></a>2.7.5 CSS 里使用图片</h3><p>通过相对路径引用。</p><p>比如，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>logo <span class="token punctuation">{</span>  background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>foo<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>CSS 里也支持别名，但需要在前面加 <code>~</code> 前缀，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>logo <span class="token punctuation">{</span>  background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token operator">~</span>@<span class="token operator">/</span>foo<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意：</p><ol><li>这是 webpack 的规则，如果切到其他打包工具，可能会有变化</li><li>less 中同样适用</li></ol><h3 id="2-7-6-Base64-编译"><a href="#2-7-6-Base64-编译" class="headerlink" title="2.7.6 Base64 编译"></a>2.7.6 Base64 编译</h3><p>通过相对路径引入图片的时候，如果图片小于 10K，会被编译为 Base64，否则会被构建为独立的图片文件。</p><p>10K 这个阈值可以通过 <a href="https://umijs.org/zh-CN/config#inlinelimit">inlineLimit 配置</a>修改。</p><h2 id="2-8-国际化"><a href="#2-8-国际化" class="headerlink" title="2.8 国际化"></a>2.8 国际化</h2><p>@umijs/plugin-locale是umi中的一个国际化插件，用于解决 i18n 问题。</p><h3 id="2-8-1-开启国际化"><a href="#2-8-1-开启国际化" class="headerlink" title="2.8.1 开启国际化"></a>2.8.1 开启国际化</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在.umirc.ts中配置locale之后即开启该插件</span>  locale<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认的语言环境</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//antd开启国际化</span>    antd<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// default true, when it is true, will use `navigator.language` overwrite default</span>    baseNavigator<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="2-8-2-约定式多语言支持"><a href="#2-8-2-约定式多语言支持" class="headerlink" title="2.8.2 约定式多语言支持"></a>2.8.2 约定式多语言支持</h3><p>比如以下目录，项目就拥有了 <code>zh-CN</code> 与 <code>en-US</code> 国际化语言切换(文件名必须要符合规范)：</p><pre><code>+ src  + locales    - zh-CN.ts    - en-US.ts  + pages</code></pre><h3 id="2-8-3-主要API"><a href="#2-8-3-主要API" class="headerlink" title="2.8.3 主要API"></a>2.8.3 主要API</h3><pre class=" language-typescript"><code class="language-typescript"># getAllLocales 获取当前获得所有国际化文件的列表，默认会在 locales 文件夹下寻找类似 en<span class="token operator">-</span>US<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token operator">|</span>json<span class="token operator">|</span>ts<span class="token punctuation">)</span> 文件。<span class="token keyword">import</span> <span class="token punctuation">{</span> getAllLocales <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAllLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [en-US,zh-CN,...]</span># getLocale 将获得当前选择的语言。<span class="token keyword">import</span> <span class="token punctuation">{</span> getLocale <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// en-US | zh-CN</span># useIntl 是最常用的 api<span class="token punctuation">,</span>它可以获得 formatMessage 等 api 来进行具体的值绑定。<span class="token keyword">import</span> <span class="token punctuation">{</span> useIntl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>a<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token function">useIntl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'index.start'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span># setLocale 设置切换语言，默认会刷新页面，可以通过设置第二个参数为 <span class="token keyword">false</span> ，来实现无刷新动态切换。<span class="token keyword">import</span> <span class="token punctuation">{</span> setLocale <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 刷新页面</span><span class="token function">setLocale</span><span class="token punctuation">(</span><span class="token string">'zh-TW'</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不刷新页面</span><span class="token function">setLocale</span><span class="token punctuation">(</span><span class="token string">'zh-TW'</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="3-flux和redux"><a href="#3-flux和redux" class="headerlink" title="3.flux和redux"></a>3.flux和redux</h1><h2 id="3-1-Flux"><a href="#3-1-Flux" class="headerlink" title="3.1 Flux"></a>3.1 Flux</h2><p>Flux 是一种架构思想，专门解决软件的结构问题。它跟<a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html">MVC 架构</a>是同一类东西，但是更加<a href="http://www.infoq.com/news/2014/05/facebook-mvc-flux">简单和清晰</a>。</p><p>首先，Flux将一个应用分成四个部分。</p><blockquote><ul><li><strong>View</strong>： 视图层</li><li><strong>Action</strong>（动作）：表示数据从应用程序发送到store的有效信息负载。它是 store 数据的<strong>唯一</strong>来源。一般来说你会通过 Dispatcher派发器将 action 传到 store。</li><li><strong>Dispatcher</strong>（派发器）：用来接收Actions、执行回调函数</li><li><strong>Store</strong>（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li></ul></blockquote><p><strong>Flux 的最大特点，就是数据的”单向流动”。</strong></p><blockquote><ol><li>用户访问 View</li><li>用户在View中Dispatcher一个Action，要求 Store 进行相应的更新</li><li>Store 更新后，发出一个”change”事件</li><li>View 收到”change”事件后，更新页面</li></ol></blockquote><p><img src="https://i.loli.net/2020/11/03/9EjkK1pgADicL3e.png" alt="1553222968163"></p><p><img src="https://i.loli.net/2020/11/03/mC1Oh5XYtkM3uLi.png" alt="1553223019430"></p><h2 id="3-2-Redux"><a href="#3-2-Redux" class="headerlink" title="3.2 Redux"></a>3.2 Redux</h2><p><a href="http://cn.redux.js.org/">http://cn.redux.js.org/</a></p><p>我们把Flux看做一个框架的理念的话，Redux是Flux的一种实现。Redux是SPA单页面应用程序中多个组件之间共享数据的一种方式。</p><p>Flux的基本原则是“单向数据流”，Redux在此基础上强调三个基本原则：</p><blockquote><p>1.唯一数据源 ：唯一数据源指的是应用的状态数据应该只存储在唯一的一个Store上。<br>2.保持状态只读 ： 保持状态只读，就是说不能去直接修改状态，要修改Store的状态，必须要通过派发一个action对象完成。<br>3.数据改变只能通过纯函数完成 ：这里所说的纯函数就是把Reducer，Reducer描述了state状态如何修改。Redux这个名字的前三个字母Red代表的就是Reducer，其实Redux名字的含义就是Reducer+Flux。</p></blockquote><p><img src="https://i.loli.net/2020/11/03/tbZQaYjVL4PmpC3.png"></p><h2 id="3-3-dva"><a href="#3-3-dva" class="headerlink" title="3.3 dva"></a>3.3 dva</h2><h3 id="3-3-1-dva介绍"><a href="#3-3-1-dva介绍" class="headerlink" title="3.3.1 dva介绍"></a>3.3.1 dva介绍</h3><p>dva由阿里架构师 sorrycc 带领 team 完成的一套前端框架，dva 是一个基于 <a href="https://github.com/reduxjs/redux">redux</a> 和 <a href="https://github.com/redux-saga/redux-saga">redux-saga</a> (异步处理)的数据流方案，然后为了简化开发体验，dva 还额外内置了 <a href="https://github.com/ReactTraining/react-router">react-router</a> 和 <a href="https://github.com/github/fetch">fetch</a>，所以也可以理解为一个轻量级的应用框架。</p><blockquote><p><strong>特性</strong></p></blockquote><ul><li><strong>易学易用</strong>，仅有 6 个 api，对 redux 用户尤其友好，<a href="https://umijs.org/guide/with-dva.html">配合 umi 使用</a>后更是降低为 0 API</li><li><strong>elm 概念</strong>，通过 reducers, effects 和 subscriptions 组织 model。elm是专注web前端的纯函数式语言。</li><li><strong>插件机制</strong>，比如 <a href="https://github.com/dvajs/dva/tree/master/packages/dva-loading">dva-loading</a> 可以自动处理 loading 状态，不用一遍遍地写 showLoading 和 hideLoading</li><li><strong>支持 HMR</strong>，基于 <a href="https://github.com/dvajs/babel-plugin-dva-hmr">babel-plugin-dva-hmr</a> 实现 components、routes 和 models 的 HMR</li></ul><h3 id="3-3-2-dva的数据流"><a href="#3-3-2-dva的数据流" class="headerlink" title="3.3.2 dva的数据流"></a>3.3.2 dva的数据流</h3><p><img src="https://i.loli.net/2020/11/03/Y7vxJKX52LFrBSV.png" alt="1601034916207"></p><p>用户在 <strong>视图层</strong> 会触发(dispatch)一些动作(action)，这些动作会传递到我们的Model.js 这个文件当中，根据action的名字，找到对用的方法(effect 或者 reducer) ，然后更新state，视图重新渲染。</p><h3 id="3-3-3-dva核心概念"><a href="#3-3-3-dva核心概念" class="headerlink" title="3.3.3 dva核心概念"></a>3.3.3 dva核心概念</h3><h4 id="a-model"><a href="#a-model" class="headerlink" title="a) model"></a>a) model</h4><p>其中，model 是 DVA 中最重要的概念，基本的属性如下：</p><ul><li>namespace：model 的命名空间，只能用字符串。一个大型应用可能包含多个 model，通过namespace区分。</li><li>state：当前 model 状态的初始值，表示当前状态。</li><li>reducers：用于处理同步操作，可以修改 state，由 action 触发。</li><li>effects：用于处理异步操作（例如：与服务端交互）和业务逻辑，也是由 action 触发。但是，它不可以修改 state，要通过触发 action 调用 reducer 实现对 state 的间接操作。</li></ul><h4 id="b-connect"><a href="#b-connect" class="headerlink" title="b) connect"></a>b) connect</h4><p>连接dva model和react组件，目的是为了让组件获取model中的数据和驱动model改变的方法。</p><h4 id="c-dispatch"><a href="#c-dispatch" class="headerlink" title="c) dispatch"></a>c) dispatch</h4><p>dispatch 函数就是和 dva model 打交道的唯一途径， dispatch 函数接受一个 action对象 作为入参。action对象需要有type字段</p><h4 id="d-action"><a href="#d-action" class="headerlink" title="d) action"></a>d) action</h4><p>action：一个对象，是 reducers 及 effects 的触发器，通过dispatch来触发，action对象需要有type字段</p><h2 id="3-4-dva实战"><a href="#3-4-dva实战" class="headerlink" title="3.4 dva实战"></a>3.4 dva实战</h2><h3 id="3-4-1-改造项目结构"><a href="#3-4-1-改造项目结构" class="headerlink" title="3.4.1 改造项目结构"></a>3.4.1 改造项目结构</h3><p><img src="https://i.loli.net/2020/11/03/lXVsRnyqxHe4iIa.png" alt="1601195437274"></p><h3 id="3-4-2-mock"><a href="#3-4-2-mock" class="headerlink" title="3.4.2 mock"></a>3.4.2 mock</h3><h4 id="a-mock介绍"><a href="#a-mock介绍" class="headerlink" title="a) mock介绍"></a>a) mock介绍</h4><p>Mock 是高效、易用、功能强大的 api 管理平台,旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API。主要用于项目的开发测试阶段。</p><p><a href="https://github.com/nuysoft/Mock/wiki">https://github.com/nuysoft/Mock/wiki</a></p><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span><span class="token punctuation">.</span> 安装mockjsyarn add mockjs <span class="token operator">--</span>dev#<span class="token number">2</span><span class="token punctuation">.</span> 修改<span class="token punctuation">.</span>umirc<span class="token punctuation">.</span>ts  开启mock  mock<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>#<span class="token number">3</span><span class="token punctuation">.</span> mock基本使用  <span class="token comment" spellcheck="true">// 在项目mock文件夹下新建user.ts  代码如下</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//测试mock   mock语法介绍 todos.....</span>  <span class="token string">'/api/test'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'kenny'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'GET /api/hi'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      username<span class="token punctuation">:</span> <span class="token string">'jaja'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'GET /api/mock'</span><span class="token punctuation">:</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//随机生成一段中文</span>    message<span class="token punctuation">:</span> <span class="token string">'@cparagraph'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 属性 list 的值是一个数组，其中含有 1 到 5 个元素</span>    <span class="token string">'list|1-5'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 属性 sid 是一个自增数，起始值为 1，每次增 1</span>        <span class="token string">'sid|+1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 属性 userId 是一个5位的随机码</span>        <span class="token string">'userId|5'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="b-mock-user-js使用mock提供接口数据"><a href="#b-mock-user-js使用mock提供接口数据" class="headerlink" title="b) mock/user.js使用mock提供接口数据"></a>b) mock/user.js使用mock提供接口数据</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">UserType</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  email<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  website<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> users<span class="token punctuation">:</span> UserType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">'zhangsan@qq.com'</span><span class="token punctuation">,</span> website<span class="token punctuation">:</span> <span class="token string">'xx.com'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">'lisi@qq.com'</span><span class="token punctuation">,</span> website<span class="token punctuation">:</span> <span class="token string">'ll.com'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//查询所有用户</span>  <span class="token string">'GET /api/users'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取参数信息</span>    <span class="token keyword">var</span> page <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page<span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> list<span class="token punctuation">:</span> users<span class="token punctuation">,</span> total<span class="token punctuation">:</span> <span class="token number">105</span><span class="token punctuation">,</span> page<span class="token punctuation">:</span> page <span class="token punctuation">}</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// GET POST 可省略</span>  <span class="token string">'/api/users/:id'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> u <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//根据id删除用户</span>  <span class="token string">'/api/users/delete/:id'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">'删除成功'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 支持自定义函数，API 参考 express@4</span>  <span class="token string">'POST /api/users/create'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-4-3-请求的封装"><a href="#3-4-3-请求的封装" class="headerlink" title="3.4.3 请求的封装"></a>3.4.3 请求的封装</h3><h4 id="a-fetch和umi-request"><a href="#a-fetch和umi-request" class="headerlink" title="a) fetch和umi-request"></a>a) fetch和umi-request</h4><p><strong>fetch</strong>是es6中推出的一种可替代ajax获取/提交数据的技术，有些高级浏览器已经可以使用window.fecth使用了。相比于使用jQuery.ajax更轻量，而且它支持Promise，更加符合现在的编程习惯。但是，一定记住fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。</p><p><strong><a href="https://link.zhihu.com/?target=https://github.com/umijs/umi-request">umi-request</a></strong> 是基于 fetch 封装的开源 http 请求库，旨在为开发者提供一个统一的 API 调用方式，同时简化使用方式，提供了请求层常用的功能：</p><ul><li>URL 参数自动序列化</li><li>POST 数据提交方式简化</li><li>Response 返回处理简化</li><li>请求超时处理</li><li>请求缓存支持</li><li>GBK 编码处理</li><li>统一的错误处理方式</li><li>请求取消支持</li><li>Node 环境 http 请求</li><li>拦截器机制</li><li>洋葱中间件机制</li></ul><p><strong>umi-request和fetch和axios区别</strong></p><p><img src="https://i.loli.net/2020/11/03/8LAOuYdHnJVBwzb.png"></p><h4 id="b-app-ts运行时配置"><a href="#b-app-ts运行时配置" class="headerlink" title="b) app.ts运行时配置"></a>b) app.ts运行时配置</h4><p>运行时配置文件，可以在这里扩展运行时的能力，比如修改路由、修改 render 方法等。</p><p>Umi约定 <code>src/app.tsx</code> 为运行时配置。比如我们可以再在 <code>src/app.ts</code> 中配置一些运行时的配置项来实现部分自定义需求。示例配置如下：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//通知组件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> notification <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//RequestConfig 请求的配置类型</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RequestConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ResponseError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi-request'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 请求出错后的异常处理程序 */</span><span class="token keyword">const</span> errorHandler <span class="token operator">=</span> <span class="token punctuation">(</span>error<span class="token punctuation">:</span> ResponseError<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  notification<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    description<span class="token punctuation">:</span> <span class="token string">'您的网络发生异常，无法连接服务器'</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> <span class="token string">'网络异常'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导出请求对象</span><span class="token keyword">export</span> <span class="token keyword">const</span> request<span class="token punctuation">:</span> RequestConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  errorHandler<span class="token punctuation">,</span>  requestInterceptors<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        url<span class="token punctuation">,</span>        options<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  responseInterceptors<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span>response<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="c-封装service"><a href="#c-封装service" class="headerlink" title="c) 封装service"></a>c) 封装service</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//pages/user/services/index.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/api/users?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-4-新建页面-发送请求"><a href="#3-4-4-新建页面-发送请求" class="headerlink" title="3.4.4 新建页面 发送请求"></a>3.4.4 新建页面 发送请求</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.创建页面</span>umi g page user<span class="token operator">/</span>index <span class="token operator">--</span>typescript <span class="token operator">--</span>less<span class="token comment" spellcheck="true">//2.配置路由  .umirc.ts</span>routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//注意：这边文件的路径是相对于src/.mui中来确定的</span>        component<span class="token punctuation">:</span> <span class="token string">'../layouts/index'</span><span class="token punctuation">,</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                 path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>                 component<span class="token punctuation">:</span> <span class="token string">'../pages/index'</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                 path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>                 component<span class="token punctuation">:</span> <span class="token string">'../pages/user/index'</span>             <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//3.pages/user/index.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.less'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> queryUserList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./services'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//componentDidMount</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送请求获取数据</span>  <span class="token keyword">const</span> getUsers <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">{</span> page<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">></span>Page user<span class="token operator">/</span>index<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-4-5-编写dva-model"><a href="#3-4-5-编写dva-model" class="headerlink" title="3.4.5 编写dva model"></a>3.4.5 编写dva model</h3><p>dva 通过 <code>model</code> 的概念把一个领域的模型管理起来，包含同步更新 state 的 reducers，处理异步逻辑的 effects，订阅数据源的 subscriptions 。</p><p>好处在于可以统一管理模型数据和把模型数据共享到组件中。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// user/models/index.ts</span><span class="token comment" spellcheck="true">//Effect 异步操作     Reducer  纯函数      Subscription 订阅更新</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Effect<span class="token punctuation">,</span> Reducer<span class="token punctuation">,</span> Subscription<span class="token punctuation">,</span> Action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询用户的接口</span><span class="token keyword">import</span> <span class="token punctuation">{</span> queryUserList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../services'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserItem</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  email<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  website<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明用户模块state的数据类型  ?表示可有可无</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserModelState</span> <span class="token punctuation">{</span>  list<span class="token operator">?</span><span class="token punctuation">:</span> UserItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  total<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>  page<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明用户model的数据类型</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserModelType</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//名称空间</span>  namespace<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//state数据</span>  state<span class="token punctuation">:</span> UserModelState<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//异步方法</span>  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fetchUserList<span class="token punctuation">:</span> Effect<span class="token punctuation">;</span>    removeUserById<span class="token operator">?</span><span class="token punctuation">:</span> Effect<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//纯函数</span>  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    save<span class="token punctuation">:</span> Reducer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserModelState</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>    removeById<span class="token operator">?</span><span class="token punctuation">:</span> Reducer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserModelState</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//订阅更新</span>  subscriptions<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> setup<span class="token punctuation">:</span> Subscription <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明UserModel</span><span class="token keyword">const</span> UserModel<span class="token punctuation">:</span> UserModelType <span class="token operator">=</span> <span class="token punctuation">{</span>  namespace<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//所有用户信息的数组</span>    total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//总用户个数</span>    page<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前页码</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//纯函数  操作state</span>  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">save</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> list<span class="token punctuation">,</span> total<span class="token punctuation">,</span> page <span class="token punctuation">}</span> <span class="token operator">=</span> payload<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 复制数组，将list, total, page内容放到到state</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> list<span class="token punctuation">,</span> total<span class="token punctuation">,</span> page <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//用于处理异步操作和业务逻辑，不直接修改 state，简单的来说，就是获取从服务端获取数据，并且发起一个 action 交给 reducer。其中它用到了redux-saga，里面有几个常用的函数</span>  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// * 表示生成器函数，该函数会返回一个迭代器</span>    <span class="token comment" spellcheck="true">// 参数 payload 表示有效负载的数据，在外部通过dispatch传递</span>    <span class="token comment" spellcheck="true">// put:  用于触发action  yield put({ type: 'todos/add', payload: 'Learn Dva'});</span>    <span class="token comment" spellcheck="true">// call:用于调用异步逻辑，支持Promise，第一个参数是你要调用的函数，第二个参数开始是你要传递的参。const result = yield call(fetch, '/todos');</span>    <span class="token comment" spellcheck="true">// select:用于从state里获取数据。const todos = yield select(state => state.todos);</span>    <span class="token operator">*</span><span class="token function">fetchUserList</span><span class="token punctuation">(</span><span class="token punctuation">{</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> page <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> list<span class="token punctuation">,</span> total <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>queryUserList<span class="token punctuation">,</span> <span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'save'</span><span class="token punctuation">,</span>        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>          list<span class="token punctuation">:</span> list<span class="token punctuation">,</span>          total<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          page<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> UserModel<span class="token punctuation">;</span></code></pre><h3 id="3-4-6-编写页面"><a href="#3-4-6-编写页面" class="headerlink" title="3.4.6 编写页面"></a>3.4.6 编写页面</h3><p>到这里，我们已经单独完成了 model 和 页面，那么他们如何串联起来呢?</p><p>dva 提供了 <code>connect</code> 方法。如果你熟悉 redux，这个 connect 来自 react-redux。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//pages/user/index.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ConnectProps connect高阶函数的属性类型</span><span class="token comment" spellcheck="true">//Loading 数据加载状态类型</span><span class="token comment" spellcheck="true">//connect 高阶函数，主要作用将model和当前组件连接起来</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ConnectProps<span class="token punctuation">,</span> Loading<span class="token punctuation">,</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//users这个namespace的数据类型</span><span class="token keyword">import</span> <span class="token punctuation">{</span> UserModelState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./models'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明当前页面的属性类型</span><span class="token keyword">interface</span> <span class="token class-name">PageProps</span> <span class="token keyword">extends</span> <span class="token class-name">ConnectProps</span> <span class="token punctuation">{</span>  user<span class="token punctuation">:</span> UserModelState<span class="token punctuation">;</span>  loading<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当前组件对象</span><span class="token comment" spellcheck="true">//参数users表示模型层数据</span><span class="token comment" spellcheck="true">//参数dispatch表示redux派发器</span><span class="token comment" spellcheck="true">//参数loading表示数据加载状态</span><span class="token keyword">const</span> UserPage<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>PageProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> dispatch<span class="token punctuation">,</span> loading <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> list<span class="token punctuation">,</span>total <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//dispatch一个action来触发对应的reducer</span>    dispatch <span class="token operator">&amp;&amp;</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'user/fetchUserList'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//payload 有效负载 ，dispatch传递参数的时候</span>        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>          page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Hello <span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//connect 作用：将model和当前组件连接起来</span><span class="token comment" spellcheck="true">//参数 users 表示users这个namespace中的数据</span><span class="token comment" spellcheck="true">//参数 loading 表示users namespace中的数据是否加载完毕</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> loading <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> user<span class="token punctuation">:</span> UserModelState<span class="token punctuation">;</span> loading<span class="token punctuation">:</span> Loading <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  user<span class="token punctuation">,</span>  loading<span class="token punctuation">:</span> loading<span class="token punctuation">.</span>models<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//表示users这个namespace的数据是否已经加载完毕</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UserPage<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-4-7-使用订阅更新设置dva数据"><a href="#3-4-7-使用订阅更新设置dva数据" class="headerlink" title="3.4.7 使用订阅更新设置dva数据"></a>3.4.7 使用订阅更新设置dva数据</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//pages/user/models/index.ts</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment" spellcheck="true">//订阅更新</span>subscriptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> history <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//监听url的变化，当访问路径是/user的时候触发fetchUserList这个effects</span>        <span class="token keyword">return</span> history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> pathname <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/user'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    type<span class="token punctuation">:</span> <span class="token string">'fetchUserList'</span><span class="token punctuation">,</span>                    payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注释掉pages/user/index.tsx    发送请求的代码</span></code></pre><h3 id="3-4-8-使用ant-design编写页面"><a href="#3-4-8-使用ant-design编写页面" class="headerlink" title="3.4.8 使用ant design编写页面"></a>3.4.8 使用ant design编写页面</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span>useEffect<span class="token punctuation">,</span>useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Table<span class="token punctuation">,</span> Pagination<span class="token punctuation">,</span> Popconfirm<span class="token punctuation">,</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ConnectProps<span class="token punctuation">,</span> Loading<span class="token punctuation">,</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> UserModelState<span class="token punctuation">,</span>UserItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./models'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">PageProps</span> <span class="token keyword">extends</span> <span class="token class-name">ConnectProps</span> <span class="token punctuation">{</span>  user<span class="token punctuation">:</span> UserModelState<span class="token punctuation">;</span>  loading<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> UserPage<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>PageProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> dispatch<span class="token punctuation">,</span> loading <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> list<span class="token punctuation">,</span> total<span class="token punctuation">,</span> page <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">onChangeUserPagination</span><span class="token punctuation">(</span>page<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dispatch <span class="token operator">&amp;&amp;</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'user/fetchUserList'</span><span class="token punctuation">,</span>        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>          page<span class="token punctuation">:</span> page<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//dispatch一个action来触发对应的reducer</span>    dispatch <span class="token operator">&amp;&amp;</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'user/fetchUserList'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//payload 有效负载 ，dispatch传递参数的时候</span>        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>          page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setPopShow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>      key<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'电子邮件'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'email'</span><span class="token punctuation">,</span>      key<span class="token punctuation">:</span> <span class="token string">'email'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'个人网站'</span><span class="token punctuation">,</span>      dataIndex<span class="token punctuation">:</span> <span class="token string">'website'</span><span class="token punctuation">,</span>      key<span class="token punctuation">:</span> <span class="token string">'website'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'操作'</span><span class="token punctuation">,</span>      key<span class="token punctuation">:</span> <span class="token string">'operation'</span><span class="token punctuation">,</span>      render<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">:</span> UserItem<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span>Button<span class="token operator">></span>编辑<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>          <span class="token operator">&lt;</span>Popconfirm visible<span class="token operator">=</span><span class="token punctuation">{</span>popShow<span class="token punctuation">}</span> title<span class="token operator">=</span><span class="token string">"Confirm to delete?"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Button<span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Popconfirm<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Table          loading<span class="token operator">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//表格的加载状态</span>          columns<span class="token operator">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//表格列信息</span>          dataSource<span class="token operator">=</span><span class="token punctuation">{</span>list<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//表格数据源</span>          rowKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>record<span class="token punctuation">:</span>UserItem<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> record<span class="token punctuation">.</span>id<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//表格每一行数据的key</span>          pagination<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//不显示表格默认的分页器</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Pagination          className<span class="token operator">=</span><span class="token string">"ant-table-pagination"</span>          total<span class="token operator">=</span><span class="token punctuation">{</span>total<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 数据总数</span>          current<span class="token operator">=</span><span class="token punctuation">{</span>page<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 当前页数</span>          onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChangeUserPagination<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//改变页码的点击事件</span>          pageSize<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//每一页的数量</span>        <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> loading <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> user<span class="token punctuation">:</span> UserModelState<span class="token punctuation">;</span> loading<span class="token punctuation">:</span> Loading <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  user<span class="token punctuation">,</span>  loading<span class="token punctuation">:</span> loading<span class="token punctuation">.</span>models<span class="token punctuation">.</span>user<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UserPage<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-4-9-完成删除功能"><a href="#3-4-9-完成删除功能" class="headerlink" title="3.4.9 完成删除功能"></a>3.4.9 完成删除功能</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//pages/user/services/index.tsx 新增请求</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deleteUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/api/users/delete/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//pages/user/models/index.tsx reducer和effect</span><span class="token keyword">import</span> <span class="token punctuation">{</span> queryUserList<span class="token punctuation">,</span> deleteUserById <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../services'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//reducer中新增下面方法</span><span class="token comment" spellcheck="true">//state的list可能是undefined，造成类型不匹配，所以这里要 state = {list:[]} 给list一个默认值</span><span class="token function">removeById</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token keyword">var</span> filterList <span class="token operator">=</span>        state <span class="token operator">&amp;&amp;</span>        state<span class="token punctuation">.</span>list <span class="token operator">&amp;&amp;</span>        state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> item<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">{</span> list<span class="token punctuation">:</span> filterList <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//action中新增下面方法</span><span class="token comment" spellcheck="true">//根据id删除指定用户  发送请求</span><span class="token operator">*</span><span class="token function">removeUserById</span><span class="token punctuation">(</span><span class="token punctuation">{</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>deleteUserById<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'removeById'</span><span class="token punctuation">,</span>        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> id<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span># 页面新增删除事件<span class="token operator">&lt;</span>Popconfirm visible<span class="token operator">=</span><span class="token punctuation">{</span>popShow<span class="token punctuation">}</span> title<span class="token operator">=</span><span class="token string">"Confirm to delete?"</span> onConfirm<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">deleteHandler</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>       <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Popconfirm<span class="token operator">></span><span class="token comment" spellcheck="true">//控制pop弹框是否显示</span><span class="token keyword">const</span> <span class="token punctuation">[</span>popShow<span class="token punctuation">,</span>setPopShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这边点击删除按钮后一定要将pop关闭，否则会报内存泄漏</span><span class="token keyword">const</span> deleteHandler <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token function">setPopShow</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>    dispatch <span class="token operator">&amp;&amp;</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'user/removeUserById'</span><span class="token punctuation">,</span>        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>            id<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setPopShow</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Umi </tag>
            
            <tag> dva </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React的基本使用</title>
      <link href="2020/02/12/react-ji-chu/"/>
      <url>2020/02/12/react-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-React简介"><a href="#1-React简介" class="headerlink" title="1. React简介"></a>1. React简介</h1><h2 id="1-1-React介绍"><a href="#1-1-React介绍" class="headerlink" title="1.1 React介绍"></a>1.1 React介绍</h2><ul><li><p>React 是一个用于构建用户界面的 JAVASCRIPT库。React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p></li><li><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架都不满意，就决定自己写一套，用来架设 Instagram（照片交友） 的网站。做出来以后，发现这套东西很好用，<strong>就在2013年5月开源了</strong>。</p></li><li><p>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。由于 React 的<strong>设计思想极其独特</strong>，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。</p></li><li><p>清楚两个概念：</p><ul><li><p>library（库）：小而巧的库，只提供了特定的API；优点就是 船小好掉头，可以很方便的从一个库切换到另外的库；但是代码几乎不会改变；比如从jQuery切换到</p></li><li><p>Framework（框架）：大而全的是框架；框架提供了一整套的解决方案；所以如果在项目中间，想切换到另外的框架，是比较困难的；</p></li></ul></li></ul><h2 id="1-2-前端三大主流框架"><a href="#1-2-前端三大主流框架" class="headerlink" title="1.2 前端三大主流框架"></a>1.2 前端三大主流框架</h2><ul><li>Angular.js：出来<strong>较早</strong>的前端框架，学习曲线比较陡，NG1学起来比较麻烦，NG2 ~ NG5开始，进行了一系列的改革，也提供了组件化开发的概念；从NG2开始，也支持使用TS（TypeScript）进行编程；</li></ul><ul><li><p>Vue.js：<strong>最火</strong>（关注的人比较多）的一门前端框架，它是中国人开发的，对我们来说，文档要友好一些；</p></li><li><p>React.js：<strong>最流行</strong>（用的人比较多）的一门框架，因为它的设计很优秀；</p></li></ul><h2 id="1-3-React与Vue的对比"><a href="#1-3-React与Vue的对比" class="headerlink" title="1.3 React与Vue的对比"></a>1.3 React与Vue的对比</h2><p><strong>1、监听数据变化的实现原理不同</strong></p><ul><li><p>Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能</p></li><li><p>React 默认是通过比较引用地址的方式进行的，如果不优化   </p><p>（PureComponent/shouldComponentUpdate）可能导致大量不必要的VDOM的重新渲染</p></li></ul><p><strong>2、数据流的不同</strong></p><p><img src="https://i.loli.net/2020/11/09/2wyqtVuSrnXYkc4.png" alt="1574133046838.png"></p><p>大家都知道Vue中默认是支持双向绑定的。在Vue1.0中我们可以实现两种双向绑定：</p><ol><li>父子组件之间，props 可以双向绑定</li><li>组件与DOM之间可以通过 v-model 双向绑定</li></ol><p>在 Vue2.x 中去掉了第一种，也就是父子组件之间不能双向绑定了（但是提供了一个语法糖自动帮你通过事件的方式修改），并且 Vue2.x 已经不鼓励组件对自己的 props 进行任何修改了。所以现在我们只有 组件 &lt;––&gt; DOM 之间的双向绑定这一种。</p><p>然而 React 从诞生之初就不支持双向绑定，React一直提倡的是单向数据流，他称之为 onChange/setState()模式。</p><p>不过由于我们一般都会用 Vuex 以及 Redux 等单向数据流的状态管理框架，因此很多时候我们感受不到这一点的区别了。</p><p><strong>3、模板渲染方式的不同</strong></p><p>在表层上， 模板的语法不同</p><ul><li>React 是通过JSX渲染模板</li><li>而Vue是通过一种拓展的HTML语法进行渲染</li></ul><p>但其实这只是表面现象，毕竟React并不必须依赖JSX。在深层上，模板的原理不同，这才是他们的本质区别：</p><ul><li>React是在组件JS代码中，通过原生JS实现模板中的常见语法，比如插值，条件，循环等，都是通过JS语法实现的</li><li>Vue是在和组件JS代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要 v-if 来实现</li></ul><p><strong>4、Vuex 和 Redux 的区别</strong></p><p>从表面上来说，store 注入和使用方式有一些区别。</p><p>在 Vuex 中，$store 被直接注入到了组件实例中，因此可以比较灵活的使用：</p><ul><li>使用 dispatch 和 commit 提交更新</li><li>通过 mapState 或者直接通过 this.$store 来读取数据</li></ul><p>在 Redux 中，我们每一个组件都需要显示的用 connect 把需要的 props 和 dispatch 连接起来。</p><p>另外 Vuex 更加灵活一些，组件中既可以 dispatch action 也可以 commit reducer，而 Redux 中只能进行 dispatch，并不能直接调用 reducer 进行修改。</p><p>从实现原理上来说，最大的区别是两点：</p><ul><li>Redux 使用的是不可变数据，而Vuex的数据是可变的。Redux每次都是用新的state替换旧的state，而Vuex是直接修改</li><li>Redux 在检测数据变化的时候，是比较对象的引用地址；而Vuex其实和Vue的原理一样，是通过 getter/setter来比较的（如果看Vuex源码会知道，其实他内部直接创建一个Vue实例用来跟踪数据变化）</li></ul><p><strong>5、总结</strong></p><p>React更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用React，小型项目用 Vue 的感觉。</p><h2 id="1-4-React中几个核心的概念"><a href="#1-4-React中几个核心的概念" class="headerlink" title="1.4 React中几个核心的概念"></a>1.4 React中几个核心的概念</h2><h3 id="1-4-1-虚拟DOM（Virtual-Document-Object-Model）"><a href="#1-4-1-虚拟DOM（Virtual-Document-Object-Model）" class="headerlink" title="1.4.1 虚拟DOM（Virtual Document Object Model）"></a>1.4.1 虚拟DOM（Virtual Document Object Model）</h3><ul><li><strong>DOM的本质是什么</strong>：浏览器中的概念，用JS对象来表示页面上的元素，并提供了操作 DOM 对象的API；</li><li><strong>什么是React中的虚拟DOM</strong>：是框架中的概念，是程序员用JS对象来模拟页面上的 DOM 和 DOM嵌套；</li><li><strong>为什么要实现虚拟DOM（虚拟DOM的目的）：</strong>为了实现页面中DOM 元素的高效更新</li><li><strong>DOM和虚拟DOM的区别</strong>：</li></ul><p><img src="https://i.loli.net/2020/11/09/qZjtGbKpcm2eIxW.png" alt="虚拟DOM的概念.png"></p><p><img src="https://i.loli.net/2020/11/09/Z6YObrACqSlG5if.png" alt="1552877849641.png"></p><h3 id="1-4-2-react的Diff算法-Reconciliation"><a href="#1-4-2-react的Diff算法-Reconciliation" class="headerlink" title="1.4.2 react的Diff算法(Reconciliation)"></a>1.4.2 react的Diff算法(Reconciliation)</h3><p><img src="https://i.loli.net/2020/11/09/r7gyDbEYfUIXaW9.png" alt="Diff.png"></p><p>其实传统diff算法就是对每个节点一一对比，循环遍历所有的子节点，然后判断子节点的更新状态。通过循环递归对节点进行依次对比，算法时间复杂度达到 O(n^3) ，n是树的节点数，这个有多可怕呢？——如果要展示1000个节点，得执行上亿次比较。即便是CPU快能执行30亿条命令，也<strong>很难在一秒内</strong>计算出差异。</p><p>React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。react根据自己的特点，实现了部分代码的简化。</p><p><img src="https://i.loli.net/2020/11/09/47Ig31tUxOiHLGh.png" alt="1552878167661"></p><h4 id="a-tree-diff"><a href="#a-tree-diff" class="headerlink" title="a) tree diff"></a>a) tree diff</h4><blockquote><p>（1）React通过updateDepth对Virtual DOM树进行层级控制。<br>（2）对树分层比较，两棵树只对同一层次节点进行比较。如果该节点不存在时，则该节点及其子节点会被完全删除，不会再进一步比较。<br>（3）只需遍历一次就能完成整棵DOM树的比较。</p></blockquote><p><img src="https://i.loli.net/2020/11/09/zZOVt1Gefn6oiAN.png" alt="1562723697592.png"></p><blockquote><p>那么问题来了，如果DOM节点出现了跨层级操作,diff会咋办呢？<br>答：diff只简单考虑同层级的节点位置变换，如果是跨层级的话，只有创建节点和删除节点的操作。</p></blockquote><p><img src="https://i.loli.net/2020/11/09/9vtH3A8sDhYj6ql.png" alt="1562723819718.png"></p><blockquote><p>如上图所示，以A为根节点的整棵树会被<strong>重新创建，而不是移动</strong>，因此 <strong>官方建议不要进行DOM节点跨层级操作，可以通过CSS隐藏、显示节点，而不是真正地移除、添加DOM节点</strong>。</p></blockquote><h4 id="b-component-diff"><a href="#b-component-diff" class="headerlink" title="b) component diff"></a>b) component diff</h4><p>React应用是基于组件构建的，对于组件的比较优化侧重于以下几点：</p><blockquote><ol><li>同一类型组件遵从tree diff比较v-dom树</li><li>不同类型组件，先将该组件归类为dirty component，替换下整个组件下的所有子节点</li><li>同一类型组件Virtual Dom没有变化，React允许开发者使用shouldComponentUpdate()来判断该组件是否进行diff，运用得当可以节省diff计算时间，提升性能</li></ol></blockquote><p><img src="https://i.loli.net/2020/11/09/mLuOh1tHqUVecZI.png" alt="1562723945651.png"></p><p>如上图，当组件D → 组件G时，diff判断为不同类型的组件，虽然它们的结构相似甚至一样，diff仍然不会比较二者结构，会直接销毁D及其子节点，然后新建一个G相关的子tree，这显然会影响性能，官方虽然认定这种情况极少出现，但是开发中的这种现象造成的影响是非常大的。</p><h4 id="c-element-diff"><a href="#c-element-diff" class="headerlink" title="c) element diff"></a>c) element diff</h4><p>对于同一层级的element节点，diff提供了以下3种节点操作：</p><blockquote><ol><li>INSERT_MARKUP 插入节点</li><li>MOVE_EXISING 移动节点</li><li>REMOVE_NODE 移除节点</li></ol></blockquote><p><img src="https://i.loli.net/2020/11/09/QbwmHxGfaSIkZzg.png" alt="1562724094202.png"></p><p>一般diff在比较集合[A,B,C,D]和[B，A，D，C]的时候会进行全部对比，即按对应位置逐个比较，发现每个位置对应的元素都有所更新，则把旧集合全部移除，替换成新的集合，如上图，但是这样的操作在React中显然是复杂、低效、影响性能的操作，因为新集合中所有的元素都可以进行复用，无需删除重新创建，耗费性能和内存，只需要移动元素位置即可。</p><p>React对这一现象做出了一个高效的策略：允许开发者对同一层级的同组子节点添加唯一key值进行区分。意义就是代码上的一小步，性能上的一大步，甚至是翻天覆地的变化！</p><h1 id="2-Create-React-App脚手架"><a href="#2-Create-React-App脚手架" class="headerlink" title="2. Create React App脚手架"></a>2. Create React App脚手架</h1><p><a href="https://www.html.cn/create-react-app/docs/getting-started/">https://www.html.cn/create-react-app/docs/getting-started/</a></p><p><code>Create React App</code>是FaceBook的React团队官方出的一个构建<code>React</code>单页面应用的脚手架工具。它本身集成了<code>Webpack</code>，并配置了一系列内置的<code>loader</code>和默认的npm的脚本，可以很轻松的实现零配置就可以快速开发React的应用。</p><h2 id="2-1-创建应用"><a href="#2-1-创建应用" class="headerlink" title="2.1 创建应用"></a>2.1 创建应用</h2><pre class=" language-js"><code class="language-js"># 全局安装npm install <span class="token operator">-</span>g create<span class="token operator">-</span>react<span class="token operator">-</span>app# 构建一个my<span class="token operator">-</span>app的项目npx create<span class="token operator">-</span>react<span class="token operator">-</span>app my<span class="token operator">-</span>app                     npx create<span class="token operator">-</span>react<span class="token operator">-</span>app my<span class="token operator">-</span>test<span class="token operator">-</span>app <span class="token operator">--</span>template typescript    <span class="token comment" spellcheck="true">//typescript版本</span>cd my<span class="token operator">-</span>app# 启动编译当前的React项目，并自动打开 http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>yarn start# 如果你不能确保最新版本，可以先尝试卸载： npm uninstall <span class="token operator">-</span>g create<span class="token operator">-</span>react<span class="token operator">-</span>app<span class="token punctuation">,</span>然后再全局安装# 解压默认的webpack配置到配置文件中# react<span class="token operator">-</span>scripts 是 create<span class="token operator">-</span>react<span class="token operator">-</span>app 的一个核心包，一些脚本和工具的默认配置都集成在里面，而 yarn eject 命令执行后会将封装在 create<span class="token operator">-</span>react<span class="token operator">-</span>app 中的配置全部反编译到当前项目，这样用户就能完全取得 webpack 文件的控制权。所以，eject 命令存在的意义就是更改 webpack 配置存在的啊！yarn run ejectyarn install   <span class="token comment" spellcheck="true">//需要再次运行install命令安装</span>yarn run start <span class="token comment" spellcheck="true">//然后才可以启动</span></code></pre><p>应用的目录结构：</p><pre class=" language-js"><code class="language-js">├── <span class="token keyword">package</span><span class="token punctuation">.</span>json├── <span class="token keyword">public</span>                  # 这个是webpack的配置的静态目录│   ├── favicon<span class="token punctuation">.</span>ico│   ├── index<span class="token punctuation">.</span>html          # 默认是单页面应用，这个是最终的html的基础模板│   └── manifest<span class="token punctuation">.</span>json├── src│   ├── App<span class="token punctuation">.</span>css             # App根组件的css│   ├── App<span class="token punctuation">.</span>tsx              # App组件代码│   ├── App<span class="token punctuation">.</span>test<span class="token punctuation">.</span>tsx│   ├── index<span class="token punctuation">.</span>css           # 启动文件样式│   ├── index<span class="token punctuation">.</span>tsx            # 启动的文件（开始执行的入口）！！！！│   ├── logo<span class="token punctuation">.</span>svg│   └── serviceWorker<span class="token punctuation">.</span>js└── yarn<span class="token punctuation">.</span>lock</code></pre><h2 id="2-2-添加图片，字体和文件"><a href="#2-2-添加图片，字体和文件" class="headerlink" title="2.2 添加图片，字体和文件"></a>2.2 添加图片，字体和文件</h2><p>使用 Webpack，添加图片和字体等静态资源的工作方式与 CSS 类似。</p><p>你可以 <strong>直接在 JavaScript 模块中 import 文件</strong>。 这会告诉 Webpack 将该文件包含在 bundle(包) 中。 与 CSS 导入不同，导入文件会为你提供字符串值。 此值是你可以在代码中引用的最终路径，例如 image 的 <code>src</code> 属性或链接到 PDF 的 <code>href</code> 属性。</p><p>要减少对服务器的请求数，导入小于 10,000 字节的图片将返回 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs">data URI</a> 而不是路径。 这适用于以下文件扩展名：<code>bmp</code> ，<code>gif</code> ，<code>jpg</code> ，<code>jpeg</code> 和 <code>png</code> 。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例如：</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.png'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 告诉 Webpack 这个 JS 文件使用了这个图片</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /logo.84287d09.png</span><span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 导入结果是图片的 URL </span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">"Logo"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Header<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//这也适用于 CSS ：</span><span class="token punctuation">.</span>Logo <span class="token punctuation">{</span>  background<span class="token operator">-</span>image<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>logo<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//字体图标的使用</span><span class="token comment" spellcheck="true">//yarn add font-awesome</span><span class="token comment" spellcheck="true">//引入样式</span><span class="token keyword">import</span> <span class="token string">'font-awesome/css/font-awesome.css'</span><span class="token comment" spellcheck="true">//使用样式</span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-address-book"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> <span class="token comment" spellcheck="true">//具体使用参照官网：http://www.fontawesome.com.cn/faicons/</span></code></pre><h2 id="2-3-修改默认配置"><a href="#2-3-修改默认配置" class="headerlink" title="2.3 修改默认配置"></a>2.3 修改默认配置</h2><p>要修改 create-react-app 脚手架中的默认配置，正常情况下我们也不会通过yarn reject暴露配置文件然后修改配置文件，我们可以在项目根目录下新建一个config-overrides.js配置文件，覆盖默认的配置</p><pre class=" language-jsx"><code class="language-jsx"><span class="token number">1</span><span class="token punctuation">.</span>    yarn add react<span class="token operator">-</span>app<span class="token operator">-</span>rewired customize<span class="token operator">-</span>cra<span class="token number">2</span><span class="token punctuation">.</span>    在项目根目录下创建一个config<span class="token operator">-</span>overrides<span class="token punctuation">.</span>js<span class="token number">3</span><span class="token punctuation">.</span>  修改<span class="token keyword">package</span><span class="token punctuation">.</span>json    <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">-</span> <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>        <span class="token operator">+</span> <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired start"</span><span class="token punctuation">,</span>        <span class="token operator">-</span> <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>        <span class="token operator">+</span> <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired build"</span><span class="token punctuation">,</span>        <span class="token operator">-</span> <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts test"</span><span class="token punctuation">,</span>        <span class="token operator">+</span> <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired test"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  修改config-overrides.js文件</span><span class="token comment" spellcheck="true">//  http://npm.taobao.org/package/customize-cra</span><span class="token comment" spellcheck="true">//  https://blog.csdn.net/weixin_33850890/article/details/91372527</span><span class="token comment" spellcheck="true">// 配置less和@符号</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>    override<span class="token punctuation">,</span>    addWebpackAlias<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"customize-cra"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>    <span class="token function">addWebpackAlias</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token string">"@"</span><span class="token punctuation">]</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-json"><code class="language-json">//在项目根目录下创建paths.json<span class="token punctuation">{</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>        <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"@components/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/components/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"@pages/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/pages/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"@utils/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/utils/*"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//修改tsconfig.json<span class="token punctuation">{</span>    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./paths.json"</span><span class="token punctuation">,</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-React基本语法"><a href="#2-4-React基本语法" class="headerlink" title="2.4 React基本语法"></a>2.4 React基本语法</h2><h3 id="2-4-1-React的核心包"><a href="#2-4-1-React的核心包" class="headerlink" title="2.4.1 React的核心包"></a>2.4.1 React的核心包</h3><ul><li>react： 专门用于创建组件和虚拟DOM的，同时组件的生命周期都在这个包中</li><li>react-dom： 专门进行DOM操作的，最主要的应用场景，就是<code>ReactDOM.render()</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 这是 创建虚拟DOM元素的 API    &lt;h1 title="啊，五环" id="myh1">你比四环多一环&lt;/h1></span><span class="token comment" spellcheck="true">//  第一个参数： 字符串类型的参数，表示要创建的标签的名称</span><span class="token comment" spellcheck="true">//  第二个参数：对象类型的参数， 表示 创建的元素的属性节点</span><span class="token comment" spellcheck="true">//  第三个参数： 子节点（包括 其它 虚拟DOM 获取 文本子节点）</span><span class="token comment" spellcheck="true">//  参数n :  其它子节点</span><span class="token keyword">const</span> myh1 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'啊，五环'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token string">'myh1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'你比四环多一环'</span><span class="token punctuation">)</span><span class="token keyword">const</span> mydiv <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'这是一个div元素'</span><span class="token punctuation">,</span> myh1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 渲染虚拟DOM元素</span><span class="token comment" spellcheck="true">// 参数1： 表示要渲染的虚拟DOM对象</span><span class="token comment" spellcheck="true">// 参数2： 指定容器,注意：这里不能直接放 容器元素的Id字符串，需要放一个容器的DOM对象</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>myh1<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-4-2-JSX语法"><a href="#2-4-2-JSX语法" class="headerlink" title="2.4.2 JSX语法"></a>2.4.2 JSX语法</h3><blockquote><p>什么是JSX语法：就是符合 xml 规范的 JS 语法；（语法格式相对来说，要比HTML严谨很多）</p></blockquote><p>JSX语法的本质：并不是直接把 jsx 渲染到页面上，而是内部通过 createElement 再渲染到页面；</p><p>在 jsx 中混合写入 js 表达式：在 jsx 语法中，要把 JS代码写到    <code>{ }</code> 中</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 导入包</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token comment" spellcheck="true">//2. JSX中使用数值、字符串、bool、数组等信息</span><span class="token keyword">let</span> a<span class="token punctuation">:</span>number <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> str<span class="token punctuation">:</span>string <span class="token operator">=</span> <span class="token string">'你好，中国'</span><span class="token keyword">let</span> boo<span class="token punctuation">:</span>boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">let</span> title<span class="token punctuation">:</span>string <span class="token operator">=</span> <span class="token string">'999'</span><span class="token keyword">const</span> h1<span class="token punctuation">:</span>JSX<span class="token punctuation">.</span>Element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>红火火恍恍惚惚<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token keyword">const</span> arr<span class="token punctuation">:</span>JSX<span class="token punctuation">.</span>Element<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>这是h2<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>这是h3<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token punctuation">]</span><span class="token keyword">const</span> arrStr<span class="token punctuation">:</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'毛利兰'</span><span class="token punctuation">,</span> <span class="token string">'柯南'</span><span class="token punctuation">,</span> <span class="token string">'小五郎'</span><span class="token punctuation">,</span> <span class="token string">'灰原哀'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 定义一个空数组，将来用来存放 名称 标签【方案1】</span><span class="token keyword">const</span> nameArr<span class="token punctuation">:</span>JSX<span class="token punctuation">.</span>Element<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 注意： React 中，需要把 key 添加给 被 forEach 或 map 或 for 循环直接控制的元素</span>arrStr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token operator">&lt;</span>h5 key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>  nameArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 数组的 map 方法, map 中必须写 return</span><span class="token keyword">const</span> result<span class="token punctuation">:</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> arrStr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token string">'~~'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3. 调用 render 函数渲染   JSX  XML 比 HTML 严格多了</span><span class="token comment" spellcheck="true">// 在JSX要使用JS，则需要把 JS 代码写到 {} 中</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token punctuation">{</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">{</span>str<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">{</span>boo <span class="token operator">?</span> <span class="token string">'条件为真'</span> <span class="token punctuation">:</span> <span class="token string">'条件为假'</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p title<span class="token operator">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">></span>这是p标签<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token punctuation">{</span>h1<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* {arr} */</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这是注释，你看不见我</span>  <span class="token punctuation">}</span>  <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">{</span>nameArr<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">{</span>arrStr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"ooo"</span><span class="token operator">></span><span class="token number">11111</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> #注意点：<span class="token number">1</span><span class="token punctuation">.</span> 在 JSX 中 写注释：推荐使用<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 这是注释 */</span> <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span> 为 JSX 中的htmlFor替换label的<span class="token keyword">for</span>属性<span class="token number">3</span><span class="token punctuation">.</span> 在 JSX 创建DOM的时候，所有的节点，必须有唯一的根元素进行包裹；<span class="token number">4</span><span class="token punctuation">.</span> 在 JSX 语法中，标签必须成对出现，如果是单标签，则必须自闭和！</code></pre><blockquote><p>当 编译引擎，在编译JSX代码的时候，如果遇到了<code>&lt;</code>那么就把它当作 HTML代码去编译，如果遇到了 <code>{}</code> 就把 花括号内部的代码当作普通JS代码去编译；</p></blockquote><h1 id="3-React中创建组件"><a href="#3-React中创建组件" class="headerlink" title="3. React中创建组件"></a>3. React中创建组件</h1><h2 id="3-1-使用-class-关键字来创建组件"><a href="#3-1-使用-class-关键字来创建组件" class="headerlink" title="3.1 使用 class 关键字来创建组件"></a>3.1 使用 class 关键字来创建组件</h2><h3 id="3-1-1-最基本的组件结构"><a href="#3-1-1-最基本的组件结构" class="headerlink" title="3.1.1 最基本的组件结构"></a>3.1.1 最基本的组件结构</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//让自己的组件继承React.Compoent，重写render方法</span><span class="token keyword">class</span> 组件名称 <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是 <span class="token keyword">class</span> 创建的组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-1-2-使用案例"><a href="#3-1-2-使用案例" class="headerlink" title="3.1.2 使用案例"></a>3.1.2 使用案例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//新建Movie.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只读 不可以修改</span>type IProps <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>  gender<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'大家好，我是 class 创建的 Movie组件'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只读 不可以this.state来修改</span>type IState <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token keyword">typeof</span> initialState<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个类继承React.component   </span><span class="token comment" spellcheck="true">//&lt;IProps，IState>是泛型，约定组件中的props和state的类型</span><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&lt;</span>IProps<span class="token punctuation">,</span> IState<span class="token operator">></span> <span class="token punctuation">{</span>  readonly state<span class="token punctuation">:</span> IState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 注意：在 class 组件内部，this 表示 当前组件的实例对象。props数据不可以修改，state数据可以修改 */</span><span class="token punctuation">}</span>      这是 Movie 组件 <span class="token operator">--</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">--</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>age<span class="token punctuation">}</span> <span class="token operator">--</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>gender<span class="token punctuation">}</span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Movie<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.tsx</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3. 调用 render 函数渲染</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token number">123</span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 这里的 Movie 标签，其实，就是 Movie 类的一个实例对象 */</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Movie name={user.name} age={user.age}>&lt;/Movie> */</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>Movie <span class="token punctuation">{</span><span class="token operator">...</span>user<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Movie<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-1-3-state的修改"><a href="#3-1-3-state的修改" class="headerlink" title="3.1.3 state的修改"></a>3.1.3 state的修改</h3><h4 id="a-不能直接修改-State"><a href="#a-不能直接修改-State" class="headerlink" title="a) 不能直接修改 State"></a>a) 不能直接修改 State</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//我们把state设置为Readonly就是为了不让直接修改state，所以下面写法错误</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>comment <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以这样修改State</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>comment<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="b-State的更新可能是异步的"><a href="#b-State的更新可能是异步的" class="headerlink" title="b) State的更新可能是异步的"></a>b) State的更新可能是异步的</h4><p>因为 <code>this.props</code> 和 <code>this.state</code> 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//调用setState，组件的state并不会立即改变，setState只是把要修改的状态放入一个队列中，React会优化真正的执行时机，并且React会出于性能原因，可能会将多次setState的状态修改合并成一次状态修改。所以不要依赖当前的State，计算下个State。</span><span class="token keyword">private</span> btnAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Wrong</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结果state的count为1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Wrong   因为state和props的更新可能是异步的，所以并不能保证counter中所获取到的state和props是最新的</span><span class="token keyword">private</span> btnAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Correct</span> <span class="token keyword">private</span> btnAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span>IState<span class="token punctuation">,</span>props<span class="token punctuation">:</span>IProps<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>      count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span>IState<span class="token punctuation">,</span>props<span class="token punctuation">:</span>IProps<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>      count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span>IState<span class="token punctuation">,</span>props<span class="token punctuation">:</span>IProps<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>      count<span class="token punctuation">:</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><blockquote><p>state的更新既可能是同步的，也可能是异步的。 准确地说，在React内部机制能检测到的地方, setState就是异步的；在React检测不到的地方，例如setInterval、setTimeout里，setState就是同步更新的。</p></blockquote><h4 id="c-获取更新之后的state数据"><a href="#c-获取更新之后的state数据" class="headerlink" title="c) 获取更新之后的state数据"></a>c) 获取更新之后的state数据</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span> data<span class="token punctuation">:</span> newData <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里打印的是最新的state值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="d-setState合并"><a href="#d-setState合并" class="headerlink" title="d) setState合并"></a>d) setState合并</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//setState会把当前的值合并到原来的state中</span><span class="token comment" spellcheck="true">//只要调用一次setState就会触发页面的重新渲染，不管这个state在页面有没有使用过，也不管这个state有没有发生变化</span><span class="token comment" spellcheck="true">//为什么setState会触发页面的重新渲染呢？  因为setState内容会触发batchingUpdate方法来触发组件更新</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"王小虎"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="e-setState的实现过程"><a href="#e-setState的实现过程" class="headerlink" title="e) setState的实现过程"></a>e) setState的实现过程</h4><p><img src="https://i.loli.net/2020/11/09/mCiq6G274oUYIAr.png" alt="3941614716-5b13d6d716035_articlex.png"></p><h2 id="3-2-使用构造函数来创建组件"><a href="#3-2-使用构造函数来创建组件" class="headerlink" title="3.2 使用构造函数来创建组件"></a>3.2 使用构造函数来创建组件</h2><h3 id="3-2-1-基本使用"><a href="#3-2-1-基本使用" class="headerlink" title="3.2.1 基本使用"></a>3.2.1 基本使用</h3><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span><span class="token punctuation">.</span> 新建Hello<span class="token punctuation">.</span>tsx，并导出组件<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> MouseEvent<span class="token punctuation">,</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>  gender<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Hello<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果 在一个组件中 return 一个 null。则表示此组件是空的，什么都不会渲染</span>  <span class="token comment" spellcheck="true">// return null</span>  <span class="token comment" spellcheck="true">// 在组件中，必须 返回一个 合法的 JSX 虚拟DOM元素</span>  <span class="token comment" spellcheck="true">// props.name = 'zs'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 结论：不论是 Vue 还是 React，组件中的 props 永远都是只读的；不能被重新赋值；</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>这是 Hello 组件 <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>age<span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>gender<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Hello<span class="token punctuation">;</span>#<span class="token number">2</span><span class="token punctuation">.</span>导入Hello<span class="token punctuation">.</span>jsx  <span class="token comment" spellcheck="true">// 1. 导入包</span>  <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>  <span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span>  <span class="token comment" spellcheck="true">// 注意： 这里的 @ 符号，表示 项目根目录中的 src 这一层目录</span>  <span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'@/components/Hello.jsx'</span>  <span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'大黄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    gender<span class="token punctuation">:</span> <span class="token string">'雄'</span>  <span class="token punctuation">}</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token number">123</span>    <span class="token operator">&lt;</span>Hello <span class="token punctuation">{</span><span class="token operator">...</span>dog<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Hello<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-2-2-函数组件中的state"><a href="#3-2-2-函数组件中的state" class="headerlink" title="3.2.2 函数组件中的state"></a>3.2.2 函数组件中的state</h3><blockquote><p>React 16.7.0开始推行Hook，到 React 16.8.0 Hook 稳定，Hooks开始被推广使用，它解决了传统使用生命周期而导致的相关代码逻辑分离(例如创建订阅及取消订阅)、不相关代码逻辑混合在一个生命周期中(使用多个Effect)、class中复杂的this指向、class不能被很好的压缩、class可能导致热重载不稳定</p></blockquote><blockquote><p>Hook为开发者提供了可以使用function创建微state，且一个state由一个对应的函数管理，还提供了专门处理副作用、实现redux、性能优化等功能，并且100%向后兼容，个人认为Hook是react未来发展的趋势，但并不意味着摒弃class，react也没有移除class的计划。</p></blockquote><p><code>useState</code> 就是一个 <em>Hook</em> ，通过在函数组件里调用它来给组件添加一些内部 state。React 会在重复渲染时保留这个 state。</p><p><code>useState</code> 会返回一对值：<strong>当前</strong>状态和一个让你更新它的函数，你可以在事件处理函数中或其他一些地方调用这个函数。它类似 class 组件的 <code>this.setState</code>，但是它不会把新的 state 和旧的 state 进行合并。</p><blockquote><ol><li><p>一般来说，一个函数组件，在函数退出后变量就会”消失”，但是 state 中的变量会被 React 保留。</p></li><li><p>当我们点击按钮，调用setCount函数时，React会重新渲染这个组件，并把更新的count值传给这个组件。(其实是每次 Render 都有自己的 Props 与 State)</p><p><a href="https://segmentfault.com/a/1190000018639033#item-2-5">https://segmentfault.com/a/1190000018639033#item-2-5</a></p></li><li><p>useState()接受一个参数为默认值，该方法返回一个数组，第一个值为定义data的值，第二个为更新data的方法，他们总是成对出现的</p></li></ol></blockquote><h3 id="3-2-3-state-hook基本使用"><a href="#3-2-3-state-hook基本使用" class="headerlink" title="3.2.3  state hook基本使用"></a>3.2.3  state hook基本使用</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> Demo1<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//count代表state的变量</span>  <span class="token comment" spellcheck="true">//setCount是一个function，如果我们要修改count变量，需要通过setCount来修改</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count3<span class="token punctuation">,</span> setCount3<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span>count<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点我修改count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token punctuation">{</span>count2<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">setCount2</span><span class="token punctuation">(</span><span class="token operator">++</span>count2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点我修改count2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token punctuation">{</span>count3<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">setCount3</span><span class="token punctuation">(</span><span class="token operator">++</span>count3<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点我修改count3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Demo1<span class="token punctuation">;</span></code></pre><h3 id="3-2-4-useState使用注意点"><a href="#3-2-4-useState使用注意点" class="headerlink" title="3.2.4 useState使用注意点"></a>3.2.4 useState使用注意点</h3><h4 id="a-useState是异步的"><a href="#a-useState是异步的" class="headerlink" title="a) useState是异步的"></a>a) <code>useState</code>是异步的</h4><p>修改state之后无法拿到最新的状态，要等到下一个事件循环周期执行时，状态才是最新的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Demo1<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>people<span class="token punctuation">,</span> setPeople<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> string<span class="token punctuation">,</span> age<span class="token punctuation">:</span> number <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handleUpdate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setPeople</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>people<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'王五'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 张三</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">{</span>people<span class="token punctuation">.</span>name<span class="token punctuation">}</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleUpdate<span class="token punctuation">}</span><span class="token operator">></span> 修改name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Demo1<span class="token punctuation">;</span></code></pre><p>但是在state不影响DOM的前提下，你是可以同步使用它</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> Demo1<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>people<span class="token punctuation">,</span> setPeople<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> string<span class="token punctuation">,</span> age<span class="token punctuation">:</span> number <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handleUpdate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setPeople</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>people<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'王五'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"王五"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 王五</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">{</span>people<span class="token punctuation">.</span>name<span class="token punctuation">}</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleUpdate<span class="token punctuation">}</span><span class="token operator">></span> 修改name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Demo1<span class="token punctuation">;</span></code></pre><h4 id="b-useState中的数据务必是immutable数据"><a href="#b-useState中的数据务必是immutable数据" class="headerlink" title="b) useState中的数据务必是immutable数据"></a>b) <code>useState</code>中的数据务必是<code>immutable</code>数据</h4><p>若两次传入同一对象则不会触发组件更新，如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> Demo1<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">String</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* sort 不生成副本，直接返回原数组 */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>sort<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* slice 返回一个新的副本数组 */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>slice<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Demo1<span class="token punctuation">;</span></code></pre><p>点击sort按钮后并不会出发更新！</p><ul><li><code>useState</code>对应的 setState对state地改变生效，无论DOM是否使用了<code>state</code>，该组件都会重新渲染；</li></ul><h4 id="c-useState-是将新值直接覆盖掉旧值，而不是合并"><a href="#c-useState-是将新值直接覆盖掉旧值，而不是合并" class="headerlink" title="c) useState 是将新值直接覆盖掉旧值，而不是合并"></a>c) useState 是将新值直接覆盖掉旧值，而不是合并</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>temp<span class="token punctuation">,</span>setTemp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTemp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// temp = {a: 2}</span></code></pre><h2 id="3-3-两种创建组件方式的对比"><a href="#3-3-两种创建组件方式的对比" class="headerlink" title="3.3 两种创建组件方式的对比"></a>3.3 两种创建组件方式的对比</h2><ol><li>用<strong>构造函数</strong>创建出来的组件：叫做“无状态组件”，只有props，没有自己的私有数据和生命周期函数</li><li>用<strong>class关键字</strong>创建出来的组件：叫做“有状态组件”，有私有数据和生命周期函数</li><li>无状态组件的本质只是一个render函数，其没有实例化的过程，故而也无法访问组件对象</li></ol><blockquote><p>有状态组件和无状态组件之间的<strong>本质区别</strong>就是：有无state属性！无状态组件由于没有私有数据和生命周期函数，运行效率会比有状态组件高一些。</p><p>在react hooks中，允许我们通过useState这个hook给函数组件添加状态</p></blockquote><h2 id="3-4-条件渲染"><a href="#3-4-条件渲染" class="headerlink" title="3.4 条件渲染"></a>3.4 条件渲染</h2><h3 id="3-4-1-通过if来进行条件渲染"><a href="#3-4-1-通过if来进行条件渲染" class="headerlink" title="3.4.1 通过if来进行条件渲染"></a>3.4.1 通过if来进行条件渲染</h3><p><a href="https://blog.csdn.net/crystalqy/article/details/79066347">https://blog.csdn.net/crystalqy/article/details/79066347</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Gretting.jsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  isLoggedIn<span class="token operator">?</span><span class="token punctuation">:</span>boolean<span class="token punctuation">}</span><span class="token keyword">const</span> Gretting<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>已登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>未登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Gretting<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>Gretting isLoggedIn<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Gretting<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-4-2-通过三元运算符条件渲染"><a href="#3-4-2-通过三元运算符条件渲染" class="headerlink" title="3.4.2 通过三元运算符条件渲染"></a>3.4.2 通过三元运算符条件渲染</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  isLoggedIn<span class="token operator">?</span><span class="token punctuation">:</span>boolean<span class="token punctuation">}</span><span class="token keyword">const</span> Gretting<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> isLoggedIn<span class="token operator">?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>已登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>未登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Gretting<span class="token punctuation">;</span></code></pre><h3 id="3-4-3-阻止组件渲染"><a href="#3-4-3-阻止组件渲染" class="headerlink" title="3.4.3 阻止组件渲染"></a>3.4.3 阻止组件渲染</h3><p>在极少数情况下，你可能希望能隐藏组件，即使它已经被其他组件渲染。若要完成此操作，你可以让 <code>render</code> 方法直接返回 <code>null</code>，而不进行任何渲染。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  isLoggedIn<span class="token operator">?</span><span class="token punctuation">:</span>boolean<span class="token punctuation">}</span><span class="token keyword">const</span> Gretting<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>已登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Gretting<span class="token punctuation">;</span></code></pre><h3 id="3-4-4-通过-amp-amp-进行条件渲染"><a href="#3-4-4-通过-amp-amp-进行条件渲染" class="headerlink" title="3.4.4 通过&amp;&amp;进行条件渲染"></a>3.4.4 通过&amp;&amp;进行条件渲染</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Mailbox.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  unreadMessages<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//解构赋值  如果没有给unreadMessages指定值的时候，默认用[]</span><span class="token keyword">const</span> Mailbox<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>unreadMessages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>          You have <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length<span class="token punctuation">}</span> unread messages<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Mailbox<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'Re: React'</span><span class="token punctuation">,</span> <span class="token string">'Re:Re: React'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>Mailbox unreadMessages<span class="token operator">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Mailbox<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3-5-列表渲染"><a href="#3-5-列表渲染" class="headerlink" title="3.5 列表渲染"></a>3.5 列表渲染</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//NumberList.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  numbers<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。</span><span class="token comment" spellcheck="true">//一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用来自数据 id 来作为元素的 key。key在兄弟节点之间必须唯一</span><span class="token comment" spellcheck="true">//当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key：</span><span class="token keyword">const</span> NumberList<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>numbers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span>number<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> NumberList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>NumberList numbers<span class="token operator">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>NumberList<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3-6-Fragment的使用"><a href="#3-6-Fragment的使用" class="headerlink" title="3.6 Fragment的使用"></a>3.6 Fragment的使用</h2><p>有时，语义化的 HTML 会被破坏。比如当在 JSX 中使用 <code>&lt;div&gt;</code> 元素来实现 React 代码功能的时候，又或是在使用列表（<code>&lt;ol&gt;</code>， <code>&lt;ul&gt;</code> 和 <code>&lt;dl&gt;</code>）和 HTML <code>&lt;table&gt;</code> 时。 在这种情况下，我们应该使用 <a href="https://react.docschina.org/docs/fragments.html">React Fragments</a> 来组合各个组件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ListItem.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">//这边把?去掉，表示父组件在使用当前组件的时候item必传</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  item<span class="token punctuation">:</span> <span class="token punctuation">{</span> term<span class="token punctuation">:</span> string<span class="token punctuation">,</span> description<span class="token punctuation">:</span> string <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> ListItem<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> item <span class="token operator">=</span> props<span class="token punctuation">.</span>item<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>      <span class="token operator">&lt;</span>dt<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>term<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">></span>      <span class="token operator">&lt;</span>dd<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ListItem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    term<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    description<span class="token punctuation">:</span> <span class="token string">"描述1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    term<span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>    description<span class="token punctuation">:</span> <span class="token string">"描述2"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>dl<span class="token operator">></span>    <span class="token punctuation">{</span>      items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>ListItem item<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>term<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3-7-React组合"><a href="#3-7-React组合" class="headerlink" title="3.7 React组合"></a>3.7 React组合</h2><p>react组合类似于Vue中的slot(插槽)，子组件的内容由父组件来指定</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//FancyBorder.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">}</span><span class="token keyword">const</span> FancyBorder<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span>props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*子组件：占坑*/</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> FancyBorder<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>FancyBorder color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>孩儿们<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>FancyBorder<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>少数情况下，你可能需要在一个组件中预留出几个“洞”。这种情况下，我们可以不使用 children，而是自行约定：将所需内容传入 props，并使用相应的 prop。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//SplitPane.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> MouseEvent<span class="token punctuation">,</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  left<span class="token operator">?</span><span class="token punctuation">:</span>JSX<span class="token punctuation">.</span>Element<span class="token punctuation">,</span>  right<span class="token operator">?</span><span class="token punctuation">:</span>JSX<span class="token punctuation">.</span>Element<span class="token punctuation">}</span><span class="token keyword">const</span> SplitPane<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"SplitPane"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"SplitPane-left"</span><span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>left<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"SplitPane-right"</span><span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>right<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> SplitPane<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>SplitPane    left<span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>左边<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span>    right<span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>右边<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="4-评论列表案例"><a href="#4-评论列表案例" class="headerlink" title="4. 评论列表案例"></a>4. 评论列表案例</h1><h2 id="4-1-启用sass"><a href="#4-1-启用sass" class="headerlink" title="4.1 启用sass"></a>4.1 启用sass</h2><p><a href="mailto:react-scripts@2.0.0">react-scripts@2.0.0</a> 以上版本才适用。</p><p>react-scripts主要设计原理是将配置好的如 <code>Webpack，Babel，ESLint</code> ，合并到 <code>react-scripts</code> 这npm包中，用户就可以开箱即用。很多开发者都在这基础上进行改造开发。注意 <code>react-scripts</code> 就是create-react-app脚手架的核心配置代码。</p><h3 id="4-1-1-安装依赖"><a href="#4-1-1-安装依赖" class="headerlink" title="4.1.1 安装依赖"></a>4.1.1 安装依赖</h3><p>要使用Sass必须首先安装   <code>node-sass</code></p><pre class=" language-sc"><code class="language-sc">$ npm install node-sass --save$ # or$ yarn add node-sass//配置node-sass的二进制包npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</code></pre><p>安装完之后，我们就可以直接在组件中引入scss文件了。</p><h3 id="4-1-2-在sass文件中引入其他sass文件"><a href="#4-1-2-在sass文件中引入其他sass文件" class="headerlink" title="4.1.2 在sass文件中引入其他sass文件"></a>4.1.2 在sass文件中引入其他sass文件</h3><pre class=" language-js"><code class="language-js">@<span class="token keyword">import</span> <span class="token string">'styles/colors.scss'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这边路径以当前文件路径为参照</span></code></pre><h2 id="4-2-案例完成"><a href="#4-2-案例完成" class="headerlink" title="4.2 案例完成"></a>4.2 案例完成</h2><p>思路：父组件中套了若干个评论Item子组件，所以需要创建两个组件，分别是：CmtList和CmtItem</p><h3 id="4-2-1-CmtList-tsx"><a href="#4-2-1-CmtList-tsx" class="headerlink" title="4.2.1 CmtList.tsx"></a>4.2.1 CmtList.tsx</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> CmtItem <span class="token keyword">from</span> <span class="token string">"./CmtItem"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./CmtList.scss"</span><span class="token punctuation">;</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> CmtList<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>commentList<span class="token punctuation">,</span> SetCommentList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，沙发'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，板凳'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，凉席'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'赵六'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，砖头'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'田七'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，楼下山炮'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 样式的第一种写法：直接用行内样式 */</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;h1 style={{ color: 'red', fontSize: '35px', zIndex: 3, fontWeight: 200, textAlign: 'center' }}>这是评论列表组件&lt;/h1> */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>这是评论列表组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">{</span>commentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>CmtItem <span class="token punctuation">{</span><span class="token operator">...</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>CmtItem<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> CmtList<span class="token punctuation">;</span></code></pre><h3 id="4-2-2-CmtList-scss"><a href="#4-2-2-CmtList-scss" class="headerlink" title="4.2.2 CmtList.scss"></a>4.2.2 CmtList.scss</h3><pre class=" language-css"><code class="language-css"><span class="token selector">h1</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">35</span>px<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-3-CmtItem-tsx"><a href="#4-2-3-CmtItem-tsx" class="headerlink" title="4.2.3 CmtItem.tsx"></a>4.2.3 CmtItem.tsx</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./CmtItem.scss'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  user<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">,</span>  content<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> CmtItem<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>评论人：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>评论内容：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> CmtItem<span class="token punctuation">;</span></code></pre><h3 id="4-2-4-CmtItem-scss"><a href="#4-2-4-CmtItem-scss" class="headerlink" title="4.2.4 CmtItem.scss"></a>4.2.4 CmtItem.scss</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span></span><span class="token punctuation">{</span>  <span class="token selector">border: 1px dashed <span class="token id">#ccc</span>;  margin: 10px;  padding: 10px;  box-shadow: 0 0 10px <span class="token id">#ccc</span>;  <span class="token class">.user</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.content</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-5-问题"><a href="#4-2-5-问题" class="headerlink" title="4.2.5 问题"></a>4.2.5 问题</h3><p>当我们在CmtList.css中指定了h1标签的样式的时候，我们发现  <code>import "./CmtList.scss";'</code> 之后，CmtList和CmtItem中的h1标签都变成了倾斜，说明CmtList中的样式全局生效了。原因在于webpack进行打包的时候会将所有内容打包到一个js文件，所以打包后的样式会全局生效。</p><h2 id="4-3-使用CSS模块化"><a href="#4-3-使用CSS模块化" class="headerlink" title="4.3 使用CSS模块化"></a>4.3 使用CSS模块化</h2><p>在cra脚手架中，如果某个样式文件要开启模块化，只需要把样式文件命名为xx.module.css/xx.module.scss就可以了</p><h3 id="4-3-1-CmtList-module-scss"><a href="#4-3-1-CmtList-module-scss" class="headerlink" title="4.3.1 CmtList.module.scss"></a>4.3.1 CmtList.module.scss</h3><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* css 模块化只针对类选择器 和 Id选择器生效， 不会对标签选择器模块化 */</span><span class="token selector">h1</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">35</span>px<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 注意： 被 :local() 包裹起来的类名会被模块化； 默认情况下所有的类和id选择器都会被模块化了； */</span><span class="token selector"><span class="token class">.title</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 注意：被 :global() 包裹起来的类名，不会被模块化，而是会全局生效； */</span> <span class="token selector"><span class="token pseudo-class">:global(.test)</span></span><span class="token punctuation">{</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-2-CmtList-tsx"><a href="#4-3-2-CmtList-tsx" class="headerlink" title="4.3.2 CmtList.tsx"></a>4.3.2 CmtList.tsx</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> cssObj <span class="token keyword">from</span>  <span class="token string">'./CmtList.module.scss'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cssObj<span class="token punctuation">)</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>cssObj<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>这是评论列表组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><h3 id="4-3-3-总结"><a href="#4-3-3-总结" class="headerlink" title="4.3.3 总结"></a>4.3.3 总结</h3><ol><li>使用 <code>:local()</code> 和 <code>:global()</code><ul><li><code>:local()</code>包裹的类名，是被模块化的类名，只能通过<code>className={cssObj.类名}</code>来使用。<code>:local</code>可以省略</li><li><code>:global()</code>包裹的类名，是全局生效的，不会被 <code>css-modules</code> 控制，定义的类名是什么，就是使用定义的类名<code>className="类名"</code></li></ul></li><li>注意：只有<code>.title</code>这样的类样式或者id选择器，才会被模块化控制，类似于<code>body</code>这样的标签选择器，不会被模块化控制；</li></ol><h1 id="5-React-事件处理"><a href="#5-React-事件处理" class="headerlink" title="5. React 事件处理"></a>5. React 事件处理</h1><p><a href="https://reactjs.org/docs/events.html">https://reactjs.org/docs/events.html</a></p><h2 id="5-1-函数组件的事件绑定"><a href="#5-1-函数组件的事件绑定" class="headerlink" title="5.1 函数组件的事件绑定"></a>5.1 函数组件的事件绑定</h2><ol><li><p>事件的名称都是React的提供的，因此名称的首字母必须大写<code>onClick</code>、<code>onMouseOver</code></p></li><li><p>为事件提供的处理函数，必须是如下格式 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">function</span> <span class="token punctuation">}</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre></li><li><p>事件绑定方式：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">const</span> App<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"show方法"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> show2 <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">:</span>string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"show2方法"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>show<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token string">"参数"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>按钮<span class="token number">2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre></li></ol><h2 id="5-2-绑定文本框与state中的值"><a href="#5-2-绑定文本框与state中的值" class="headerlink" title="5.2 绑定文本框与state中的值"></a>5.2 绑定文本框与state中的值</h2><ol><li><p>在Vue中提供了<code>v-model</code>指令，可以很方便的实现 <code>数据的双向绑定</code>；</p></li><li><p>但是在React中只是<code>单向数据流</code>，也就是只能把state上的数据绑定到页面，无法把页面中数据的变化自动同步回 state ； 如果需要把页面上数据的变化保存到 state，则需要程序员手动监听<code>onChange</code>事件，拿到最新的数据，手动调用<code>this.setState({  })</code> 更改回去。 这种方式叫受控组件</p></li></ol><h3 id="5-2-1-表单受控组件"><a href="#5-2-1-表单受控组件" class="headerlink" title="5.2.1 表单受控组件"></a>5.2.1 表单受控组件</h3><p>在 HTML 中，表单元素（如<code>&lt;input&gt;</code>、 <code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>）之类的表单元素通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 <a href="https://zh-hans.reactjs.org/docs/react-component.html#setstate"><code>setState()</code></a>来更新。</p><p>我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> App<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"默认数据"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> inputChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>inputChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><h3 id="5-2-2-表单非受控组件"><a href="#5-2-2-表单非受控组件" class="headerlink" title="5.2.2 表单非受控组件"></a>5.2.2 表单非受控组件</h3><p>在大多数情况下，我们推荐使用 <a href="https://zh-hans.reactjs.org/docs/forms.html#controlled-components">受控组件</a> 来处理表单数据。在一个受控组件中，表单数据是由 React 组件来管理的。另一种替代方案是使用非受控组件，这时表单数据将交由 DOM 节点来处理。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> App<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//引用页面元素</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"点我"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>因为非受控组件将真实数据储存在 DOM 节点中，所以在使用非受控组件时，有时候反而更容易同时集成 React 和非 React 代码。如果你不介意代码美观性，并且希望快速编写代码，使用非受控组件往往可以减少你的代码量。否则，你应该使用受控组件。</p><h3 id="5-2-3-受控组件和非受控组件"><a href="#5-2-3-受控组件和非受控组件" class="headerlink" title="5.2.3 受控组件和非受控组件"></a>5.2.3 受控组件和非受控组件</h3><p>“受控”和“不受控制”的术语通常指的是表单输入，但他们还可以描述任何组件数据的位置。作为props传递进组件的数据可以被认为是<strong>受控的</strong>（因为父组件控制数据）。只存在于内部状态的数据可以被认为是<strong>不受控制的</strong>（因为父类不能直接更改它）。</p><h2 id="5-3-React父子组件的通信"><a href="#5-3-React父子组件的通信" class="headerlink" title="5.3 React父子组件的通信"></a>5.3 React父子组件的通信</h2><h3 id="5-3-1-父组件传递给子组件"><a href="#5-3-1-父组件传递给子组件" class="headerlink" title="5.3.1 父组件传递给子组件"></a>5.3.1 父组件传递给子组件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父组件</span><span class="token operator">&lt;</span>CMTItem key<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>CMTItem<span class="token operator">></span><span class="token comment" spellcheck="true">//子组件通过props可以获取到父组件传递过来的数据</span></code></pre><h3 id="5-3-2-子组件传递给父组件"><a href="#5-3-2-子组件传递给父组件" class="headerlink" title="5.3.2 子组件传递给父组件"></a>5.3.2 子组件传递给父组件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父组件</span> <span class="token operator">&lt;</span>CMTBox reload<span class="token operator">=</span><span class="token punctuation">{</span>loadCmts<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>CMTBox<span class="token operator">></span><span class="token comment" spellcheck="true">//子组件通过props.reload() 来调用父组件的方法，调用的时候可以传递参数</span></code></pre><h3 id="5-3-3-评论列表发表评论"><a href="#5-3-3-评论列表发表评论" class="headerlink" title="5.3.3 评论列表发表评论"></a>5.3.3 评论列表发表评论</h3><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span><span class="token punctuation">.</span>CmtList<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> CmtItem <span class="token keyword">from</span> <span class="token string">"./CmtItem"</span><span class="token punctuation">;</span><span class="token keyword">import</span> CmtBox <span class="token keyword">from</span> <span class="token string">"./CmtBox"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// import "./CmtList.scss";</span><span class="token keyword">import</span> cssObj <span class="token keyword">from</span> <span class="token string">'./CmtList.module.scss'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cssObj<span class="token punctuation">)</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> CmtList<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>commentList<span class="token punctuation">,</span> SetCommentList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，沙发'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，板凳'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，凉席'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'赵六'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，砖头'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token string">'田七'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'哈哈，楼下山炮'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> reload <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span>number<span class="token punctuation">,</span>user<span class="token punctuation">:</span>string<span class="token punctuation">,</span>content<span class="token punctuation">:</span>string<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">SetCommentList</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>commentList<span class="token punctuation">,</span> obj<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 样式的第一种写法：直接用行内样式 */</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;h1 style={{ color: 'red', fontSize: '35px', zIndex: 3, fontWeight: 200, textAlign: 'center' }}>这是评论列表组件&lt;/h1> */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>这是评论列表组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">{</span>commentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>CmtItem <span class="token punctuation">{</span><span class="token operator">...</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>CmtItem<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>CmtBox reload<span class="token operator">=</span><span class="token punctuation">{</span>reload<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>CmtBox<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> CmtList<span class="token punctuation">;</span>#<span class="token number">2</span><span class="token punctuation">.</span>CmtItem<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./CmtItem.scss'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CmtItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>评论人：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>评论内容：<span class="token punctuation">{</span>props<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>#<span class="token number">3</span><span class="token punctuation">.</span>CmtBox<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./CmtItem.scss'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span>  reload<span class="token operator">?</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> CmtBox<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>content<span class="token punctuation">,</span> setContent<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//操作的是哪个文本框就去修改哪个文本框的数据</span>  <span class="token keyword">const</span> changeHandler <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> tag <span class="token operator">=</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setUser</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">setContent</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> postComment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">&amp;&amp;</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>      props<span class="token punctuation">.</span>reload <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        user<span class="token punctuation">,</span>        content<span class="token punctuation">,</span>        id<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>用户名<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"user"</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"content"</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"发表评论"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">postComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> CmtBox<span class="token punctuation">;</span></code></pre><h2 id="5-4-Ref-Hook"><a href="#5-4-Ref-Hook" class="headerlink" title="5.4 Ref Hook"></a>5.4 Ref Hook</h2><blockquote><p>“ref”对象是一个通用容器，其current属性是可变的。返回的 ref 对象在组件的整个生命周期内保持不变。</p></blockquote><h3 id="5-4-1-保存dom"><a href="#5-4-1-保存dom" class="headerlink" title="5.4.1 保存dom"></a>5.4.1 保存dom</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">,</span> RefObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> Test<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> t<span class="token punctuation">:</span>RefObject<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span> <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//相当于componentDidMount 、componentDidUpdate</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// div</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>t<span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">...</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Test<span class="token punctuation">;</span></code></pre><h3 id="5-4-2-forwardRef"><a href="#5-4-2-forwardRef" class="headerlink" title="5.4.2 forwardRef"></a>5.4.2 forwardRef</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// father</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./Son'</span><span class="token punctuation">;</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> Father<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> refContainer <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTMLInputElement</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> changeInput <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      refContainer<span class="token punctuation">.</span>current<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>refContainer<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'啊，我被改了!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>changeInput<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>changeInput<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>refContainer<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Father<span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Son</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> forwardRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> Son <span class="token operator">=</span> React<span class="token punctuation">.</span>forwardRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTMLInputElement</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Son<span class="token punctuation">;</span></code></pre><h3 id="5-4-3-useImperativeHandle"><a href="#5-4-3-useImperativeHandle" class="headerlink" title="5.4.3 useImperativeHandle"></a>5.4.3 useImperativeHandle</h3><blockquote><p><code>useImperativeHandle</code> 可以让你在使用 <code>ref</code> 时给父组件暴露的指定的值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <code>forwardRef</code> 一起使用</p></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//father</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> RefObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./Son'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> InputRefProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./type"</span><span class="token punctuation">;</span>type Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> Father<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> refContainer <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputRefProps</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> changeInput <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    refContainer<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> refContainer<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> talk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    refContainer<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> refContainer<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>changeInput<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>changeInput<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>talk<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>talk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>refContainer<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Father<span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Son</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> forwardRef<span class="token punctuation">,</span>useRef<span class="token punctuation">,</span>useImperativeHandle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> InputRefProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./type"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Son <span class="token operator">=</span> React<span class="token punctuation">.</span>forwardRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputRefProps</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//新建一个ref  将此ref绑定在本组建内的input上</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTMLInputElement</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将 使得本组件input获取焦点的方法赋给父组件传递来的ref上 </span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      focus<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        inputRef<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      talk<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Son<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//type.d.ts</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InputRefProps</span> <span class="token punctuation">{</span>  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-4-4-保存事件-变量"><a href="#5-4-4-保存事件-变量" class="headerlink" title="5.4.4 保存事件/变量"></a>5.4.4 保存事件/变量</h3><p>在函数组件中，因为每次re-render就意味着函数重新执行一次，因此在函数内部保持变量引用是一件我们需要思考的事情(如果普通变量，每次re-render都会被重新初始化)。</p><p>在前面学习useState时我们知道，使用useState定义变量，可以做到这样的事情。同样的，利用ref的.current也可以。</p><p>一个很常见的应用场景就是对于定时器的清除。我们需要确保setInterval的执行结果timer的引用，才能准确的清除对应的定时器。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> Timer<span class="token punctuation">:</span>FC<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> timerRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>NodeJS<span class="token punctuation">.</span>Timeout<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      timerRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'do something'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 组件卸载时，清除定时器</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          timerRef<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="5-4-5-useState和useRef的区别"><a href="#5-4-5-useState和useRef的区别" class="headerlink" title="5.4.5 useState和useRef的区别"></a>5.4.5 useState和useRef的区别</h3><ul><li>每次 Render 的内容都会形成一个快照并保留下来，因此当状态变更而 re-render 时，就形成了 N 个 Render 状态，而每个 Render 状态都拥有自己固定不变的 Props 与 State。(每次Render都有自己的Props、State、事件处理、effect，这就是<strong>Capture Value</strong> 特性)</li><li>利用 <code>useRef</code> 就可以绕过 Capture Value 的特性。<strong>可以认为 ref 在所有 Render 过程中保持着唯一引用，因此所有对 ref 的赋值或取值，拿到的都只有一个最终状态</strong></li><li>也可以简洁的认为，<code>ref</code> 是 Mutable 的，而 <code>state</code> 是 Immutable 的。</li></ul><h1 id="6-类组件的生命周期"><a href="#6-类组件的生命周期" class="headerlink" title="6. 类组件的生命周期"></a>6. 类组件的生命周期</h1><h2 id="6-1-生命周期钩子函数介绍"><a href="#6-1-生命周期钩子函数介绍" class="headerlink" title="6.1 生命周期钩子函数介绍"></a>6.1 生命周期钩子函数介绍</h2><ul><li><p>生命周期的概念：每个组件的实例，从创建、运行、到销毁，在这个过程中会出发一些列事件，这些事件就叫做组件的生命周期函数；</p></li><li><p>React组件生命周期(React 16.4+)分为三部分：</p><ul><li><strong>组件创建阶段</strong>：</li></ul><blockquote><p>static 开头的     只会执行一次</p><p>constructor    构造器     只会执行一次</p><p>getDerivedStateFromProps: 每次re-rendering之前被调用，作用：将传递的props映射到state里面       会执行多次</p><p>render           构建虚拟dom，但是此时虚拟dom还没有渲染到页面        会执行多次</p><p>componentDidMount:组建的虚拟dom已经挂载到页面                      只会执行一次</p></blockquote><ul><li><strong>组件运行阶段</strong>：根据 props 属性 或 state 状态的改变，有选择性的执行0到多次</li></ul><blockquote><p>getDerivedStateFromProps:每次re-rendering之前被调用</p><p>shouldComponentUpdate:组件是否需要被更新，返回值是true或者false。此时可以获取最新的props和state数据</p><p>render: 重新更新渲染组件的虚拟dom</p><p>getSnapshotBeforeUpdate：在最近一次渲染提交到 DOM 节点之前调用。它的含义是在React更新Dom元素之前，获取一个快照，它返回的结果将作为componentDidUpdate的第三个参数。一般的用法就是获取更新前的DOM。</p><p>componentDidUpdate: 组件完成了更新，此时页面已经是最新的了</p></blockquote><ul><li><strong>组件卸载阶段</strong>：只执行一次</li></ul><blockquote><p>componentWillUnmount: 当组件从 DOM 中移除时会调用如下方法，此时组件还可以被使用</p><p><img src="https://i.loli.net/2020/11/09/3fkUDhZFjJo9isp.png" alt="1574654437154.png"></p></blockquote></li></ul><p>React生命周期的回调函数总结成表格如下：<br><img src="https://i.loli.net/2020/11/09/Ikbxi25TNhDMEYf.png" alt="1574666830021.png"></p><h2 id="6-2-生命周期函数详解"><a href="#6-2-生命周期函数详解" class="headerlink" title="6.2 生命周期函数详解"></a>6.2 生命周期函数详解</h2><blockquote><p>在组件创建之前，会先初始化默认的props属性，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span><span class="token punctuation">.</span>Counter<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>type IProps <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span>  initCount<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>type IState <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token keyword">typeof</span> initialState<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&lt;</span>IProps<span class="token punctuation">,</span> IState<span class="token operator">></span> <span class="token punctuation">{</span>  readonly state<span class="token punctuation">:</span> IState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//-------------------------------组件创建阶段----------------------------------------</span>  <span class="token comment" spellcheck="true">//1.在组件的创建阶段：第一个执行的是static开头的属性</span>  <span class="token comment" spellcheck="true">//设定props的默认值：当父组件没有给子组件传递props的时候就会使用这个默认值</span>  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>    initCount<span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//2.在组件创建阶段，第二个执行的是构造函数 (创建一个组件对象执行一次)</span>  <span class="token comment" spellcheck="true">//构造函数的作用：主要就是用来创建组件对象</span>  <span class="token comment" spellcheck="true">//我们可以在构造函数中声明当前组件的state</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> IProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//构造函数中只可以给state赋予初始值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"李四"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造函数中能够通过setState()来修改state的值</span>    <span class="token comment" spellcheck="true">// this.setState({</span>    <span class="token comment" spellcheck="true">//     msg:"李四"</span>    <span class="token comment" spellcheck="true">// })</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//3.在组件的创建阶段，第三个执行的是getDerivedStateFromProps</span>  <span class="token comment" spellcheck="true">//这个方法的作用：就是将props映射到state中</span>  <span class="token comment" spellcheck="true">//在每一次re-render的时候执行</span>  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">:</span> IProps<span class="token punctuation">,</span> prevState<span class="token punctuation">:</span> IState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getDerivedStateFromProps"</span><span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//4.在组件的创建阶段，第四个执行的是render()方法。(在一个组件的各种生命周期阶段中，至少执行一次)</span>  <span class="token comment" spellcheck="true">//render()方法的主要作用：在内存中构建虚拟dom(此时虚拟dom还没有被挂载到页面)</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在render()函数中不能通过setState()来修改state状态，因为这样会陷入死循环</span>        <span class="token comment" spellcheck="true">// 其实render()函数应该是一个纯函数，这个函数的作用本身就是给他什么数据，他就显示什么数据</span>        <span class="token comment" spellcheck="true">// this.setState({</span>        <span class="token comment" spellcheck="true">//     msg:"王五"</span>        <span class="token comment" spellcheck="true">// })</span>      <span class="token punctuation">}</span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>initCount<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//5.在组件的创建阶段，第五个执行的是componentDidMount。(创建一个组件对象执行一次)</span>  <span class="token comment" spellcheck="true">//componentDidMount执行的时候就表示内存中的虚拟dom已经挂载到页面了，此时页面是最新的</span>  <span class="token comment" spellcheck="true">//只有componentDidMount()钩子函数才可以通过setState()来修改state</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//componentDidMount()方法允许我们通过setState()来修改状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"赵六"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"componentDidMount方法执行了"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//-------------------------------组价的运行阶段-------------------------------</span>  <span class="token comment" spellcheck="true">//当前组件的状态发生改变之后，会进入组件的运行阶段</span>  <span class="token comment" spellcheck="true">//1.在组件运行阶段，第一个执行的函数是getDerivedStateFromProps</span>  <span class="token comment" spellcheck="true">// static getDerivedStateFromProps(nextProps: IProps, prevState: IState) {</span>  <span class="token comment" spellcheck="true">//   console.log("getDerivedStateFromProps", nextProps, prevState)</span>  <span class="token comment" spellcheck="true">//   return null;</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token comment" spellcheck="true">//2.在组件的运行阶段，第二个执行的函数是shouldComponentUpdate。(在组件的各种生命周期阶段中，执行>=0次)</span>  <span class="token comment" spellcheck="true">//作用：让程序员手动控制是否要更新组件</span>  <span class="token comment" spellcheck="true">//如果这个方法返回false，就不会更新组件(后续的生命周期函数就不会执行了)；如果这个方法返回true，就会更新组件(后续的生命周期会执行)</span>  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">:</span> IProps<span class="token punctuation">,</span> nextState<span class="token punctuation">:</span> IState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// shouldComponentUpdate() 方法中也不能通过setState()来更改state，此时仍然会进入死循环</span>    <span class="token comment" spellcheck="true">// this.setState({</span>    <span class="token comment" spellcheck="true">//     msg:"王五"</span>    <span class="token comment" spellcheck="true">// })</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"shouldComponentUpdate"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//3.在组件的运行阶段，第三个执行的函数是render()函数</span>  <span class="token comment" spellcheck="true">//render()函数的作用：在内存中构建虚拟dom(此时虚拟dom还没有被挂载到页面)</span>  <span class="token comment" spellcheck="true">//4.在组件的运行阶段，第四个执行的函数是getSnapshotBeforeUpdate。(在组件的各种生命周期阶段中，执行>=0次)</span>  <span class="token comment" spellcheck="true">//主要作用：获取更新页面之前的dom信息</span>  <span class="token comment" spellcheck="true">//这个方法的返回值会作为componentDidUpdate()方法第三个参数入参  https://react.docschina.org/docs/react-component.html</span>  <span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// getSnapshotBeforeUpdate() 方法中也不能通过setState()来更改state，此时仍然会进入死循环</span>    <span class="token comment" spellcheck="true">// this.setState({</span>    <span class="token comment" spellcheck="true">//     msg:"王五"</span>    <span class="token comment" spellcheck="true">// })</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getSnapshotBeforeUpdate"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> aa<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//5.在组件的运行阶段，第五个执行的函数是componentDidUpdate。(在组件的各种生命周期阶段中，执行>=0次)</span>  <span class="token comment" spellcheck="true">//主要作用：虚拟dom已经挂载到页面，此时页面是最新的</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">:</span> IProps<span class="token punctuation">,</span> prevState<span class="token punctuation">:</span> IState<span class="token punctuation">,</span> snapshot<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// componentDidUpdate() 方法中也不能通过setState()来更改state，此时仍然会进入死循环</span>    <span class="token comment" spellcheck="true">// this.setState({</span>    <span class="token comment" spellcheck="true">//     msg: "王五"</span>    <span class="token comment" spellcheck="true">// })</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"componentDidUpdate"</span><span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//----------------------------组件的卸载阶段-----------------------------</span>  <span class="token comment" spellcheck="true">//可以在componentWillUnmount()方法中进行一些资源的释放工作。比如关闭定时器、移除事件监听。(卸载一个组件执行一次)</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"componentWillUnmount"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span>#App<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">'./components4/Counter'</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>type IState <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token keyword">typeof</span> initialState<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  readonly state<span class="token punctuation">:</span> IState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span> IState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> prev<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>      这是App组件      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Counter initCount={this.state.count}>&lt;/Counter> */</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>Counter<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Counter<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>改变count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><h2 id="6-3-组件的重新渲染和优化"><a href="#6-3-组件的重新渲染和优化" class="headerlink" title="6.3 组件的重新渲染和优化"></a>6.3 组件的重新渲染和优化</h2><h3 id="6-3-1-类组件的re-render的时机"><a href="#6-3-1-类组件的re-render的时机" class="headerlink" title="6.3.1 类组件的re-render的时机"></a>6.3.1 类组件的re-render的时机</h3><pre><code>什么时候触发类组件的re-render一：当类组件继承React.Component的时候1.当前组件中调用了setState会触发组件的re-render，不管当前组件的state有没有发生过变化(原理是setState内部会触发batchingUpdate)2.当父组件re-render的时候，父组件中的子组件也会re-render，不管父组件有没有给子组件传递过任何数据3.只要组件re-render的时候，有关于组件运行阶段的生命周期的钩子都会被触发(getDerivedStateFromProps\shouldComponentUpdate\render\getSnapshotBeforeUpdate\componentDidMount\componentDidUpdate)。二：当类组件继承React.PureComponent的时候1.当前组件调用了setState之后，只要state数据的内存地址发生变化，就会触发组件的re-render(不管state数据在页面有没有使用)2.当父组件re-render的时候，子组件不一定再re-render，而是要看父组件给子组件传递了props内存地址有没有发生变化(不管在子组件中有没有使用过父组件传递的props)3.只要组件re-render的时候，有关于组件运行阶段的生命周期的钩子都会被触发</code></pre><p>当组件继承React.Component的时候，我们在父组件修改了与子组件无关的state，而子组件没有用到这个状态，发现子组件也会re-render，这个时候就需要借助shouldComponentUpdate钩子函数来做优化。</p><p>我们通常的解决方案是：</p><blockquote><ol><li>使用immutable进行比较，在不相等的时候调用setState；</li><li>在shouldComponentUpdate中判断前后的props和state，如果没有变化，则返回false来阻止更新。</li><li>创建一个类继承PureComponent，判断页面是否要更新的时候进行浅比较</li></ol></blockquote><h3 id="6-3-2-shouldComponentUpdate优化"><a href="#6-3-2-shouldComponentUpdate优化" class="headerlink" title="6.3.2 shouldComponentUpdate优化"></a>6.3.2 shouldComponentUpdate优化</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//作用：让程序员手动控制是否要更新组件</span><span class="token comment" spellcheck="true">//如果这个方法返回false，就不会更新组件(后续的生命周期函数就不会执行了)；如果这个方法返回true，就会更新组件(后续的生命周期会执行)</span><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">:</span> IProps<span class="token punctuation">,</span> nextState<span class="token punctuation">:</span> IState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当下次传递过来的initCount为偶数的时候，不更新页面。为奇数的时候更新页面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>initCount<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="6-3-3-PureComponent优化"><a href="#6-3-3-PureComponent优化" class="headerlink" title="6.3.3 PureComponent优化"></a>6.3.3 PureComponent优化</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ListOfWords.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>type IProps <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span>  words<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承React.Component的时候，视图更新通过shouldComponentUpdate完成</span><span class="token comment" spellcheck="true">// class ListOfWords extends React.Component&lt;IProps> {</span><span class="token comment" spellcheck="true">// 继承React.PureComponent的时候，视图更新通过数据源的内存地址判断完成</span><span class="token keyword">class</span> <span class="token class-name">ListOfWords</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span><span class="token operator">&lt;</span>IProps<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// shouldComponentUpdate(nextProps: IProps) {</span>  <span class="token comment" spellcheck="true">//   console.log(nextProps.words,"0000000000000000000000")</span>  <span class="token comment" spellcheck="true">//   return true;</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>words<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ListOfWords<span class="token comment" spellcheck="true">//App.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ListOfWords <span class="token keyword">from</span> <span class="token string">'./components4/ListOfWords'</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> words<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'marklar'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>type IState <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token keyword">typeof</span> initialState<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  readonly state<span class="token punctuation">:</span> IState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当ListOfWords组件继承React.PureComponent的时候，下面的代码不会触发视图的刷新，因为当前的words虽然修改了，但总是引用同一块内存</span>    <span class="token comment" spellcheck="true">// this.setState((prev:IState)=>{</span>    <span class="token comment" spellcheck="true">//   prev.words.push("marklar")</span>    <span class="token comment" spellcheck="true">//   return {</span>    <span class="token comment" spellcheck="true">//     words:prev.words</span>    <span class="token comment" spellcheck="true">//   }</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">//下面代码会触发ListOfWords视图更新，因为每次点击按钮都给words赋值一个新的数组，此时新数组和原来数组的内存地址肯定不一致，从而组件才可能更新</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">:</span>IState<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      prev<span class="token punctuation">.</span>words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"marklar"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        words<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">...</span>prev<span class="token punctuation">.</span>words<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>      这是App组件      <span class="token operator">&lt;</span>ListOfWords words<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>words<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ListOfWords<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>添加words<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*1.继承Component时，数据源发生变化之后，会通过shouldComponentUpdate的返回值来判断页面是否需要刷新2.继承PureComponent时，数据源发生变化之后，默认进行的是浅比较(只会比较数据的内存地址是否一致)，不能再重写shouldComponentUpdate*/</span></code></pre><h2 id="6-4-getDerivedStateFromProps存在的问题"><a href="#6-4-getDerivedStateFromProps存在的问题" class="headerlink" title="6.4 getDerivedStateFromProps存在的问题"></a>6.4 getDerivedStateFromProps存在的问题</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//getDerivedStateFromProps 函数会在每次re-rendering之前被调用</span><span class="token comment" spellcheck="true">//为什么要用getDerivedStateFromProps？答案：组件接收的props数据是只读的，我们可以使用该方法将传递的props映射到state里面，实现修改(会有诸多问题)</span><span class="token comment" spellcheck="true">//注意点：该方法是一个静态方法，方法中没有this，故而不可以直接通过this.setState()来改变状态，而是需要通过return来改变状态</span><span class="token comment" spellcheck="true">//参数：</span><span class="token comment" spellcheck="true">//1.nextProps外部传递过来的props属性</span><span class="token comment" spellcheck="true">//2.prevState之前的state状态</span><span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getDerivedStateFromProps"</span><span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取到父组件中传递过来的initcount值</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> initcount <span class="token punctuation">}</span> <span class="token operator">=</span> nextProps<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当父组件中传递过来的initcount发生改变了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initcount <span class="token operator">!=</span> prevState<span class="token punctuation">.</span>prevCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法中返回{count:initcount} 替换掉当前state中的 count值</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            count<span class="token punctuation">:</span> initcount<span class="token punctuation">,</span>            prevCount<span class="token punctuation">:</span>initcount        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果props传入的内容不需要影响到你的state，那么就需要返回一个null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//问题：</span><span class="token number">1</span><span class="token punctuation">.</span>当前组件的状态由多个源控制，父组件中控制列表数据，子组件中又控制了type这个state。因此父组件state改掉之后，会触发子组件重新渲染；本身组件state改掉之后，会触发当前组件重新渲染<span class="token number">2</span><span class="token punctuation">.</span>如果你的组件内部既需要修改自己的type，又需要接收从外部修改的type。逻辑非常混乱！getDerivedStateFromProps中你根本不知道该做什么。<span class="token keyword">if</span> <span class="token punctuation">(</span>initcount <span class="token operator">!=</span> prevState<span class="token punctuation">.</span>prevCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在方法中返回{count:initcount} 替换掉当前state中的 count值</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> initcount<span class="token punctuation">,</span>        prevCount<span class="token punctuation">:</span>initcount    <span class="token punctuation">}</span><span class="token punctuation">}</span>如果彻底解决这个问题呢？<span class="token function">答案：好好组织你的组件，在非必须的时候，摒弃这种写法</span><span class="token punctuation">(</span>派生属性<span class="token punctuation">)</span>。type要么由props驱动，要么完全由state驱动。从这个生命周期的更新来看，react更希望将受控的props和state进行分离，就如同Redux作者Dan Abramov在redux文档当中写的一样Presentational and Container Components，将所有的组件分离称为展示型组件和容器型组件，一个只负责接收props来改变自己的样式，一个负责保持其整个模块的state。这样可以让代码更加清晰。但是在实际的业务逻辑中，我们有时很难做到这一点，而且这样可能会导致容器型组件变得非常庞大以致难以管理，如何进行取舍还是需要根据实际场景决定的</code></pre><h2 id="6-5-React老版本生命周期"><a href="#6-5-React老版本生命周期" class="headerlink" title="6.5 React老版本生命周期"></a>6.5 React老版本生命周期</h2><p><img src="https://i.loli.net/2020/11/09/Sm2VnMoJpdkhTYC.png" alt="3284159097-5bbb08d17db33_articlex-1584956954768.png"></p><h1 id="7-函数组件的生命周期"><a href="#7-函数组件的生命周期" class="headerlink" title="7.函数组件的生命周期"></a>7.函数组件的生命周期</h1><h2 id="7-1-useEffect介绍"><a href="#7-1-useEffect介绍" class="headerlink" title="7.1 useEffect介绍"></a>7.1 useEffect介绍</h2><p><code>useEffect</code> 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API。</p><p>在调用这个hook时，就是告诉React在完成对DOM的更改后运行这个hook，在这里你可以访问到state和props。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">-</span> 纯函数：如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。    <span class="token keyword">function</span> <span class="token function">priceAfterTax</span><span class="token punctuation">(</span>productPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>productPrice <span class="token operator">*</span> <span class="token number">0.20</span><span class="token punctuation">)</span> <span class="token operator">+</span> productPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">-</span> 副作用：一个可以被观察的副作用是在函数内部与其外部的任意交互。这可能是在函数内修改外部的变量，或者在函数里调用另外一个函数等。    <span class="token keyword">var</span> tax <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">calculateTax</span><span class="token punctuation">(</span>productPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tax <span class="token operator">=</span> tax<span class="token operator">/</span><span class="token number">100</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>productPrice <span class="token operator">*</span> tax<span class="token punctuation">)</span> <span class="token operator">+</span> productPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="7-2-useEffect用法"><a href="#7-2-useEffect用法" class="headerlink" title="7.2 useEffect用法"></a>7.2 useEffect用法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1  componentDidMount执行一次，依赖项每次改变时执行一次</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//副作用动作</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>依赖项<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2  相当于componentDidMount</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//副作用动作</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3  相当于componentDidMount 、componentDidUpdate</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//副作用动作</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="7-3-useEffect使用"><a href="#7-3-useEffect使用" class="headerlink" title="7.3 useEffect使用"></a>7.3 useEffect使用</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>type IProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> Demo2<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//count代表state的变量</span>  <span class="token comment" spellcheck="true">//setCount是一个function，如果我们要修改count变量，需要通过setCount来修改</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//useEffect函数可以来模拟class组件的中指定生命周期的钩子函数 componentDidMount，componentDidUpdate，componentWillUnmount</span>  <span class="token comment" spellcheck="true">//相当于componentDidMount 、componentDidUpdate</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxxx"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//相当于componentDidMount</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"yyyyyyyyy"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//相当于componentDidMount 和 当count2的值被改变之后执行当前的useEffect</span>  <span class="token comment" spellcheck="true">//其他值改变不会执行这个useEffect</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"zzzzzzzzzzzzz"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count2<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    count的值是：<span class="token punctuation">{</span>count<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点我修改count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    count2的值是<span class="token punctuation">:</span><span class="token punctuation">{</span>count2<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">setCount2</span><span class="token punctuation">(</span><span class="token operator">++</span>count2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点我修改count2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Demo2<span class="token punctuation">;</span></code></pre><h2 id="7-4-清除副作用"><a href="#7-4-清除副作用" class="headerlink" title="7.4 清除副作用"></a>7.4 清除副作用</h2><h3 id="a-无需清理的副作用"><a href="#a-无需清理的副作用" class="headerlink" title="a) 无需清理的副作用"></a>a) 无需清理的副作用</h3><blockquote><p>有时候，我们只想<strong>在 React 更新 DOM 之后运行一些额外的代码。</strong>比如发送网络请求，手动变更 DOM，记录日志，这些都是常见的无需清除的操作。因为我们在执行完这些操作之后，就可以忽略他们了。</p></blockquote><p>需求：监听url的变化来发送网络请求，保存返回结果</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">'@utils/ajax'</span>type IProps <span class="token operator">=</span> <span class="token punctuation">{</span>  location<span class="token punctuation">:</span>string<span class="token punctuation">}</span><span class="token keyword">const</span> Example<span class="token punctuation">:</span> FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>location<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ajax<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setData</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Example<span class="token punctuation">;</span></code></pre><p>当location发生变化时，useEffect中函数就会自动执行</p><h3 id="b-需要清理的副作用"><a href="#b-需要清理的副作用" class="headerlink" title="b) 需要清理的副作用"></a>b) 需要清理的副作用</h3><blockquote><p>之前我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如<strong>定时器</strong>、<strong>订阅外部数据源</strong>。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！</p></blockquote><p>在useEffect中可选的返回一个清除函数，该清除函数会在组件<strong>卸载</strong>时自动执行，以达到清除effect的目的；</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//useEffect函数中return的function会在组件卸载时自动执行</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//副作用动作</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//清除effect</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用示例</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"useEffect在组件挂载和更新的时候执行"</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器打印"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果useEffect的function中返回了一个函数，那么该函数会在组件卸载的时候执行</span>        <span class="token comment" spellcheck="true">//就相当于componentWillUnMount</span>        <span class="token comment" spellcheck="true">//现在每一次重新渲染都会返回一个新的清除函数，把上一次组件装在执行的定时器清除掉(这边由于闭包的原因，之前的定时器以及一些变量都会被释放)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"清除定时器"</span><span class="token punctuation">)</span>              timer <span class="token operator">&amp;&amp;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="c-useEffect返回清除函数的执行时机"><a href="#c-useEffect返回清除函数的执行时机" class="headerlink" title="c) useEffect返回清除函数的执行时机"></a>c) useEffect返回清除函数的执行时机</h3><p>这里是组件<strong>卸载</strong>时自动执行，当前状态下的函数组件render完之后会立即执行上一个函数状态中<code>useEffect</code>返回的清除函数，而这个清除函数中所带的参数也是处于上一个状态中（闭包的特性）。</p><p><a href="https://segmentfault.com/a/1190000018639033">https://segmentfault.com/a/1190000018639033</a></p><blockquote><p>假设在组件的使用过程中，外部传入的props参数id，改变了两次，第一次传入<code>id: 1</code>， 第二次传入<code>id: 2</code></p><p>那么我们来梳理一下整个过程：</p><ol><li>传入<code>props.id = 1</code></li><li>组件渲染</li><li>DOM渲染完成，useEffect逻辑执行，返回清除副作用函数<code>clear，</code>命名为<code>clear1</code></li><li>传入<code>props.id = 2</code></li><li>组件渲染</li><li>组件渲染完成，clear1执行</li><li>useEffect逻辑执行，返回另一个clear函数，命名为<code>clear2</code></li><li>组件卸载，clear2执行</li></ol><p>执行过程有点绕，因为与你印象中的执行过程似乎不一样。其实关键的地方就在于clear函数的执行，它的特征如下：</p><ul><li>每次useEffect执行，都会返回一个新的clear函数</li><li>clear函数会在下一次useEffect逻辑之前执行（DOM渲染完成之后）</li><li>组件卸载也会执行一次</li></ul></blockquote><h2 id="7-5-useLayoutEffect"><a href="#7-5-useLayoutEffect" class="headerlink" title="7.5 useLayoutEffect"></a>7.5 useLayoutEffect</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token function">useLayoutEffect</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> 依赖项 <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其函数签名与 <code>useEffect</code> 相同，但它会在所有的 DOM 变更之后<strong>同步调用</strong> effect。可以使用它来读取 DOM 布局并同步触发重渲染。</p><p>这个是用在处理DOM的时候，当你的useEffect里面的操作需要处理DOM。并且会改变页面的样式，就需要用这个，否则可能会出现出现闪屏问题</p><p><a href="https://cllxx.cn/2019/07/21/react-xin-te-xing-hooks-zhi-useeffect-he-uselayouteffect-wu/">https://cllxx.cn/2019/07/21/react-xin-te-xing-hooks-zhi-useeffect-he-uselayouteffect-wu/</a></p><blockquote><p>useEffect和useLayoutEffect的异同：</p><ul><li>useLayoutEffect是在虚拟DOM构建完成后立即执行，useEffect是在真实DOM构建完成后立即执行</li></ul><ul><li>useLayoutEffect是同步执行，useEffect是异步执行</li></ul></blockquote><h2 id="7-6-useEffect使用注意点"><a href="#7-6-useEffect使用注意点" class="headerlink" title="7.6 useEffect使用注意点"></a>7.6 useEffect使用注意点</h2><p>useEffect的函数需要返回一个cleanup的清除函数或者undefined。而当我们使用await、async的时候，会默认返回一个Promise，所以我们不能在useEffect函数中使用async</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//错误</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">await</span> <span class="token function">fetchSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">fetchSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="8-其他常用hook"><a href="#8-其他常用hook" class="headerlink" title="8.其他常用hook"></a>8.其他常用hook</h1><h2 id="8-1-函数组件re-render的时机"><a href="#8-1-函数组件re-render的时机" class="headerlink" title="8.1 函数组件re-render的时机"></a>8.1 函数组件re-render的时机</h2><blockquote><ol><li>组件重新被创建</li><li>当前组件state的内存地址发生了变化，无论dom中是否使用了state</li><li>父组件更新，子组件也会自动的更新</li><li>组件更新时，会卸载所有function，并重新创建function (执行函数组件的所有逻辑)</li></ol></blockquote><p>也就是说，在函数组件中，只要父组件或者当前组件的state内存地址发生变化，都会触发当前组件以及当前组件的子组件re-render，无论当前组件是否使用到父组件中的state。</p><p>而在函数组件中，react不再区分mount和update两个状态，这意味着函数组件的每一次调用都会执行其内部的所有逻辑，那么会带来较大的性能损耗。因此useMemo 和useCallback就是解决性能问题的杀手锏。</p><h2 id="8-2-memo-useMemo-useCallback"><a href="#8-2-memo-useMemo-useCallback" class="headerlink" title="8.2 memo\useMemo\useCallback"></a>8.2 memo\useMemo\useCallback</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Child.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Parent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span>useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Parent<span class="token punctuation">:</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span>setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>数量为<span class="token punctuation">:</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>点我加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>Child<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>Parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//案例存在的问题：每点击一次按钮，会重新渲染一次时间，说明父组件更新的时候，子组件也重新渲染了</span></code></pre><h3 id="8-2-1-使用memo高阶函数"><a href="#8-2-1-使用memo高阶函数" class="headerlink" title="8.2.1 使用memo高阶函数"></a>8.2.1 使用memo高阶函数</h3><p><code>React.memo()</code>是一个高阶函数，它与 <a href="https://reactjs.org/docs/react-api.html#reactpurecomponent"><code>React.PureComponent</code></a>类似，是一个函数组件而非一个类。</p><p>React.memo()可接受2个参数，第一个参数为纯函数的组件，第二个参数用于对比props控制是否刷新，与<a href="https://reactjs.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate()</code></a>功能类似</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Child.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span>memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span>count<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span>count<span class="token punctuation">,</span>next<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> prev<span class="token punctuation">.</span>count<span class="token operator">==</span>next<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这边只要父亲传递给孩子的props发生了变化就应该刷新子组件(如果父亲没有给子组件传递props或者父亲给子组件传递的props没有改变，则子组件不应该刷新)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Parent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span>useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Parent<span class="token punctuation">:</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span>setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>数量为<span class="token punctuation">:</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>点我加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>Child count<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span></code></pre><h3 id="8-2-2-useMemo"><a href="#8-2-2-useMemo" class="headerlink" title="8.2.2 useMemo"></a>8.2.2 useMemo</h3><h4 id="a-没有使用useMemo存在的问题"><a href="#a-没有使用useMemo存在的问题" class="headerlink" title="a) 没有使用useMemo存在的问题"></a>a) 没有使用useMemo存在的问题</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Parent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Parent<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>数量为<span class="token punctuation">:</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>button        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        点我加<span class="token number">1</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>Child obj<span class="token operator">=</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Child.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span> obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev<span class="token punctuation">.</span>obj <span class="token operator">==</span> next<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//案例存在的问题：每点击一次按钮，会重新渲染一次时间，但是每一次点击按钮的时候，父组件给子组件传递的都是相同的obj对象，为什么子组件还是会刷新呢?</span><span class="token comment" spellcheck="true">//原因是每一次点击按钮的时候，会重新刷新父组件，父组件中的obj会重新被实例化，所以新实例化的obj和上一次实例化的obj不是同一个对象</span></code></pre><h4 id="b-useMemo-hook"><a href="#b-useMemo-hook" class="headerlink" title="b) useMemo hook"></a>b) useMemo hook</h4><p>useMemo可以用来缓存一些变量，并指定哪些条件变化后重新计算缓存的变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>useMemo第一个参数是一个 factory 函数，该函数的返回结果会通过useMemo缓存下来</p><p>​                  第二个参数是factory函数的依赖(deps)，当依赖(deps)改变时才重新执行 factory 函数，memoizedValue 才会被重新计算</p></blockquote><p>也就是在依赖未改变时（或空数组无依赖时），memoizedValue 总是返回通过useMemo缓存的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Parent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span>useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Parent<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使用useMemo缓存变量值  依赖项没有指定</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>数量为<span class="token punctuation">:</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>button        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        点我加<span class="token number">1</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>Child obj<span class="token operator">=</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span></code></pre><h3 id="8-2-3-useCallback"><a href="#8-2-3-useCallback" class="headerlink" title="8.2.3 useCallback"></a>8.2.3 useCallback</h3><h4 id="a-没有使用useCallback的问题"><a href="#a-没有使用useCallback的问题" class="headerlink" title="a) 没有使用useCallback的问题"></a>a) 没有使用useCallback的问题</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Parent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span>useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Parent<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span>setText<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> changeHandler <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span>React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setText</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>text文本为<span class="token punctuation">:</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Child onChange<span class="token operator">=</span><span class="token punctuation">{</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Child.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span>  onChange<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上面代码中，我们在子组件中修改文本框的值，会触发子组件的onChange，从而触发父组件的changeHandler方法，在父组件中的changeHandler方法中修改了text文本，所以页面上的text值发生了改变。 </span><span class="token comment" spellcheck="true">//但是除了我们发现页面上text文本改变之外，子组件中的时间也发生了改变 (说明每一次子组件输入内容的时候都会触发子组件的重新渲染)</span><span class="token comment" spellcheck="true">//原因是每一次子组件输入内容，父组件的text文本发生变化，造成父组件被重新渲染，从而造成父组件传递给子组件的changeHandler方法(props)发生了变化，从而造成子组件的重新渲染</span></code></pre><h4 id="b-useCallback-hook"><a href="#b-useCallback-hook" class="headerlink" title="b) useCallback   hook"></a>b) useCallback   hook</h4><p>useMemo缓存的是值</p><p>useCallback缓存的是函数。有两个参数，第一个参数是需要缓存的函数，第二个参数是依赖项。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Parent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useState<span class="token punctuation">,</span>useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">"./Child"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Parent<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span>setText<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//使用useCallback缓存函数</span>  <span class="token keyword">const</span> changeHandler <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span>React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">setText</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>text文本为<span class="token punctuation">:</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Child onChange<span class="token operator">=</span><span class="token punctuation">{</span>changeHandler<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span></code></pre><h3 id="8-2-4-useMemo和useCallback的区别和联系"><a href="#8-2-4-useMemo和useCallback的区别和联系" class="headerlink" title="8.2.4 useMemo和useCallback的区别和联系"></a>8.2.4 useMemo和useCallback的区别和联系</h3><p>实际上<code>useCallback</code>是基于<code>useMemo</code>实现的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> callback<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li><code>useMemo</code>是返回<code>callback</code>执行后的结果</li><li><code>useCallback</code> 是直接返回被<code>useMemo</code>修饰的<code>callback</code>函数</li></ol><h2 id="8-3-useReducer和useContext"><a href="#8-3-useReducer和useContext" class="headerlink" title="8.3 useReducer和useContext"></a>8.3 useReducer和useContext</h2><h3 id="8-3-1-useContext"><a href="#8-3-1-useContext" class="headerlink" title="8.3.1 useContext"></a>8.3.1 useContext</h3><blockquote><p>跨级组件通信，实现同一子树下所有节点可统一共享子树根节点的数据</p></blockquote><p>useContext接收一个 context 对象（<code>React.createContext</code> 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;MyContext.Provider&gt;</code> 的 <code>value</code> 决定。</p><p>当组件上层最近的 <code>&lt;MyContext.Provider&gt;</code> 更新时，该 Hook 会触发重渲染，并使用最新传递给 <code>MyContext</code> provider 的 context <code>value</code> 值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>基本用法：</p><pre class=" language-jsx"><code class="language-jsx">#<span class="token number">1</span><span class="token punctuation">.</span>index<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> MyContext <span class="token keyword">from</span> <span class="token string">'./context.js'</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyContext.Provider</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#<span class="token number">2</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>js<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">let</span> context <span class="token operator">=</span> createContext<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> string <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyContext<span class="token punctuation">;</span>#<span class="token number">3</span><span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span>useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyContext <span class="token keyword">from</span> <span class="token string">'../context.js'</span><span class="token keyword">const</span> Parent<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//在子组件中获取根组件暴露的数据</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contextValue<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>text文本为<span class="token punctuation">:</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span></code></pre><h3 id="8-3-2-useReducer"><a href="#8-3-2-useReducer" class="headerlink" title="8.3.2 useReducer"></a>8.3.2 useReducer</h3><h4 id="a-redux介绍"><a href="#a-redux介绍" class="headerlink" title="a) redux介绍"></a>a) redux介绍</h4><p>Redux是SPA单页面应用程序中多个组件之间共享数据的一种方式。</p><p><img src="https://i.loli.net/2020/11/09/Z6bCnEoLaGxBYIK.png" alt="1602462149160.png"></p><pre><code>- store：共享的state数据。- reducers：纯函数，用于修改state，由action触发。- action：一个对象，是 reducers的触发器，通过dispatch来触发，action对象需要有type字段- dispatch：派发器， dispatch函数接受一个action对象作为入参。action对象需要有type字段</code></pre><h4 id="b-useReducer"><a href="#b-useReducer" class="headerlink" title="b) useReducer"></a>b) useReducer</h4><p>useReducer是在函数组件中实现类似 Redux 功能的一个Hook。他接收两个参数，第一个参数是一个recuder(纯函数)，第二个参数是state的初始值。</p><p>他返回一个状态 state和 dispath，state是返回状态中的值，而 dispatch 是一个可以发布事件来更新 state 的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// reducer 纯函数，用于修改state</span><span class="token comment" spellcheck="true">// initialArg 初始化的state状态</span><span class="token comment" spellcheck="true">// init 一个函数用于惰性计算state初始值</span><span class="token comment" spellcheck="true">// state 获取state数据</span><span class="token comment" spellcheck="true">// dispatch 派发器，用于接收一个action来触发reducer，从而修改state</span><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8-3-3-useReducer和useContext-了解"><a href="#8-3-3-useReducer和useContext-了解" class="headerlink" title="8.3.3 useReducer和useContext(了解)"></a>8.3.3 useReducer和useContext(了解)</h3><p>在函数组件中，useReducer和useContext结合使用的时候可以提供类似Vuex那样的全局状态管理</p><p>useContext负责向子孙组件暴露数据</p><p>useReducer提供全局的state、reducers、dispatch等 (useReducer必须要在函数组件中才能使用，所以这边得把代码放到App.tsx中)</p><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span><span class="token punctuation">.</span>index<span class="token punctuation">.</span>tsxReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#<span class="token number">2</span><span class="token punctuation">.</span>App<span class="token punctuation">.</span>tsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext<span class="token punctuation">,</span> useReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./App.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Parent4 <span class="token keyword">from</span> <span class="token string">"./components4/Parent4"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyContext4<span class="token punctuation">,</span> <span class="token punctuation">{</span> ActionType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./components4/MyContext4"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//reducer是一个纯函数，可以将action的变化转换为state的变化</span><span class="token comment" spellcheck="true">//所以reducer纯函数需要接收一个action</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> ActionType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//根据action的type来修改state</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"ADD"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"SUB"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"ADDN"</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> action<span class="token punctuation">.</span>step<span class="token punctuation">.</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span> state <span class="token operator">+</span> num<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//useContext的作用是给子孙组件提供数据</span><span class="token comment" spellcheck="true">//useReducer的作用提供全局的状态管理</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyContext4<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>count<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Parent4<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Parent4<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>MyContext4<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>#<span class="token number">3</span><span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>tsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Child4 <span class="token keyword">from</span> <span class="token string">"./Child4"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyContext4 <span class="token keyword">from</span> <span class="token string">"./MyContext4"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Parent4<span class="token punctuation">:</span> FC <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span>dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clickHandler1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过派发器来接收一个action，从而触发reducer的执行，会根据对应的action执行对应的数据修改逻辑</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"ADD"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clickHandler2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"SUB"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clickHandler3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"ADDN"</span><span class="token punctuation">,</span>      step<span class="token punctuation">:</span> <span class="token punctuation">{</span>        num<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span>Parent组件<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>当前count <span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>clickHandler1<span class="token punctuation">}</span><span class="token operator">></span>点我<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>clickHandler2<span class="token punctuation">}</span><span class="token operator">></span>点我<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>clickHandler3<span class="token punctuation">}</span><span class="token operator">></span>点我<span class="token operator">+</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>Child4<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Child4<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent4<span class="token punctuation">;</span>#<span class="token number">4</span><span class="token punctuation">.</span>Child<span class="token punctuation">.</span>tsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyContext4 <span class="token keyword">from</span> <span class="token string">"./MyContext4"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child4<span class="token punctuation">:</span> FC <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clickHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span><span class="token string">"ADD"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span>Child子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>当前数量<span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>clickHandler<span class="token punctuation">}</span><span class="token operator">></span>点我修改数量<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child4<span class="token punctuation">;</span>#<span class="token number">5</span><span class="token punctuation">.</span>MyContext<span class="token punctuation">.</span>tsx<span class="token comment" spellcheck="true">//创建一个上下文对象，该对象会在useContext中使用到</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> Dispatch<span class="token punctuation">,</span> ReducerAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明Action的泛型</span><span class="token keyword">export</span> type ActionType <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  step<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明Context的泛型</span>type ContextType <span class="token operator">=</span> <span class="token punctuation">[</span>  number<span class="token punctuation">,</span>  Dispatch<span class="token operator">&lt;</span>ActionType<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个context上下文，并导出</span><span class="token keyword">let</span> context <span class="token operator">=</span> createContext<span class="token operator">&lt;</span>ContextType<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> context<span class="token punctuation">;</span></code></pre><p>useReducer和useContext的出现并不是为了取代redux，redux是独立于任何第三方库，redux有优秀的中间件(异步数据流、debug)。当状态比较简单的时候，我们可以使用useReducer和useContext来实现组件之间的数据共享，但是当状态变得特别复杂的时候，建议使用redux。</p><h2 id="8-4-Hook的规则"><a href="#8-4-Hook的规则" class="headerlink" title="8.4 Hook的规则"></a>8.4 Hook的规则</h2><h3 id="8-4-1-只在组件顶层中使用Hook"><a href="#8-4-1-只在组件顶层中使用Hook" class="headerlink" title="8.4.1 只在组件顶层中使用Hook"></a>8.4.1 只在组件顶层中使用Hook</h3><blockquote><p><strong>不要在循环，条件或嵌套函数中调用 Hook，</strong> 确保总是在你的 React 函数的最顶层调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 <code>useState</code> 和 <code>useEffect</code> 调用之间保持 hook 状态的正确。</p></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Yes</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const [count, setCount] = useState(0); //No</span>    <span class="token punctuation">}</span>       <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const [count, setCount] = useState(0); //No</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></code></pre><h3 id="8-4-2-只在React-函数中调用Hook"><a href="#8-4-2-只在React-函数中调用Hook" class="headerlink" title="8.4.2 只在React 函数中调用Hook"></a>8.4.2 只在React 函数中调用Hook</h3><blockquote><p><strong>不要在普通的 JavaScript 函数中调用 Hook。</strong>你可以：</p><ul><li>在 React 的函数组件中调用 Hook</li><li>在自定义 Hook 中调用其他 Hook</li><li>在class组件中不能使用Hook</li></ul><p>遵循此规则，确保组件的状态逻辑在代码中清晰可见。</p></blockquote><h2 id="8-5-Hook参照文章："><a href="#8-5-Hook参照文章：" class="headerlink" title="8.5 Hook参照文章："></a>8.5 Hook参照文章：</h2><ol><li><a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/docs/getting-started.html">React官方文档</a></li><li><a href="https://blog.csdn.net/sinat_17775997/article/details/94453167">useMemo与useCallback使用指南</a></li><li><a href="https://blog.csdn.net/gtLBTNq9mr3/article/details/93984397">useReducerde使用和原理</a></li><li><a href="https://segmentfault.com/a/1190000021133222">五个大型项目实践总结，解密React Hooks最佳实践</a></li><li><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">useEffect完整指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/88135310">一文彻底搞懂 react hooks 的原理和实现</a></li><li><a href="https://www.jianshu.com/p/b9ac8fa849f1">React Hooks的原理</a></li></ol><h1 id="9-React-router"><a href="#9-React-router" class="headerlink" title="9. React-router"></a>9. React-router</h1><h2 id="9-1-前端路由的两种实现方案"><a href="#9-1-前端路由的两种实现方案" class="headerlink" title="9.1 前端路由的两种实现方案"></a>9.1 前端路由的两种实现方案</h2><ol><li><p>hash : hash原本的作用是为一个很长的文档页添加锚点信息，它自带不改变url刷新页面的功能，所以自然而然被用单页面应用程序中了。</p></li><li><p>history : 应该说history是主流的解决方案，浏览器的前进后退用的就是这个，它是window对象下的，以前的history提供的方法只能做页面之间的前进后退，如下：</p><pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>number<span class="token operator">|</span>URL<span class="token punctuation">)</span> 可加载历史列表中的某个具体的页面history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 可加载历史列表中的下一个 URLhistory<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 可加载历史列表中的前一个 URL</code></pre><p>为了在不刷新浏览器的情况下，创建新的浏览记录并插入浏览记录队列中，html5新增了如下方法：</p><pre><code>1. history.pushState(state, title, url)   添加一条历史记录， state用于传递参数，可以为空。title是设置历史记录的标题，可以为空。url是历史记录的URL，不可以为空。2.history.replaceState(state, title, url)将history堆栈中当前的记录替换成这里的url，参数同上。这个特性后来用到了单页面应用中比如：vue-router，react-router-dom里面。</code></pre></li></ol><h2 id="9-2-Reac中的路由"><a href="#9-2-Reac中的路由" class="headerlink" title="9.2 Reac中的路由"></a>9.2 Reac中的路由</h2><p><code>&lt;Router&gt;</code>是React中实现路由最外层的容器，一般情况下我们不再需要直接使用它，而是使用在它基础之上封装的几个适用于不同环境的组件，react-router-dom的Router有四种：</p><table><thead><tr><th>Router</th><th>适用情况</th></tr></thead><tbody><tr><td><a href="https://link.jianshu.com/?t=https://reacttraining.com/react-router/web/api/BrowserRouter">BrowserRouter</a></td><td>react-router-dom扩展，利用HTML5 新增的history API (pushState, replaceState)，是web应用最常用的路由组件</td></tr><tr><td><a href="https://link.jianshu.com/?t=https://reacttraining.com/react-router/web/api/HashRouter">HashRouter</a></td><td>react-router-dom扩展，利用window.location.hash，适用于低版本浏览器或者一些特殊情境</td></tr><tr><td><a href="https://link.jianshu.com/?t=https://reacttraining.com/react-router/web/api/MemoryRouter">MemoryRouter</a></td><td>继承自react-router ，用户在地址栏看不到任何路径变化，一般用在测试或者非浏览器环境开发中</td></tr><tr><td><a href="https://link.jianshu.com/?t=https://reacttraining.com/react-router/web/api/StaticRouter">StaticRouter</a></td><td>继承自react-router，某些页面从渲染出来以后没有多的交互，所以没有状态的变化需要存储，就可以使用静态路由，静态路由适用于服务器端</td></tr></tbody></table><p>一般我们很少会用到MemoryRouter和StaticRouter，在web应用中更多的是用   <code>react-router-dom</code>扩展出来的BrowserRouter和HashRouter，这两个就是我前面提到的前端路由的两种解决办法的各自实现。</p><h2 id="9-3-HashRouter的基本使用"><a href="#9-3-HashRouter的基本使用" class="headerlink" title="9.3 HashRouter的基本使用"></a>9.3 HashRouter的基本使用</h2><pre class=" language-javascript"><code class="language-javascript">yarn add react<span class="token operator">-</span>router react<span class="token operator">-</span>router<span class="token operator">-</span>dom @types<span class="token operator">/</span>react<span class="token operator">-</span>router<span class="token operator">-</span>dom#<span class="token number">1</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">// 1. 导入包</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.jsx'</span><span class="token comment" spellcheck="true">// 使用 render 函数渲染 虚拟DOM</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#<span class="token number">2</span><span class="token punctuation">.</span>App<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// HashRouter 表示一个路由的跟容器，所有的路由相关的东西，都要包裹在 HashRouter 里面</span><span class="token comment" spellcheck="true">// Route 表示一个路由规则， 在 Route 上有两个比较重要的属性：path   component</span><span class="token comment" spellcheck="true">// Link 表示一个路由的链接 ，就好比 vue 中的 &lt;router-link to="">&lt;/router-link></span><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./components6/Home'</span><span class="token keyword">import</span> Movie <span class="token keyword">from</span> <span class="token string">'./components6/Movie'</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'./components6/About'</span><span class="token keyword">const</span> App<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当 使用 HashRouter 把 App 根组件的元素包裹起来之后，网站就已经启用路由了</span>  <span class="token comment" spellcheck="true">// 在一个网站中，只需要使用 唯一的一次 &lt;HashRouter>&lt;/HashRouter> 就行了</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>HashRouter<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>这是网站的APP根组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/movie/top250/10"</span><span class="token operator">></span>电影<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>      <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* Route 创建的标签，就是路由规则，其中 path 表示要匹配的路由，component 表示要展示的组件 */</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 在 vue 中有个 router-view 的路由标签专门用来放置匹配到的路由组件的，但是在 react-router 中并没有类似于这样的标签，而是直接把 Route 标签当作的坑（占位符） */</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* Route 具有两种身份：1. 它是一个路由匹配规则； 2. 它是一个占位符，表示将来匹配到的组件都放到这个位置， 如果想让路由规则进行精确匹配，可以为 Route添加 exact 属性，表示启用精确匹配模式 */</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 注意：默认情况下，路由中的规则是模糊匹配的，如果路由可以部分匹配成功，就会展示这个路由对应的组件 */</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 如果要匹配参数，可以在匹配规则中使用 : 修饰符，表示这个位置匹配到的是参数 */</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/movie/:type/:id"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Movie<span class="token punctuation">}</span> exact<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>HashRouter<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>#<span class="token number">3</span><span class="token punctuation">.</span>components<span class="token operator">/</span>Home<span class="token punctuation">.</span>jsx    <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Home<span class="token punctuation">:</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>主页<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span>#<span class="token number">4</span><span class="token punctuation">.</span> components<span class="token operator">/</span>Movie<span class="token punctuation">.</span>jsx <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouteComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span>type ParamsProps <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> undefined<span class="token punctuation">,</span>  id<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> undefined<span class="token punctuation">}</span>type IProps <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> Movie<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>IProps <span class="token operator">&amp;</span> RouteComponentProps<span class="token operator">&lt;</span>ParamsProps<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>电影<span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>type<span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Movie<span class="token punctuation">;</span>#<span class="token number">5</span><span class="token punctuation">.</span> components<span class="token operator">/</span>About<span class="token punctuation">.</span>jsx<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> About<span class="token punctuation">:</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>关于我们<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> About<span class="token punctuation">;</span></code></pre><h2 id="9-4-匹配规则"><a href="#9-4-匹配规则" class="headerlink" title="9.4 匹配规则"></a>9.4 匹配规则</h2><p><strong>默认：</strong></p><table><thead><tr><th>路径</th><th>location.pathname</th><th>是否匹配</th></tr></thead><tbody><tr><td>/one</td><td>/one</td><td>是</td></tr><tr><td>/one</td><td>/one/</td><td>是</td></tr><tr><td>/one</td><td>/one/111</td><td>是</td></tr><tr><td>/one</td><td>/one/aaa/bbb</td><td>是</td></tr></tbody></table><p><strong>exact配置：</strong>exact属性为true时路径中的hash值必须和path完全一致才渲染对应的组件，如果为false则’/‘也可以匹配’/xxx’</p><table><thead><tr><th>路径</th><th>location.pathname</th><th>exact</th><th>是否匹配</th></tr></thead><tbody><tr><td>/one</td><td>/one/two</td><td>true</td><td>否</td></tr><tr><td>/one</td><td>/one/two</td><td>false</td><td>是</td></tr></tbody></table><p><strong>strict配置：</strong>strict属性主要就是匹配反斜杠，规定是否匹配末尾包含反斜杠的路径，如果strict为true，则如果path中不包含反斜杠结尾，则他也不能匹配包含反斜杠结尾的路径</p><table><thead><tr><th>路径</th><th>location.pathname</th><th>strict</th><th>是否匹配</th></tr></thead><tbody><tr><td>/one/</td><td>/one</td><td>true</td><td>否</td></tr><tr><td>/one/</td><td>/one/</td><td>true</td><td>是</td></tr><tr><td>/one/</td><td>/one/two</td><td>true</td><td>是</td></tr></tbody></table><h2 id="9-5-Switch和Redirect"><a href="#9-5-Switch和Redirect" class="headerlink" title="9.5 Switch和Redirect"></a>9.5 Switch和Redirect</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>HashRouter<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>这是网站的APP根组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/movie/top250/10"</span><span class="token operator">></span>电影<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>      <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*&lt;/Switch>       Switch表示路由互斥，如果没有Switch，会根据路由找到所有匹配的组件显示       比如http://localhost:3000/#/user  会找到/、/user所匹配的路由(下面home没有找到是因为精确匹配了)    */</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>Switch<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*        path:/ 表示访问根路径的情况下默认载入home组件        exact精确匹配，为了给其他组件一个机会获取到url改变        strict 在确定路径是否与当前URL匹配时，将考虑路径后的斜线；       */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/movie/:type/:id"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Movie<span class="token punctuation">}</span> exact<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*没有匹配到路径的时候重定向到根路径*/</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>HashRouter<span class="token operator">></span><span class="token punctuation">)</span></code></pre><h2 id="9-6-React中的编程式导航和路由传参"><a href="#9-6-React中的编程式导航和路由传参" class="headerlink" title="9.6 React中的编程式导航和路由传参"></a>9.6 React中的编程式导航和路由传参</h2><h3 id="9-6-1-withRouter的使用"><a href="#9-6-1-withRouter的使用" class="headerlink" title="9.6.1 withRouter的使用"></a>9.6.1 withRouter的使用</h3><p>withRouter可以包装任何自定义组件，将react-router 的 history,location,match 三个对象传入。 </p><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/Home"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><blockquote><p> 1.只有包裹在Route组件里的才能使用<code>props.location</code>，<br> 2.假如有个需求，是面包屑或者导航组件里需要拿到<code>props.location</code>（导航组件或者面包屑一般不会包裹在<code>Route</code>里），那么直接这么写显然就不行了。这个时候<code>withRouter</code>修饰一下，就可以这么写了。</p></blockquote><h3 id="9-6-2-使用withRouter跳转页面"><a href="#9-6-2-使用withRouter跳转页面" class="headerlink" title="9.6.2 使用withRouter跳转页面"></a>9.6.2 使用withRouter跳转页面</h3><blockquote><p>只有在 <route> 包裹的组件中才能在 this.props 属性中找到 history 对象。但有些情况下我们就是希望在一个没被 <route> 包裹的组件中用到 history 对象，我们可以这样用</route></route></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Header.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> FC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouteComponentProps<span class="token punctuation">,</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">const</span> Header<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>RouteComponentProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> goAbout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">"/about"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    网页头    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>goAbout<span class="token punctuation">}</span><span class="token operator">></span>点我跳转About页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="9-6-3-路由传参"><a href="#9-6-3-路由传参" class="headerlink" title="9.6.3 路由传参"></a>9.6.3 路由传参</h3><p>TS 路由接口：RouteComponentProps</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> RouteComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">RouterInfo</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> RouteComponentProps<span class="token operator">&lt;</span>RouterInfo<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">></span>Page productDetail<span class="token operator">/</span>index <span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="a-params方式传参"><a href="#a-params方式传参" class="headerlink" title="a) params方式传参"></a>a) params方式传参</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/path/:name'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Path<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/path/2"</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">"/path/"</span> <span class="token operator">+</span> name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取参数用<span class="token punctuation">:</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name</code></pre><p>优势 ： 刷新地址栏，参数依然存在<br>缺点  :   只能传字符串，并且如果传的值太多的话，url会变得长而丑陋。</p><h4 id="b-search方式传参"><a href="#b-search方式传参" class="headerlink" title="b) search方式传参"></a>b) search方式传参</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/web/departManange '</span> component<span class="token operator">=</span><span class="token punctuation">{</span>DepartManange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>link to<span class="token operator">=</span><span class="token string">"web/departManange?tenantId=12121212"</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">"/web/departManange"</span><span class="token punctuation">,</span>search<span class="token punctuation">:</span> <span class="token string">'tenantId=12121212'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>读取参数用<span class="token punctuation">:</span> props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token comment" spellcheck="true">//search参数的解析</span>yarn add url <span class="token operator">-</span>S<span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">'url'</span><span class="token keyword">const</span> httpUrl <span class="token operator">=</span> props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>httpUrl<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span>tenantId<span class="token punctuation">;</span></code></pre><p>优势 ： 刷新地址栏，参数依然存在</p><p>缺点  :   只能传字符串，并且如果传的值太多的话，url会变得长而丑陋。</p><h4 id="c-state方式传参"><a href="#c-state方式传参" class="headerlink" title="c) state方式传参"></a>c) state方式传参</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/sort '</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Sort<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pathname <span class="token punctuation">:</span> <span class="token string">'/sort'</span> <span class="token punctuation">,</span> state <span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span> props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">"/sort "</span><span class="token punctuation">,</span>state <span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取参数用<span class="token punctuation">:</span> props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name </code></pre><p>优势：传参优雅，传递参数可传对象，state传的参数是加密的<br>缺点：刷新地址栏，参数丢失</p><h2 id="9-7-组件懒加载和基于路由的代码分割"><a href="#9-7-组件懒加载和基于路由的代码分割" class="headerlink" title="9.7 组件懒加载和基于路由的代码分割"></a>9.7 组件懒加载和基于路由的代码分割</h2><p><code>React.lazy</code> 函数能让你像渲染常规组件一样处理动态引入（的组件）。</p><p><code>React.lazy</code> 接受一个函数，这个函数需要动态调用 <code>import()</code>。它必须返回一个 <code>Promise</code>，该 Promise 需要 resolve 一个 <code>defalut</code> export 的 React 组件。</p><p>然后应在 <code>Suspense</code> 组件中渲染 lazy 组件(Suspense 就是实现所谓的延迟加载效果)，如此使得我们可以使用在等待加载 lazy 组件时做优雅降级（如 loading 指示器等）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense<span class="token punctuation">,</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./routes/Home'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./routes/About'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Router<span class="token operator">></span>    <span class="token comment" spellcheck="true">//fallback 属性接受任何在组件加载过程中你想展示的 React 元素</span>    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Switch<span class="token operator">></span>        <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="10-高阶组件"><a href="#10-高阶组件" class="headerlink" title="10.高阶组件"></a>10.高阶组件</h1><h2 id="10-1-高阶函数"><a href="#10-1-高阶函数" class="headerlink" title="10.1 高阶函数"></a>10.1 高阶函数</h2><p><strong>高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回</strong></p><ul><li><p>举个栗子:</p><ul><li><p>接收函数作为参数</p><pre><code>function a(x) {  x();}function b() {  alert('hello');}a(b);</code></pre></li><li><p>将函数作为输出返回</p><pre><code>function a() {  function b() {    alert('hello');  }  return b;}a()();</code></pre></li></ul></li><li><p>以上函数a就是一个高阶函数, 用法非常简单, 那么实际开发中又有哪些是高阶函数呢？</p><ul><li>Array 的 map 、reduce 、filter 等方法</li><li>Object 的 keys 、values 等方法</li></ul></li></ul><h2 id="10-2-高阶组件"><a href="#10-2-高阶组件" class="headerlink" title="10.2 高阶组件"></a>10.2 高阶组件</h2><ul><li>概念：<strong>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件</strong></li></ul><blockquote><p>高阶组件可以看做是装饰器模式(Decorator Pattern)在React的实现。即允许向一个现有的对象添加新的功能，同时又不改变其结构，属于包装模式(Wrapper Pattern)的一种。最大的特点就是重用组件逻辑</p></blockquote><h3 id="10-2-1-高阶组件的实现方式-属性代理"><a href="#10-2-1-高阶组件的实现方式-属性代理" class="headerlink" title="10.2.1 高阶组件的实现方式-属性代理"></a>10.2.1 高阶组件的实现方式-属性代理</h3><p>属性代理(Props Proxy)：<code>HOC</code>是包裹在普通组件外面的一层高阶函数，任何要传入普通组件内的<code>props</code> 或者 <code>state</code> 首先都要经过 <code>HOC</code>。</p><p><code>props</code>和 <code>state</code>等属性原本是要流向 目标组件的腰包的，但是却被 雁过拔毛的<code>HOC</code>拦路打劫，那么最终这些 <code>props</code>和 <code>states</code>数据到底还能不能再到达 目标组件，或者哪些能到达以及到达多少就全由 <code>HOC</code>说了算了，也就是说，<code>HOC</code>拥有了提前对这些属性进行修改的能力。</p><p>属性代理的作用：</p><ul><li>更改prop</li><li>通过refs获取组件实例(类组件)</li><li>抽象state</li><li>把WrappedComponent与其他elements包装在一起</li></ul><h4 id="a-属性代理-用其他元素包装组件"><a href="#a-属性代理-用其他元素包装组件" class="headerlink" title="a) 属性代理-用其他元素包装组件"></a>a) 属性代理-用其他元素包装组件</h4><p>为了封装样式、布局或别的目的，可以用其它组件和元素包裹 WrappedComponent。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//被包裹组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> HocComponent <span class="token keyword">from</span> <span class="token string">'../HOC/HocComponent'</span><span class="token keyword">const</span> MyComponent<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>被包裹组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">HocComponent</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//高阶组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">HocComponent</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> NewComponent<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"red"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="b-属性代理-更改props"><a href="#b-属性代理-更改props" class="headerlink" title="b) 属性代理-更改props"></a>b) 属性代理-更改props</h4><p>在高阶组件中添加新的 props，可以在 WrappedComponent 中通过 this.props.name访问到。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//MyComponent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> HocComponent <span class="token keyword">from</span> <span class="token string">'../HOC/HocComponent'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PrametersType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../HOC/Type'</span><span class="token keyword">const</span> MyComponent<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span>PrametersType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Hello React <span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">HocComponent</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HocComponent.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PrametersType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Type'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">HocComponent</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span>PrametersType<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> NewComponent<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span>PrametersType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>WrappedComponent<span class="token operator">></span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//Type.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> type PrametersType <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">}</span></code></pre><h4 id="c-属性代理-抽取公共state"><a href="#c-属性代理-抽取公共state" class="headerlink" title="c) 属性代理-抽取公共state"></a>c) 属性代理-抽取公共state</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//MyInput.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> MyInput<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyInput<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//MyTextArea.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> MyTextArea<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLTextAreaElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>textarea value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyTextArea<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index.tsx</span><span class="token keyword">import</span> MyInput <span class="token keyword">from</span> <span class="token string">'./components7/MyInput'</span><span class="token keyword">import</span> MyTextArea <span class="token keyword">from</span> <span class="token string">'./components7/MyTextArea'</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>MyInput<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>MyInput<span class="token operator">></span>  <span class="token operator">&lt;</span>MyTextArea<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>MyTextArea<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//这边代码存在的问题：MyInput和MyTextArea组件都有自己的state和change方法，代码重用性太大</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//MyInput.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>TextPrametersType<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../HOC/Type'</span><span class="token keyword">import</span> HocTextComponent <span class="token keyword">from</span> <span class="token string">'../HOC/HocTextComponent'</span><span class="token keyword">const</span> MyInput<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span>TextPrametersType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>change<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">HocTextComponent</span><span class="token punctuation">(</span>MyInput<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//MyTextArea.tsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>TextPrametersType<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../HOC/Type'</span><span class="token keyword">import</span> HocTextComponent <span class="token keyword">from</span> <span class="token string">'../HOC/HocTextComponent'</span><span class="token keyword">const</span> MyTextArea<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span>TextPrametersType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>textarea value<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>change<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyTextArea<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HocTextComponent.tsx      </span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> SFC<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> TextPrametersType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Type'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">HocTextComponent</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">:</span> SFC<span class="token operator">&lt;</span>TextPrametersType<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> NewComponent<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span>TextPrametersType<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">|</span>HTMLTextAreaElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> newProps <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> value<span class="token punctuation">,</span>      change<span class="token punctuation">:</span> handleChange    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>newProps<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>WrappedComponent<span class="token operator">></span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Type.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> type TextPrametersType <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">,</span>  change<span class="token operator">?</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span></code></pre><h3 id="10-2-2-高阶组件的实现方式-反向继承"><a href="#10-2-2-高阶组件的实现方式-反向继承" class="headerlink" title="10.2.2 高阶组件的实现方式-反向继承"></a>10.2.2 高阶组件的实现方式-反向继承</h3><p>反向继承( Inheritance Inversion )：返回的 HOC 类（Enhancer）继承了 WrappedComponent。之所以被称为 Inheritance Inversion 是因为 WrappedComponent 被 Enhancer 继承了，而不是 WrappedComponent 继承了 Enhancer。在这种方式中，它们的关系看上去被反转（inverse）了。</p><p>通过继承WrappedComponent，除了一些静态方法，包括生命周期，state，各种function，我们都可以得到。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">iiHOC</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Enhancer</span> <span class="token keyword">extends</span> <span class="token class-name">WrappedComponent</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>反向继承的作用：</p><ul><li>渲染劫持</li><li>操作state</li></ul><h4 id="a-反向继承-渲染劫持"><a href="#a-反向继承-渲染劫持" class="headerlink" title="a) 反向继承-渲染劫持"></a>a) 反向继承-渲染劫持</h4><p>之所以被称为渲染劫持是因为 HOC 控制着 WrappedComponent 的渲染输出，可以用它做各种各样的事。通过渲染劫持可以：</p><ul><li>在由 render输出的任何 React 元素中读取、添加、编辑、删除 props</li><li>读取和修改由 render 输出的 React 元素树</li><li>有条件地渲染元素树</li><li>把样式包裹进元素树（就像在 Props Proxy 中的那样）</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.svg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>p name<span class="token operator">=</span><span class="token string">"pp"</span><span class="token operator">></span>被包裹组件<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">iiHOC</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Enhancer</span> <span class="token keyword">extends</span> <span class="token class-name">WrappedComponent</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//super.render() 调用父类的渲染方法  获取到父类的渲染结果</span>      <span class="token keyword">const</span> elementsTree <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//在父亲的渲染结果上新增一个属性</span>      <span class="token keyword">let</span> newProps <span class="token operator">=</span> <span class="token punctuation">{</span> style<span class="token punctuation">:</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"red"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//elementsTree as ReactElement 类型推导</span>      <span class="token keyword">const</span> props <span class="token operator">=</span> elementsTree <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>elementsTree <span class="token keyword">as</span> ReactElement<span class="token punctuation">)</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>      <span class="token keyword">const</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> newElement <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>        elementsTree <span class="token keyword">as</span> ReactElement<span class="token punctuation">,</span>        p<span class="token punctuation">,</span>        props<span class="token punctuation">.</span>children      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//返回新的页面</span>      <span class="token keyword">return</span> newElement<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> NewComponent <span class="token operator">=</span> <span class="token function">iiHOC</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>NewComponent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>NewComponent<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><h4 id="b-反向继承-修改state"><a href="#b-反向继承-修改state" class="headerlink" title="b) 反向继承-修改state"></a>b) 反向继承-修改state</h4><p>HOC 可以读取、编辑和删除 WrappedComponent 实例的 state，如果需要，也可以给它添加更多的 state。但是这会搞乱 WrappedComponent 的 state，可能会导致破坏某些东西，通常不建议使用高阶组件修改添加state。</p><p>下面通过访问 WrappedComponent 的 props 和 state 来做测试。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IIHOCDEBUGGER</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ComponentClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">II</span> <span class="token keyword">extends</span> <span class="token class-name">WrappedComponent</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>HOC Debugger Component<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span>Props<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span>State<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span>          <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="11-安装-React-Developer-Tools-调试工具"><a href="#11-安装-React-Developer-Tools-调试工具" class="headerlink" title="11.安装 React Developer Tools 调试工具"></a>11.安装 React Developer Tools 调试工具</h1><p><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN">React Developer Tools - Chrome 扩展下载安装地址</a></p><h1 id="12-相关文章"><a href="#12-相关文章" class="headerlink" title="12. 相关文章"></a>12. 相关文章</h1><ul><li><a href="https://mp.weixin.qq.com/s/gV-w_rRfdBVAqsOpBGZaVw">2018 年，React 将独占前端框架鳌头？</a></li><li><a href="https://mp.weixin.qq.com/s/0wXWqKIigaKzMSfy4vJMVw">前端框架三巨头年度走势对比：Vue 增长率最高</a></li></ul><ul><li><a href="http://www.cnblogs.com/tim100/p/6050514.html">React数据流和组件间的沟通总结</a></li><li><a href="https://segmentfault.com/q/1010000005876655/a-1020000005876751">单向数据流和双向绑定各有什么优缺点？</a></li><li><a href="https://www.zhihu.com/question/29504639?sort=created">怎么更好的理解虚拟DOM?</a></li><li><a href="http://www.css88.com/react/index.html">React中文文档 - 版本较低</a></li><li><a href="http://blog.csdn.net/yczz/article/details/49886061">React 源码剖析系列 － 不可思议的 react diff</a></li><li><a href="http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&amp;isappinstalled=0">深入浅出React（四）：虚拟DOM Diff算法解析</a></li><li><a href="http://www.cocoachina.com/webapp/20150721/12692.html">一看就懂的ReactJs入门教程（精华版）</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html">CSS Modules 用法教程</a></li><li><a href="http://blog.csdn.net/itzhongzi/article/details/66045880">将MarkDown转换为HTML页面</a></li><li><a href="https://jingyan.baidu.com/article/0320e2c1c9cf0e1b87507b26.html">win7命令行 端口占用 查询进程号 杀进程</a></li><li><a href="https://facebook.github.io/react/docs/typechecking-with-proptypes.html">类型校验</a></li></ul><ul><li><a href="https://reactjs.org/docs/animation.html#high-level-api-reactcsstransitiongroup">Animation Add-Ons</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript的基本使用</title>
      <link href="2020/01/30/typescript/"/>
      <url>2020/01/30/typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="1-1-TS简介"><a href="#1-1-TS简介" class="headerlink" title="1.1 TS简介"></a>1.1 TS简介</h2><p>TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。</p><p>TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。</p><p>和 JavaScript 弱类型不同，TypeScript 这种强类型语言最大的优势在于静态类型检查，可以在代码开发阶段就预知一些低级错误的发生。</p><ul><li>一种类似于 JavaScript 的语言，在 JavaScript 的基础之上增加了类型，同时增强了 JavaScript 部分语法功能</li><li>遵循 EcmaScript 6 标准规范</li><li>由微软开发</li><li>Angular 2 框架采用 TypeScript 编写</li><li>背后有微软和谷歌两大公司的支持</li><li>TypeScript 可以编译成 JavaScript 从而在支持 JavaScript 的环境中运行</li><li>TypeScript 和 JavaScript 的关系就好比 less 和 css 的关系</li></ul><p>TypeScript 中文网     <a href="https://www.tslang.cn/">https://www.tslang.cn/</a></p><p>在线编译环境              <a href="https://www.typescriptlang.org/play/index.html">https://www.typescriptlang.org/play/index.html</a></p><h2 id="1-2-TS环境搭建"><a href="#1-2-TS环境搭建" class="headerlink" title="1.2 TS环境搭建"></a>1.2 TS环境搭建</h2><ol><li>打开命令行，键入<code>npm i -g typescript</code> 全局安装TS</li><li>继续在命令行环境下键入 <code>tsc -init</code> 进行初始化，<br>你会发现根目录下多了 tsconfig.json 的文件，记录了编译成JS的选项</li><li>创建ts文件</li><li>打开VSCode进入该目录，按下 Ctrl+shift+B 快捷键会进行编译，初次编译会选择编译模式</li><li>输入node命令运行js代码</li></ol><h2 id="1-3-变量声明"><a href="#1-3-变量声明" class="headerlink" title="1.3 变量声明"></a>1.3 变量声明</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">var</span><span class="token operator">-</span> 作用域 <span class="token punctuation">:</span> 全局作用域、函数作用域<span class="token operator">-</span> 重复声明<span class="token operator">-</span> 变量提升<span class="token keyword">let</span><span class="token operator">-</span> 块级作用域<span class="token operator">-</span> 在同一个块中不能重复声明<span class="token keyword">const</span><span class="token operator">-</span> 声明同时必须赋值<span class="token operator">-</span> 一旦声明不可改变（对象可以修改）<span class="token operator">-</span> 块级作用域</code></pre><h2 id="1-4-基本数据类型"><a href="#1-4-基本数据类型" class="headerlink" title="1.4 基本数据类型"></a>1.4 基本数据类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//字符串</span><span class="token keyword">var</span> uname<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span><span class="token keyword">let</span> nickname<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my nickname is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> nickname <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.I'll be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> age <span class="token operator">+</span> <span class="token number">1</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.`</span></span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//数组</span><span class="token comment" spellcheck="true">//TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种方式是使用数组泛型，Array&lt;元素类型>：</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ts的数组只能存放单一数据类型的元素，元组则可以很好的解决此问题。</span><span class="token comment" spellcheck="true">//元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span><span class="token comment" spellcheck="true">// Declare a tuple type</span><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Initialize it</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// Initialize it incorrectly</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//object类型</span><span class="token operator">-</span> 允许赋任意值<span class="token operator">-</span> 但是不能调用任意方法，即便它真的有<span class="token keyword">let</span> foo<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//知道即可，用的很少，没有类型校验和语法提示</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Any</span><span class="token comment" spellcheck="true">//有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</span><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">"maybe a string instead"</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, definitely a boolean</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Void 类型</span><span class="token comment" spellcheck="true">//void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</span><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"This is my warning message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined：</span><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//Null 和 Undefined</span><span class="token comment" spellcheck="true">// Not much else we can assign to these variables!</span><span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//never    </span>never 是其它类型（包括 <span class="token keyword">null</span> 和 undefined）的子类型，代表从不会出现的值。<span class="token keyword">let</span> x<span class="token punctuation">:</span> never<span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行错误，数字类型不能转为 never 类型</span>x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行正确，never 类型可以赋值给 never类型</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行正确，never 类型可以赋值给 数字类型</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回值为 never 的函数可以是抛出异常的情况</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//类型推断</span><span class="token comment" spellcheck="true">// 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span><span class="token comment" spellcheck="true">// 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span><span class="token comment" spellcheck="true">// 类型断言有两种形式。 其一是“尖括号”语法：</span><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//另一个为as语法：</span><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//枚举类型</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Blue<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 2</span></code></pre><h2 id="1-5-解构赋值"><a href="#1-5-解构赋值" class="headerlink" title="1.5 解构赋值"></a>1.5 解构赋值</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//数组解构</span><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 2</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//上面的写法等价于：</span>first <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>second <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//利用解构赋值交换变量：</span><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>second<span class="token punctuation">,</span> first<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//函数参数解构：</span><span class="token comment" spellcheck="true">//函数参数解构：</span><span class="token keyword">function</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//解构剩余参数：</span><span class="token keyword">let</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 3, 4]</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//也可以忽略其它参数：</span><span class="token keyword">let</span> <span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 1</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//或者跳过解构：</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token punctuation">,</span> fourth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//对象解构</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token string">"bar"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//let { a, b } = o;</span><span class="token comment" spellcheck="true">//let {a, b}: {a: string, b: number} = o;</span><span class="token comment" spellcheck="true">//你可以在对象里使用 ... 语法创建剩余变量：</span><span class="token keyword">let</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>passthrough <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> passthrough<span class="token punctuation">.</span>b <span class="token operator">+</span> passthrough<span class="token punctuation">.</span>c<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性解构重命名</span><span class="token comment" spellcheck="true">//你也可以给属性以不同的名字：</span><span class="token keyword">let</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> newName1<span class="token punctuation">,</span> b<span class="token punctuation">:</span> newName2 <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span></code></pre><h2 id="1-6-展开操作符-…"><a href="#1-6-展开操作符-…" class="headerlink" title="1.6 展开操作符 (…)"></a>1.6 展开操作符 (…)</h2><ul><li>展开数组</li><li>展开对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span>obj3<span class="token punctuation">)</span></code></pre><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//函数参数</span><span class="token comment" spellcheck="true">//参数及返回值类型</span><span class="token comment" spellcheck="true">//function 函数名字(参数1,参数2,参数3):函数返回值{函数体}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//可选参数</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//默认参数</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//剩余参数</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> ret<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span>    args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        ret <span class="token operator">+</span><span class="token operator">=</span> item    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//箭头函数</span><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y</code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span><span class="token comment" spellcheck="true">//每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span><span class="token comment" spellcheck="true">//参数类型不同：</span><span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数数量不同：</span><span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>n1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数类型顺序不同：</span><span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>n1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>s1<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>n<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span></code></pre><h2 id="1-8-联合类型"><a href="#1-8-联合类型" class="headerlink" title="1.8 联合类型"></a>1.8 联合类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</span><span class="token keyword">var</span> val<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token operator">|</span><span class="token keyword">number</span> val <span class="token operator">=</span> <span class="token number">12</span> val <span class="token operator">=</span> <span class="token string">"Runoob"</span> <span class="token keyword">var</span> arr<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> i<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Runoob"</span><span class="token punctuation">,</span><span class="token string">"Google"</span><span class="token punctuation">,</span><span class="token string">"Taobao"</span><span class="token punctuation">]</span> </code></pre><h2 id="1-9-类"><a href="#1-9-类" class="headerlink" title="1.9 类"></a>1.9 类</h2><h3 id="1-9-1-类的基本使用"><a href="#1-9-1-类的基本使用" class="headerlink" title="1.9.1 类的基本使用"></a>1.9.1 类的基本使用</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//基本示例</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> zs<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-8-2-super关键字的使用"><a href="#1-8-2-super关键字的使用" class="headerlink" title="1.8.2 super关键字的使用"></a>1.8.2 super关键字的使用</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//继承</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Animal moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof! Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</span><span class="token comment" spellcheck="true">//因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//下面是一个更复杂的例子：</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Slithering..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Galloping..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> sam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">"Sammy the Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">"Tommy the Palomino"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sam<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</span><span class="token comment" spellcheck="true">//这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：</span>Slithering<span class="token operator">...</span>Sammy the Python moved 5m<span class="token punctuation">.</span>Galloping<span class="token operator">...</span>Tommy the Palomino moved 34m<span class="token punctuation">.</span></code></pre><h3 id="1-9-3-成员修饰符"><a href="#1-9-3-成员修饰符" class="headerlink" title="1.9.3 成员修饰符"></a>1.9.3 成员修饰符</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//public 公共的</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//private 私有的</span><span class="token operator">-</span> 不能被外部访问，只能在类的内部访问使用<span class="token operator">-</span> 私有成员不会被继承<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> type<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'human'</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//protected 受保护的</span><span class="token operator">-</span> 和 <span class="token keyword">private</span> 类似，但是可以被继承<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Howard"</span><span class="token punctuation">,</span> <span class="token string">"Sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span><span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误</span><span class="token comment" spellcheck="true">//注意，我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为Employee是由 Person派生而来的。</span></code></pre><h3 id="1-9-4-getter和setter"><a href="#1-9-4-getter和setter" class="headerlink" title="1.9.4 getter和setter"></a>1.9.4 getter和setter</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> _name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hi, my name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-9-5-静态成员"><a href="#1-9-5-静态成员" class="headerlink" title="1.9.5 静态成员"></a>1.9.5 静态成员</h3><ul><li>不需要实例化访问的成员称之为静态成员，即只能被类访问的成员</li><li><code>static</code> 关键字</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">static</span> country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//京塔方法</span>    <span class="token keyword">static</span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>country<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//静态变量，直接通过类型来访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>country<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//错误</span></code></pre><h2 id="1-10-接口"><a href="#1-10-接口" class="headerlink" title="1.10 接口"></a>1.10 接口</h2><p>在面向对象编程中，接口是一种规范的定义，它定义了行为和动作规范，起到一种限制和规范的作用。<br>接口不关心状态数据，也不关心方法的实现细节，它只规定了一些属性和方法，而实现接口的类必须提供具体的信息。</p><h3 id="1-10-1-接口对类的规范"><a href="#1-10-1-接口对类的规范" class="headerlink" title="1.10.1 接口对类的规范"></a>1.10.1 接口对类的规范</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//定义一个人的接口</span><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//让老师类实现Human接口，老师类实现接口的时候必须提供接口的具体信息</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"老师"</span><span class="token punctuation">;</span>    age <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"老师说"</span><span class="token operator">+</span>word<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//让学生类实现Human接口，学生类实现接口的时候必须提供接口的具体信息</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"学生"</span><span class="token punctuation">;</span>    age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"学生说"</span><span class="token operator">+</span>word<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-10-2-接口对对象的规范"><a href="#1-10-2-接口对对象的规范" class="headerlink" title="1.10.2 接口对对象的规范"></a>1.10.2 接口对对象的规范</h3><p>TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    head<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    arm<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    shape<span class="token punctuation">:</span> Shape<span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    shape<span class="token punctuation">:</span> <span class="token punctuation">{</span>        head<span class="token punctuation">:</span> <span class="token string">'head'</span><span class="token punctuation">,</span>        arm<span class="token punctuation">:</span> <span class="token string">'arm'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>jack<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span></code></pre><h3 id="1-10-3-接口可选属性"><a href="#1-10-3-接口可选属性" class="headerlink" title="1.10.3 接口可选属性"></a>1.10.3 接口可选属性</h3><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    gender<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    gender<span class="token punctuation">:</span> <span class="token string">'Male'</span>    <span class="token comment" spellcheck="true">// 可以不赋值 age 属性，因为是可选的</span><span class="token punctuation">}</span></code></pre><h3 id="1-10-4-接口只读属性"><a href="#1-10-4-接口只读属性" class="headerlink" title="1.10.4 接口只读属性"></a>1.10.4 接口只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>来指定只读属性:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">}</span>jack<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Ivan'</span> <span class="token comment" spellcheck="true">// 报错: name 是只读的</span></code></pre><p><code>readonly</code> vs <code>const</code></p><ul><li>常量使用 const</li><li>对象属性使用 readonly</li></ul><h3 id="1-10-5-函数接口"><a href="#1-10-5-函数接口" class="headerlink" title="1.10.5 函数接口"></a>1.10.5 函数接口</h3><p>因为函数也是对象，所以我们也可以通过接口来对函数做“规定”。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>a<span class="token punctuation">:</span> number<span class="token punctuation">,</span> b<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> add<span class="token punctuation">:</span> Fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> number<span class="token punctuation">,</span> b<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="1-10-6-接口继承"><a href="#1-10-6-接口继承" class="headerlink" title="1.10.6 接口继承"></a>1.10.6 接口继承</h3><p>就像 ES6 的 class 一样，接口也可以做继承操作，效果就是会继承父接口的“规定”。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Human <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'move'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-11-命名空间"><a href="#1-11-命名空间" class="headerlink" title="1.11 命名空间"></a>1.11 命名空间</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//命名空间就是内部模块，目的就是解决重名问题。</span><span class="token comment" spellcheck="true">//a.ts  声明命名空间</span><span class="token comment" spellcheck="true">//TypeScript 的命名空间只对外暴露需要在外部访问的对象，命名空间内的对象通过 export 关键字对外暴露</span>namespace Utils <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>      age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//my.ts  使用命名空间</span><span class="token comment" spellcheck="true">// reference 引用命名空间(可以加也可以不加)</span><span class="token comment" spellcheck="true">/// &lt;reference path="a.ts" /></span><span class="token keyword">const</span> me<span class="token punctuation">:</span> Utils<span class="token punctuation">.</span>IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'funlee'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: 'funlee', age: 18}</span></code></pre><h2 id="1-12-模块"><a href="#1-12-模块" class="headerlink" title="1.12 模块"></a>1.12 模块</h2><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的(其实就是ES6的模块化语法)</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//导出模块</span><span class="token keyword">export</span> <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string">"标题"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> title<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入模块</span><span class="token keyword">import</span> title<span class="token punctuation">,</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span>str<span class="token punctuation">,</span>say<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./a'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>str<span class="token punctuation">,</span>say<span class="token punctuation">)</span></code></pre><h2 id="1-13-声明文件"><a href="#1-13-声明文件" class="headerlink" title="1.13 声明文件"></a>1.13 声明文件</h2><blockquote><p>d.ts为声明文件  主要用作类型的声明</p></blockquote><ul><li>在d.ts使用了declare，表示全局声明类型，需要结合tsconfig.json一起使用才能<br>有效果。 (使用方式：类似于命名空间)</li><li>或者使用export的方式，在普通ts中将d.ts导入(使用方式：类似于模块)</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//data.d.ts    注意：只有声明没有实现</span><span class="token comment" spellcheck="true">//声明一个类型</span><span class="token keyword">declare</span> type StringFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个命名空间</span><span class="token keyword">declare</span> namespace API <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//导出CurrentUser接口类型</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CurrentUser</span> <span class="token punctuation">{</span>    avatar<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    title<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-14-小练习"><a href="#1-14-小练习" class="headerlink" title="1.14 小练习"></a>1.14 小练习</h2><p>写出下列ts代码的含义：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//导出一个函数 函数名字是defineConfig，函数参数是config，参数类型是IConfigFromPlugins或者IConfig，返回值是IConfigFromPlugins或者IConfig</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> IConfigFromPlugins <span class="token operator">|</span> IConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> IConfigFromPlugins <span class="token operator">|</span> IConfig<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个类型叫OverlayFunc，该类型是一个函数，该函数的返回值是ReactNode</span><span class="token keyword">declare</span> type OverlayFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导出一个类型，该类型叫SiderTheme，他的值是light或者dark</span><span class="token keyword">export</span> type SiderTheme <span class="token operator">=</span> <span class="token string">'light'</span> <span class="token operator">|</span> <span class="token string">'dark'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个常量，名字叫columns，他的类型是ProColumns的数组，数组中的元素是TableListItem</span><span class="token keyword">const</span> columns<span class="token punctuation">:</span> ProColumns<span class="token operator">&lt;</span>TableListItem<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//声明一个常量，名字叫LoginMessage，他的类型是React.FC，React.FC中接收{content: string}类型的数据。LoginMessage的值是一个箭头函数，该函数通过解构赋值或者content作为函数的入参，函数没有返回值</span><span class="token keyword">const</span> LoginMessage<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span>  content<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//type的 | 和 &amp;</span>type Env1 <span class="token operator">=</span> <span class="token string">'prod'</span> <span class="token operator">|</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token string">'dev'</span><span class="token punctuation">;</span>type Env2 <span class="token operator">=</span> <span class="token string">'prod'</span> <span class="token operator">|</span> <span class="token string">'boe'</span> <span class="token operator">|</span> <span class="token string">'ppe'</span><span class="token punctuation">;</span>type EnvUnion <span class="token operator">=</span> Env1 <span class="token operator">|</span> Env2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'prod' | 'test' | 'dev' | 'boe' | 'ppe'  取并集</span>type EnvInter <span class="token operator">=</span> Env1 <span class="token operator">&amp;</span> Env2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'prod'   取交集</span><span class="token comment" spellcheck="true">//声明一个类型叫Partial，主要作用就是将T中的每一个键可选</span>type Partial<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个类型叫Pick 主要作用选择T中的符合条件的属性</span><span class="token comment" spellcheck="true">//https://blog.csdn.net/weixin_34376986/article/details/93167453</span>type Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断T是不是继承U，如果是则取never类型，否则取T类型本身</span>type Exclude<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断T是不是继承U，如果是则取T类型，否则取never类型</span>type Extract<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> T <span class="token punctuation">:</span> never<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Omit 主要作用 选择T中除了K之外的其他属性          </span>type Omit<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span>keyof T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个常量REACT_APP_ENV，他的值是test  dev  pre 或者false中的任意一个</span><span class="token keyword">declare</span> <span class="token keyword">const</span> REACT_APP_ENV<span class="token punctuation">:</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token string">'dev'</span> <span class="token operator">|</span> <span class="token string">'pre'</span> <span class="token operator">|</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app的基本使用</title>
      <link href="2019/11/23/uniapp-ji-chu-zhi-shi/"/>
      <url>2019/11/23/uniapp-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>#1.uni-app的基本使用</p><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：极客商城项目</p><h2 id="1-1-uni-app介绍-官方网页"><a href="#1-1-uni-app介绍-官方网页" class="headerlink" title="1.1 uni-app介绍 官方网页"></a>1.1 uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h2><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><p>安装编辑器HbuilderX  <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p><h2 id="1-3-利用HbuilderX初始化项目-js"><a href="#1-3-利用HbuilderX初始化项目-js" class="headerlink" title="1.3 利用HbuilderX初始化项目(js)"></a>1.3 利用HbuilderX初始化项目(js)</h2><ul><li><p>点击HbuilderX菜单栏文件&gt;项目&gt;新建</p></li><li><p>选择uni-app,填写项目名称，项目创建的目录</p><p><img src="https://i.loli.net/2020/11/09/LmBqE7uJa2KoGQl.png"></p></li></ul><h2 id="1-4-使用vue-cli脚手架创建ts项目"><a href="#1-4-使用vue-cli脚手架创建ts项目" class="headerlink" title="1.4 使用vue/cli脚手架创建ts项目"></a>1.4 使用vue/cli脚手架创建ts项目</h2><pre class=" language-javascript"><code class="language-javascript">vue create <span class="token operator">-</span>p dcloudio<span class="token operator">/</span>uni<span class="token operator">-</span>preset<span class="token operator">-</span>vue my<span class="token operator">-</span>ts</code></pre><p><img src="https://i.loli.net/2020/11/09/4Kvbp9yzcCJ6gnj.png" alt="1602848342568.png"></p><h2 id="1-5-运行项目"><a href="#1-5-运行项目" class="headerlink" title="1.5 运行项目"></a>1.5 运行项目</h2><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h2 id="1-6-介绍项目目录和文件作用"><a href="#1-6-介绍项目目录和文件作用" class="headerlink" title="1.6 介绍项目目录和文件作用"></a>1.6 介绍项目目录和文件作用</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><p><code>unpackage</code> 就是打包目录，在这里有各个平台的打包文件</p><p><code>pages</code> 所有的页面存放目录</p><p><code>static</code> 静态资源目录，例如图片等</p><p><code>components</code> 组件存放目录</p><p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p><ul><li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.html">Vue 单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README">uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见<a href="https://uniapp.dcloud.io/api/README">uni-app接口规范</a></li><li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><h1 id="2-vue-ts语法"><a href="#2-vue-ts语法" class="headerlink" title="2.vue ts语法"></a>2.vue ts语法</h1><h2 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>image <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo"</span> src<span class="token operator">=</span><span class="token string">"/static/logo.png"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>属性绑定<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-area"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span>view<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span>image v<span class="token operator">-</span>bind<span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>v<span class="token operator">-</span><span class="token keyword">if</span>和v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,i) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"i"</span><span class="token operator">></span>名字：<span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"flag"</span><span class="token operator">></span>显示我<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>点击事件<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"tapHandle(1,$event)"</span><span class="token operator">></span>点我传参<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">"printTitle"</span><span class="token operator">></span>点我不传参<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"title = 'ggg'"</span><span class="token operator">></span>点我修改title<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue<span class="token punctuation">,</span>        Watch    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.响应式属性，对标之前的data函数返回的对象</span>        <span class="token keyword">private</span> title<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token string">'myTitle'</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> num<span class="token punctuation">:</span> Number <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> img<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token string">'http://destiny001.gitee.io/image/monkey_02.jpg'</span>        <span class="token keyword">private</span> arr<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'刘能'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">29</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'赵四'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">39</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'宋小宝'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">49</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'小沈阳'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">59</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token keyword">private</span> flag<span class="token punctuation">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.计算属性</span>        <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Number <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.生命周期</span>        <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> a<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onLoad~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onShow~~~~~~~~~~~"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//4.属性监听 此处是监听title的变化</span>        @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>        <span class="token function">titleChange</span><span class="token punctuation">(</span>newVal<span class="token punctuation">:</span> Number<span class="token punctuation">,</span> oldVal<span class="token punctuation">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.methods，对标之前methods中写的方法</span>        <span class="token function">printTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hahahhhaha'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">tapHandle</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> number<span class="token punctuation">,</span> event<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> event<span class="token punctuation">.</span>type<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>content <span class="token punctuation">{</span>        display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        flex<span class="token operator">-</span>direction<span class="token punctuation">:</span> column<span class="token punctuation">;</span>        align<span class="token operator">-</span>items<span class="token punctuation">:</span> center<span class="token punctuation">;</span>        justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>logo <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 200rpx<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 200rpx<span class="token punctuation">;</span>        margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 200rpx<span class="token punctuation">;</span>        margin<span class="token operator">-</span>left<span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        margin<span class="token operator">-</span>right<span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 50rpx<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>text<span class="token operator">-</span>area <span class="token punctuation">{</span>        display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>title <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token punctuation">:</span> 36rpx<span class="token punctuation">;</span>        color<span class="token punctuation">:</span> #8f8f94<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.vue-class-component：强化 Vue 组件，使用 TypeScript/装饰器 增强 Vue 组件</span><span class="token comment" spellcheck="true">//2.vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器：</span>@Emit  @Inject    @Model@Prop@Provide@Watch@Component <span class="token punctuation">(</span>从 vue<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>component 继承<span class="token punctuation">)</span></code></pre><h2 id="2-2-uni-app中组件的创建"><a href="#2-2-uni-app中组件的创建" class="headerlink" title="2.2 uni-app中组件的创建"></a>2.2 uni-app中组件的创建</h2><p><a href="https://juejin.im/post/6844903741456384014">https://juejin.im/post/6844903741456384014</a></p><p><a href="https://blog.csdn.net/sllailcp/article/details/102542796/">https://blog.csdn.net/sllailcp/article/details/102542796/</a></p><p><a href="https://www.jianshu.com/p/d8ed3aa76e9b">https://www.jianshu.com/p/d8ed3aa76e9b</a></p><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建head组件，在component中创建head.vue文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        这是头部组件    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span>Vue<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p>在其他组件中导入该组件并注册</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Head<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span>        <span class="token operator">&lt;</span>text<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token operator">|</span><span class="token function">msgFormat</span><span class="token punctuation">(</span><span class="token string">'疯狂+1'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>        <span class="token operator">&lt;</span>text v<span class="token operator">-</span>fontsize<span class="token operator">=</span><span class="token string">"15"</span><span class="token operator">></span>测试文字<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'@/components/head.vue'</span>    <span class="token comment" spellcheck="true">//@Component 装饰器可以接收一个对象作为参数，可以在对象中声明 components ，filters，directives等未提供装饰器的选项，也可以声明computed，watch等</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            Head        <span class="token punctuation">}</span><span class="token punctuation">,</span>        filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msgFormat<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> string<span class="token punctuation">,</span> arg<span class="token punctuation">:</span> string<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/少年/g</span><span class="token punctuation">,</span> arg <span class="token operator">+</span> arg2<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//只在浏览器中有效</span>        directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'fontsize'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 注意：这个 function 等同于把代码写到了 bind 和 update 中去</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> msg<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token string">'曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人'</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>使用组件</p><pre><code>&lt;Head&gt;&lt;/Head&gt;</code></pre></li></ul><h2 id="2-3-组件的生命周期函数"><a href="#2-3-组件的生命周期函数" class="headerlink" title="2.3 组件的生命周期函数"></a>2.3 组件的生命周期函数</h2><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h2 id="2-4-组件的通讯"><a href="#2-4-组件的通讯" class="headerlink" title="2.4 组件的通讯"></a>2.4 组件的通讯</h2><h3 id="2-4-1-父组件给子组件传值"><a href="#2-4-1-父组件给子组件传值" class="headerlink" title="2.4.1 父组件给子组件传值"></a>2.4.1 父组件给子组件传值</h3><p>head.vue通过@props来接受外界传递到组件内部的值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        这是头部组件    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue<span class="token punctuation">,</span>        Prop    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        @Prop(options: (PropOptions | Constructor[] | Constructor) = {})        @Prop装饰器接收一个参数，这个参数可以有三种写法：        Constructor，例如String，Number，Boolean等，指定 prop 的类型；        Constructor[]，指定 prop 的可选类型；        PropOptions，可以使用以下选项：type，default，required，validator。        */</span>        <span class="token comment" spellcheck="true">//!表示非null 非undefined</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> readonly name<span class="token operator">!</span><span class="token punctuation">:</span> string <span class="token operator">|</span> undefined<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> Number        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">private</span> age<span class="token operator">!</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">[</span>String<span class="token punctuation">,</span> Boolean<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">private</span> sex<span class="token operator">!</span><span class="token punctuation">:</span> string <span class="token operator">|</span> boolean<span class="token punctuation">;</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>其他组件在使用head组件的时候传递值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Head <span class="token punctuation">:</span>name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> <span class="token punctuation">:</span>sex<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'@/components/head.vue'</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span>            Head        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> sex <span class="token operator">=</span> <span class="token string">'nan'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-4-2-子组件给父组件传值"><a href="#2-4-2-子组件给父组件传值" class="headerlink" title="2.4.2 子组件给父组件传值"></a>2.4.2 子组件给父组件传值</h3><p>通过@emit触发事件进行传递参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父组件</span><span class="token operator">&lt;</span>Head <span class="token punctuation">:</span>name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> <span class="token punctuation">:</span>sex<span class="token operator">=</span><span class="token string">"sex"</span> @del<span class="token operator">=</span><span class="token string">"delFromChild"</span> @add<span class="token operator">=</span><span class="token string">"addFromChild"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span><span class="token function">addFromChild</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// this.emitData = data;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"父组件 returnPersons"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">delFromChild</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">,</span>data<span class="token punctuation">:</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(this.emitData);</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">"父组件 delemit"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//子组件</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"del($event,{id:1})"</span><span class="token operator">></span>点击触发del emit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add({name:'张三'})"</span><span class="token operator">></span>点击触发add emit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token comment" spellcheck="true">/*        @Emit 装饰器接收一个可选参数，该参数是$Emit的第一个参数，充当事件名。如果没有提供这个参数，$Emit会将回调函数名的camelCase转为kebab-case，并将其作为事件名；        @Emit会将回调函数的返回值作为第二个参数，如果返回值是一个Promise对象，$emit会在Promise对象被标记为resolved之后触发；        @Emit的回调函数的参数，会放在其返回值之后，一起被$emit当做参数使用。*/</span><span class="token comment" spellcheck="true">//当前组件的del点击事件会触发delClick执行，delClick会触发父组件传递过来的del执行，就相当于之前的this.$emit()</span>@<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token function">delClick</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">,</span> data<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">del</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">,</span> data<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">delClick</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果此处不设置别名字,则默认使用下面的函数命名,该函数既代表当前组件的点击事件，又代表触发父组件传递过来的add事件</span>@<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 此处不return,则会默认使用括号里的参数p;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-3-兄弟组件通讯"><a href="#2-4-3-兄弟组件通讯" class="headerlink" title="2.4.3 兄弟组件通讯"></a>2.4.3 兄弟组件通讯</h3><pre><code>uni.$emit(eventName,OBJECT)  触发全局的自定事件。uni.$on(eventName,callback)  监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。uni.$off([eventName, callback])  移除全局自定义事件监听器</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.head.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>text<span class="token operator">></span>这是头部<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"send"</span><span class="token operator">></span>点击向head发送数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"eventType1"</span><span class="token punctuation">,</span><span class="token string">"你好，head"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//2.foot.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>text<span class="token operator">></span>这是尾巴<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue<span class="token punctuation">,</span>        Prop<span class="token punctuation">,</span>        Emit    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"eventType1"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到来自foot的数据"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//index.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Head<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span>        <span class="token operator">&lt;</span>Foot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Foot<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'@/components/head.vue'</span>    <span class="token keyword">import</span> Foot <span class="token keyword">from</span> <span class="token string">'@/components/foot.vue'</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            Head<span class="token punctuation">,</span>            Foot        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h1 id="3-全局配置和页面配置"><a href="#3-全局配置和页面配置" class="headerlink" title="3 全局配置和页面配置"></a>3 全局配置和页面配置</h1><h2 id="3-1-通过globalStyle进行全局配置"><a href="#3-1-通过globalStyle进行全局配置" class="headerlink" title="3.1 通过globalStyle进行全局配置"></a>3.1 通过globalStyle进行全局配置</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td></tr></tbody></table><h2 id="3-2-创建新的message页面"><a href="#3-2-创建新的message页面" class="headerlink" title="3.2 创建新的message页面"></a>3.2 创建新的message页面</h2><p>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        这是信息页面    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-通过pages来配置页面"><a href="#3-3-通过pages来配置页面" class="headerlink" title="3.3 通过pages来配置页面"></a>3.3 通过pages来配置页面</h2><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><pre class=" language-html"><code class="language-html">"pages": [         {            "path":"pages/message/message"        },        {            "path": "pages/index/index",            "style": {                "navigationBarTitleText": "uni-app"            }        }    ]</code></pre><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><pre class=" language-js"><code class="language-js"><span class="token string">"pages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span>        <span class="token punctuation">{</span>            <span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"pages/message/message"</span><span class="token punctuation">,</span>            <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"navigationBarBackgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#007AFF"</span><span class="token punctuation">,</span>                <span class="token string">"navigationBarTextStyle"</span><span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>                <span class="token string">"enablePullDownRefresh"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token string">"disableScroll"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token string">"h5"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"pullToRefresh"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#007AFF"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span></code></pre><h2 id="3-4-配置tabbar"><a href="#3-4-配置tabbar" class="headerlink" title="3.4 配置tabbar"></a>3.4 配置tabbar</h2><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><pre class=" language-js"><code class="language-js"><span class="token string">"tabBar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/home.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/home-active.png"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"信息"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/message/message"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/message.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/message-active.png"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/contact/contact"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/contact.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/contact-active.png"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-5-condition启动模式配置"><a href="#3-5-condition启动模式配置" class="headerlink" title="3.5 condition启动模式配置"></a>3.5 condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p>记得要在微信开发工具里选中你要调试的模式</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><h1 id="4-uni基础组件的基本使用"><a href="#4-uni基础组件的基本使用" class="headerlink" title="4 uni基础组件的基本使用"></a>4 uni基础组件的基本使用</h1><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h2 id="4-1-text文本组件的用法"><a href="#4-1-text文本组件的用法" class="headerlink" title="4.1 text文本组件的用法"></a>4.1 text文本组件的用法</h2><h4 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h4><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">默认值</th><th align="center">必填</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">selectable</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">文本是否可选</td></tr><tr><td align="center">space</td><td align="center">string</td><td align="center">.</td><td align="center">否</td><td align="center">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td align="center">decode</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h4 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 长按文本是否可选 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">selectable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 显示连续空格的方式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ensp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>emsp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>nbsp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>skyblue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 是否解码 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> <span class="token entity" title="&lt;">&amp;lt;</span> <span class="token entity" title="&gt;">&amp;gt;</span> <span class="token entity" title="&amp;">&amp;amp;</span> <span class="token entity" title="&apos;">&amp;apos;</span> <span class="token entity" title="&ensp;">&amp;ensp;</span> <span class="token entity" title="&emsp;">&amp;emsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h2 id="4-2-view视图容器组件的用法"><a href="#4-2-view视图容器组件的用法" class="headerlink" title="4.2 view视图容器组件的用法"></a>4.2 view视图容器组件的用法</h2><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h4 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><p><img src="https://i.loli.net/2020/11/09/7Atvbg1BofdWGaQ.png"></p><h4 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2_active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box1<span class="token punctuation">'</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>active<span class="token punctuation">'</span></span> <span class="token attr-name">hover-stop-propagation</span> <span class="token attr-name">:hover-start-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span> <span class="token attr-name">:hover-stay-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>2000<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h2 id="4-3-button按钮组件的用法"><a href="#4-3-button按钮组件的用法" class="headerlink" title="4.3 button按钮组件的用法"></a>4.3 button按钮组件的用法</h2><h4 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">size</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的大小</td></tr><tr><td align="center">type</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的样式类型</td></tr><tr><td align="center">plain</td><td align="center">Boolean</td><td align="center">false</td><td align="center">按钮是否镂空，背景色透明</td></tr><tr><td align="center">disabled</td><td align="center">Boolean</td><td align="center">false</td><td align="center">是否按钮</td></tr><tr><td align="center">loading</td><td align="center">Boolean</td><td align="center">false</td><td align="center">名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h4 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>primary<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>default<span class="token punctuation">'</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>warn<span class="token punctuation">'</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h3 id="1-7-4-image组件的使用"><a href="#1-7-4-image组件的使用" class="headerlink" title="1.7.4 image组件的使用"></a>1.7.4 image组件的使用</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image">image</a>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image{will-change: transform}</code> ,可优化此问题。</li></ul><h1 id="5-uni-app中的样式"><a href="#5-uni-app中的样式" class="headerlink" title="5 uni-app中的样式"></a>5 uni-app中的样式</h1><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式（scoped）为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p></li><li><p><a href="https://www.jianshu.com/p/f423b4e937af">https://www.jianshu.com/p/f423b4e937af</a></p><pre><code> @font-face {     font-family: test1-icon;     src: url('~@/static/iconfont.ttf'); }</code></pre></li></ul></li><li><p>如何使用scss或者less</p><pre><code>//1.安装插件npm install less less-loader --save//2.vue文件中使用 &lt;style lang="less"&gt;</code></pre></li></ul><h1 id="6-uni的生命周期"><a href="#6-uni的生命周期" class="headerlink" title="6 uni的生命周期"></a>6 uni的生命周期</h1><h2 id="6-1-应用的生命周期"><a href="#6-1-应用的生命周期" class="headerlink" title="6.1 应用的生命周期"></a>6.1 应用的生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h2 id="6-2-页面的生命周期"><a href="#6-2-页面的生命周期" class="headerlink" title="6.2 页面的生命周期"></a>6.2 页面的生命周期</h2><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h1 id="7-uni相关API"><a href="#7-uni相关API" class="headerlink" title="7 uni相关API"></a>7 uni相关API</h1><h2 id="7-1-下拉刷新"><a href="#7-1-下拉刷新" class="headerlink" title="7.1 下拉刷新"></a>7.1 下拉刷新</h2><h3 id="7-1-1-开启下拉刷新"><a href="#7-1-1-开启下拉刷新" class="headerlink" title="7.1.1 开启下拉刷新"></a>7.1.1 开启下拉刷新</h3><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h4 id="a-通过配置文件开启"><a href="#a-通过配置文件开启" class="headerlink" title="a) 通过配置文件开启"></a>a) 通过配置文件开启</h4><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"pages/list/list"</span><span class="token punctuation">,</span>    <span class="token string">"style"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token string">"enablePullDownRefresh"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="b-通过API开启"><a href="#b-通过API开启" class="headerlink" title="b) 通过API开启"></a>b) 通过API开启</h4><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p><pre class=" language-html"><code class="language-html">uni.startPullDownRefresh({})</code></pre><h3 id="7-1-2-监听下拉刷新"><a href="#7-1-2-监听下拉刷新" class="headerlink" title="7.1.2 监听下拉刷新"></a>7.1.2 监听下拉刷新</h3><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        这是信息页面    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">startPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">startPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">onPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发下拉刷新了'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="7-1-3-关闭下拉刷新"><a href="#7-1-3-关闭下拉刷新" class="headerlink" title="7.1.3 关闭下拉刷新"></a>7.1.3 关闭下拉刷新</h3><p>uni.stopPullDownRefresh()      停止当前页面下拉刷新 </p><h2 id="7-2-上拉加载"><a href="#7-2-上拉加载" class="headerlink" title="7.2 上拉加载"></a>7.2 上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'ui'</span><span class="token punctuation">,</span> <span class="token string">'大数据'</span><span class="token punctuation">,</span> <span class="token string">'前端'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'ui'</span><span class="token punctuation">,</span> <span class="token string">'大数据'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">,</span> <span class="token string">'大数据'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">startPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">startPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">onPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发下拉刷新了'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">onReachBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触底了'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span><span class="token operator">></span>    <span class="token punctuation">.</span>item <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//App.vue中添加</span><span class="token operator">&lt;</span>style<span class="token operator">></span>    page<span class="token punctuation">{</span>        overflow<span class="token operator">-</span>y<span class="token punctuation">:</span>scroll<span class="token operator">!</span>important<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="7-3-网络请求"><a href="#7-3-网络请求" class="headerlink" title="7.3 网络请求"></a>7.3 网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><pre class=" language-javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'http://localhost/myUniApp/php/login.php'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//仅为示例，并非真实接口地址。</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//参数</span>        rawData<span class="token punctuation">:</span> rawData<span class="token punctuation">,</span>        code<span class="token punctuation">:</span> loginRes<span class="token punctuation">.</span>code    <span class="token punctuation">}</span><span class="token punctuation">,</span>    header<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'custom-header'</span><span class="token punctuation">:</span> <span class="token string">'hello'</span> <span class="token comment" spellcheck="true">//自定义请求头信息</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span><span class="token string">'POST'</span><span class="token comment" spellcheck="true">//请求方式  或GET</span>    success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'返回'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>请求示例</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sendGet"</span><span class="token operator">></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"movieData"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>text<span class="token operator">></span>电影名字：<span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>originalName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span>view<span class="token operator">></span>                导演：                <span class="token operator">&lt;</span>text v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in movieData.director"</span><span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span>view<span class="token operator">></span>电影信息                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>genre<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>language<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>country<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    type MovieBasicType <span class="token operator">=</span> <span class="token punctuation">{</span>        genre<span class="token punctuation">:</span>string        name<span class="token punctuation">:</span>string        lang<span class="token punctuation">:</span>string        language<span class="token punctuation">:</span>string        poster<span class="token punctuation">:</span>string        description<span class="token punctuation">:</span>string        country<span class="token punctuation">:</span>string    <span class="token punctuation">}</span>    type MovieDirectorType <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>        lang<span class="token punctuation">:</span>string    <span class="token punctuation">}</span>    type MovieDataType <span class="token operator">=</span> <span class="token punctuation">{</span>        id<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">,</span>        originalName<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">,</span>        duration<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">,</span>        data<span class="token operator">?</span><span class="token punctuation">:</span>MovieBasicType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        director<span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>MovieDirectorType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> movieData<span class="token punctuation">:</span>MovieDataType<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">'https://movie.querydata.org/api?id=1302425'</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">const</span> resobj <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>movieData <span class="token operator">=</span> resobj <span class="token keyword">as</span> MovieDataType<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//uni-app中对ts的支持只是一般，没有非常严格</span></code></pre><h2 id="7-4-数据缓存"><a href="#7-4-数据缓存" class="headerlink" title="7.4 数据缓存"></a>7.4 数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"setStor"</span><span class="token operator">></span>存储数据<span class="token operator">-</span>异步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"setStorSync"</span><span class="token operator">></span>存储数据<span class="token operator">-</span>同步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"getStorage"</span><span class="token operator">></span>获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"getStorageSync"</span><span class="token operator">></span>获取数据<span class="token operator">-</span>同步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"removeStorage"</span><span class="token operator">></span>删除数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"removeStorageSync"</span><span class="token operator">></span>删除数据<span class="token operator">-</span>同步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">setStor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'存储成功'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">setStorSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'id2'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> id <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">removeStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">removeStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">removeStorageSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">removeStorageSync</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="7-5-上传图片、预览图片"><a href="#7-5-上传图片、预览图片" class="headerlink" title="7.5 上传图片、预览图片"></a>7.5 上传图片、预览图片</h2><h3 id="7-5-1-上传图片"><a href="#7-5-1-上传图片" class="headerlink" title="7.5.1 上传图片"></a>7.5.1 上传图片</h3><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chooseImg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in imgArr<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> imgArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token function">chooseImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                count<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>imgArr <span class="token operator">=</span> res<span class="token punctuation">.</span>tempFilePaths                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="7-5-2-预览图片"><a href="#7-5-2-预览图片" class="headerlink" title="7.5.2 预览图片"></a>7.5.2 预览图片</h3><p>结构</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in imgArr<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>previewImg(item)<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>预览图片的方法</p><pre class=" language-js"><code class="language-js">previewImg <span class="token punctuation">(</span>current<span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    urls<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imgArr<span class="token punctuation">,</span>    current  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="7-6-uni中的导航跳转"><a href="#7-6-uni中的导航跳转" class="headerlink" title="7.6 uni中的导航跳转"></a>7.6 uni中的导航跳转</h2><h3 id="7-6-1-利用navigator进行跳转"><a href="#7-6-1-利用navigator进行跳转" class="headerlink" title="7.6.1 利用navigator进行跳转"></a>7.6.1 利用navigator进行跳转</h3><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/pages/about/about<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navigator-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span></code></pre><p>跳转到tabbar页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/pages/message/message<span class="token punctuation">"</span></span> <span class="token attr-name">open-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchTab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span></code></pre><h3 id="7-6-2-利用编程式导航进行跳转"><a href="#7-6-2-利用编程式导航进行跳转" class="headerlink" title="7.6.2 利用编程式导航进行跳转"></a>7.6.2 利用编程式导航进行跳转</h3><p><a href="%5Buni.navigateTo%5D(https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><h3 id="7-6-3-利用navigateTo进行导航跳转"><a href="#7-6-3-利用navigateTo进行导航跳转" class="headerlink" title="7.6.3 利用navigateTo进行导航跳转"></a>7.6.3 利用navigateTo进行导航跳转</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goAbout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>通过navigateTo方法进行跳转到普通页面</p><pre class=" language-js"><code class="language-js">goAbout <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/about/about'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>通过switchTab方法进行跳转</p><pre class=" language-js"><code class="language-js">goMessage <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span>  <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/message/message'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>redirectTo进行跳转</strong> </p><p>关闭当前页面，跳转到应用内的某个页面。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- template --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- js --></span>goMessage ():void  {  uni.switchTab({    url: '/pages/message/message'  })}</code></pre><p>通过onUnload测试当前组件确实卸载</p><pre class=" language-js"><code class="language-js">onUnload <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件卸载了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="7-6-4-导航跳转传递参数"><a href="#7-6-4-导航跳转传递参数" class="headerlink" title="7.6.4 导航跳转传递参数"></a>7.6.4 导航跳转传递参数</h3><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><pre class=" language-js"><code class="language-js">goAbout <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span>  <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/about/about?id=80'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接收参数的页面</p><pre class=" language-js"><code class="language-js">onLoad <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h1 id="8-条件注释实现跨端兼容"><a href="#8-条件注释实现跨端兼容" class="headerlink" title="8 条件注释实现跨端兼容"></a>8 条件注释实现跨端兼容</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h2 id="8-1-组件的条件注释"><a href="#8-1-组件的条件注释" class="headerlink" title="8.1 组件的条件注释"></a>8.1 组件的条件注释</h2><p>代码演示</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- #ifdef H5 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  h5页面会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span><span class="token comment" spellcheck="true">&lt;!-- #ifdef MP-WEIXIN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  微信小程序会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span><span class="token comment" spellcheck="true">&lt;!-- #ifdef APP-PLUS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  app会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span></code></pre><h2 id="8-2-api的条件注释"><a href="#8-2-api的条件注释" class="headerlink" title="8.2 api的条件注释"></a>8.2 api的条件注释</h2><p>代码演示</p><pre class=" language-js"><code class="language-js">onLoad <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//#ifdef MP-WEIXIN</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'微信小程序'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//#endif</span>  <span class="token comment" spellcheck="true">//#ifdef H5</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h5页面'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//#endif</span><span class="token punctuation">}</span></code></pre><h2 id="8-3-样式的条件注释"><a href="#8-3-样式的条件注释" class="headerlink" title="8.3 样式的条件注释"></a>8.3 样式的条件注释</h2><p>代码演示</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* #ifdef H5 */</span><span class="token selector">view</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* #endif */</span><span class="token comment" spellcheck="true">/* #ifdef MP-WEIXIN */</span><span class="token selector">view</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* #endif */</span></code></pre><h1 id="9-uni-ui的使用"><a href="#9-uni-ui的使用" class="headerlink" title="9 uni-ui的使用"></a>9 uni-ui的使用</h1><p>uni-app中的UI组件库：<a href="https://ask.dcloud.net.cn/article/35489">https://ask.dcloud.net.cn/article/35489</a></p><p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.将资料中的uni-ui放入到项目components目录下(注意：不要npm install @dcloudio/uni-ui ，这种方式在子组件中无法使用)</span><span class="token comment" spellcheck="true">//2.安装sass-loader</span>npm install node<span class="token operator">-</span>sass sass<span class="token operator">-</span>loader@<span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">2</span>      重启hubuilderX<span class="token comment" spellcheck="true">//3.在页面组件和自定义组件中使用uni-ui</span><span class="token keyword">import</span> uniBadge <span class="token keyword">from</span> <span class="token string">"@/components/uni-ui/lib/uni-badge/uni-badge.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> uniGrid <span class="token keyword">from</span> <span class="token string">"@/components/uni-ui/lib/uni-grid/uni-grid.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> uniGridItem <span class="token keyword">from</span> <span class="token string">"@/components/uni-ui/lib/uni-grid-item/uni-grid-item.vue"</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        uniBadge<span class="token punctuation">,</span>        uniGrid<span class="token punctuation">,</span>        uniGridItem    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>badge text<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>badge<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>badge text<span class="token operator">=</span><span class="token string">"2"</span> type<span class="token operator">=</span><span class="token string">"success"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>badge<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>badge text<span class="token operator">=</span><span class="token string">"3"</span> type<span class="token operator">=</span><span class="token string">"primary"</span> <span class="token punctuation">:</span>inverted<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>badge<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid <span class="token punctuation">:</span>column<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>                <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>文本<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>                <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>文本<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>                <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>文本<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件的生命周期</title>
      <link href="2019/11/15/zu-jian-de-sheng-ming-zhou-qi/"/>
      <url>2019/11/15/zu-jian-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><h3 id="组件的生命周期-1"><a href="#组件的生命周期-1" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><h4 id="created"><a href="#created" class="headerlink" title="created()"></a><code>created()</code></h4><p>在data同层级下：</p><pre class=" language-javascript"><code class="language-javascript">lifetimes<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.data.msg"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//能获取到</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.properties.item"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取不到</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>created()在组件实例刚刚被创建的时候执行，这里不能调用<code>setData</code>方法</p><h4 id="attached"><a href="#attached" class="headerlink" title="attached()"></a><code>attached()</code></h4><p>在组件实例进入页面节点树的时候执行</p><p>可以获取<code>this.properties.item</code></p><pre><code>lifetimes:{    attached(){      console.log("this.data.msg",this.data.msg);               //能获取到      console.log("this.properties.item",this.properties.items);//能获取到    }},</code></pre><h4 id="ready"><a href="#ready" class="headerlink" title="ready()"></a><code>ready()</code></h4><p>组件布局完成后执行</p><pre><code>lifetimes:{    ready(){      console.log("this.data.msg",this.data.msg);               //能获取到      console.log("this.properties.item",this.properties.items);//能获取到    }},</code></pre><h4 id="move"><a href="#move" class="headerlink" title="move()"></a><code>move()</code></h4><p>组件被移动到节点树的另一个位置的时候执行</p><h4 id="detached"><a href="#detached" class="headerlink" title="detached()"></a><code>detached()</code></h4><p>组件被从节点树上移除的时候触发</p><pre><code>lifetimes:{    detached(){      console.log("detached");    }}</code></pre><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>在子组件中：</p><p>方法要写在methods里面</p><p>在子组件的标签上绑定点击事件</p><pre><code>&lt;view class="box"  bindtap="handleClick"&gt;    &lt;view class="img"&gt;      &lt;image class="imgs" src="{{items.img}}"&gt;      &lt;/image&gt;    &lt;/view&gt;    &lt;view class="text"&gt;      {{items.name}}    &lt;/view&gt;    &lt;view class="count"&gt;{{items.count}}&lt;/view&gt;  &lt;/view&gt;</code></pre><p>在<code>methods</code>里写点击事件</p><p><code>this.triggerEvent</code></p><pre><code>methods: {    handleClick(){      console.log(this.properties.items.id);      this.triggerEvent("delete",id)    }     }})</code></pre><p>在父组件中接收自己定义的方法<br><img src="https://i.loli.net/2020/11/05/nWJGLiIqdSurBMH.png" alt="子传父-父组件绑定事件.png"></p><p>在父组件的<code>js</code>中写这个删除事件</p><pre><code>handleDelete(e){    console.log(e.detail);    let datas = this.data.arr;    let result =  datas.filter(v=&gt;{      return v.id!=e.detail;    })    this.setData({      arr:result    })  }</code></pre><h3 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽<code>slot</code></h3><p>有的存在一个固定样式，有的不存在那个样式，可以在子组件内设置一个插槽，谁需要这个插槽就调用，不需要就不调用</p><p>在子组件中：<br><img src="https://i.loli.net/2020/11/05/JTSb281Vko3BlW9.png" alt="插槽.png"></p><p>并且在<code>item.js</code>中设置</p><pre><code> options:{    multipleSlots:true }</code></pre><p>在需要调用这个插槽的地方<br><img src="https://i.loli.net/2020/11/05/ysoXNSt4vHQjmKZ.png" alt="父组件调用插槽.png"></p><p>样式在父组件中设置</p><p>大概效果如下：</p><p>使用插槽：<br><img src="https://i.loli.net/2020/11/05/qfQGWHPwsKT5rvt.png" alt="界面一使用插槽.png"></p><p>未使用插槽：<br><img src="https://i.loli.net/2020/11/05/49IYcE2feX8lzsQ.png" alt="界面二未使用插槽.png"></p><h3 id="vant-ui的使用"><a href="#vant-ui的使用" class="headerlink" title="vant-ui的使用"></a><code>vant-ui</code>的使用</h3><p>在<code>github</code>下载<code>vant-ui</code></p><p>放在自己的项目下解压</p><p>在项目下新建文件<code>plugins</code>,</p><p>再再目录下新建文件夹<code>vant</code></p><p>将解压包中的<code>dist</code>文件夹下所有文件站粘贴到刚才新建的<code>vant</code> 文件夹下</p><p>需要用这个组件的<code>json</code>文件添加：</p><pre><code>{  "usingComponents": {    "van-button":"/plugins/vant/button/index"  }}</code></pre><p><code>wxml</code>里可以使用了：</p><pre><code>&lt;van-button type="warning"&gt;警告按钮&lt;/van-button&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序组件的使用</title>
      <link href="2019/11/14/wei-xin-xiao-cheng-xu-zu-jian-de-shi-yong/"/>
      <url>2019/11/14/wei-xin-xiao-cheng-xu-zu-jian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序组件的使用"><a href="#微信小程序组件的使用" class="headerlink" title="微信小程序组件的使用"></a>微信小程序组件的使用</h1><h3 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h3><h4 id="组件的使用原因"><a href="#组件的使用原因" class="headerlink" title="组件的使用原因"></a>组件的使用原因</h4><p>重复出现的代码在组件的使用下可以不用去写重复的代码</p><p>例如两个页面的排版相似，只有内部的数据渲染不同，这样的部分可以使用组件去封装<br><img src="https://i.loli.net/2020/11/05/6AXOsKT8jfY2vVU.png" alt="components相似页面.png"></p><p>如果两个页面都重新写，会有一大部分重复代码</p><p>这里可以使用<code>components</code>组件</p><h3 id="使用组件步骤"><a href="#使用组件步骤" class="headerlink" title="使用组件步骤"></a>使用组件步骤</h3><h4 id="一、创建文件夹以及文件"><a href="#一、创建文件夹以及文件" class="headerlink" title="一、创建文件夹以及文件"></a>一、创建文件夹以及文件</h4><p>创建<code>components</code>文件夹，里面创建复用的代码片段，例如创建一个<code>item</code>组件，右键创建<br><img src="https://i.loli.net/2020/11/05/KMicLjoqOp65zBT.png" alt="创建一个新的组件文件.png"></p><h4 id="二、在item-wxml里写复用代码"><a href="#二、在item-wxml里写复用代码" class="headerlink" title="二、在item.wxml里写复用代码"></a>二、在<code>item.wxml</code>里写复用代码</h4><p>这样的样式就相同了</p><h4 id="三、使用组件"><a href="#三、使用组件" class="headerlink" title="三、使用组件"></a>三、使用组件</h4><p>在需要使用的文件夹下的<code>json</code>文件内写引用<strong>组件标签名</strong>和<strong>地址</strong></p><p>在<code>wxml</code>文件内就可以使用组件标签来调用这个写好的组件了<br><img src="https://i.loli.net/2020/11/05/PRlTFhULf1DvsW7.png" alt="使用组件的标签.png"></p><h4 id="四、父组件自定义属性数据传向子组件"><a href="#四、父组件自定义属性数据传向子组件" class="headerlink" title="四、父组件自定义属性数据传向子组件"></a>四、父组件自定义属性数据传向子组件</h4><p>父组件数据传入子组件内原因：</p><p>因为调用组件的每一个地方添加的数据可能都不同，也就是说每一个父组件的数据是独立的，所以每次单独调用组件的时候渲染的数据都是各自父组件自己的</p><h5 id="首先父组件标签内自定义一个属性"><a href="#首先父组件标签内自定义一个属性" class="headerlink" title="首先父组件标签内自定义一个属性"></a>首先父组件标签内自定义一个属性</h5><p><img src="https://i.loli.net/2020/11/05/zLPKec5d2ZM6FV4.png" alt="组件自定义属性.png"></p><h5 id="接着在子组件注册这个属性"><a href="#接着在子组件注册这个属性" class="headerlink" title="接着在子组件注册这个属性"></a>接着在子组件注册这个属性</h5><p><img src="https://i.loli.net/2020/11/05/pwbX75ZYSMargL4.png" alt="在子组件内注册这个属性.png"></p><p>这样就将父组件内的数据传给了子组件，在子组件内调用父组件的数据就用</p>，如下<p><img src="https://i.loli.net/2020/11/05/CFX9yYiBZvWuT1Q.png" alt="使用父组件的属性.png"></p><p>这里面的<code>img</code>,<code>name</code>,<code>count</code>都是父组件数据对象中有的属性</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序wxs</title>
      <link href="2019/11/14/wei-xin-xiao-cheng-xu-wxs/"/>
      <url>2019/11/14/wei-xin-xiao-cheng-xu-wxs/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序wxs"><a href="#微信小程序wxs" class="headerlink" title="微信小程序wxs"></a>微信小程序wxs</h1><h3 id="1、wxs"><a href="#1、wxs" class="headerlink" title="1、wxs"></a>1、<code>wxs</code></h3><p>作用:可以在模板中使用方法，对数据再次处理</p><pre><code>data: {    name:"华语私人最懂你"  },</code></pre><pre><code>//1-1定义一个wxs文件//utils/util.wxsfunction handleName(value){  if(value.length&gt;5){    value = value.slice(0,5)+"..."  }  return value}module.exports = {  handleName:handleName}</code></pre><pre><code>//1-2在模板中引入//pages/index/index.wxml&lt;wxs src="../../utils/util.wxs" module="tools"&gt;&lt;/wxs&gt;&lt;view&gt;    {{tools.handleName(name)}}&lt;/view&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> wxs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序基础</title>
      <link href="2019/11/13/wei-xin-xiao-cheng-xu-zhi-shi-dian/"/>
      <url>2019/11/13/wei-xin-xiao-cheng-xu-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序知识点"><a href="#微信小程序知识点" class="headerlink" title="微信小程序知识点"></a>微信小程序知识点</h1><h3 id="hidden属性"><a href="#hidden属性" class="headerlink" title="hidden属性"></a><code>hidden</code>属性</h3><p>使用<code>hidden</code>属性控制显示隐藏</p><p>先在<code>index.js</code>的<code>page</code>里设置<code>flag</code>为<code>true</code></p><pre><code>Page({  data: {    flag:true  }})</code></pre><p>在<code>wxml</code>里设置<code>hidden</code>属性，使用三元表达式</p><pre><code>&lt;view hidden="{{flag?true:false}}"&gt;  hidden&lt;/view&gt;</code></pre><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>在<code>wxml</code>里标签后使用</p><pre><code>wx:if=""wx:elif=""wx:else=""</code></pre><p>例如</p><pre><code>&lt;view wx:if="{{flag}}"&gt;  a&lt;/view&gt;&lt;view wx:else&gt;  b&lt;/view&gt;</code></pre><p>在Page里</p><pre><code>data: {   flag:true  }</code></pre><h3 id="三元实现点击切换"><a href="#三元实现点击切换" class="headerlink" title="三元实现点击切换"></a>三元实现点击切换</h3><p>绑定一个点击事件,实现点击播放和暂停的图片切换</p><pre><code>&lt;image src="{{state?'/images/play.png':'/images/pause.png'}}" bindtap="handleClick"&gt;&lt;/image&gt;</code></pre><p><code>index.js</code>里写一个状态和点击事件逻辑</p><pre><code>data: {    state:true  },  onLoad: function () {  },  handleClick(e){    let flag = !this.data.state;    this.setData({      state:flag    })  }</code></pre><h3 id="block"><a href="#block" class="headerlink" title="block"></a><code>block</code></h3><p>相当于一个占位符，实际上并不会渲染到<code>html</code>页面</p><h3 id="input表单属性"><a href="#input表单属性" class="headerlink" title="input表单属性"></a><code>input</code>表单属性</h3><h4 id="bindconfirm"><a href="#bindconfirm" class="headerlink" title="bindconfirm"></a><code>bindconfirm</code></h4><p><code>bindconfirm=""</code>，确认后使用<code>e.detail</code>可以获取到输入的内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">confirm-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>到达<span class="token punctuation">"</span></span>    <span class="token attr-name">bindconfirm</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleConfirm<span class="token punctuation">"</span></span>   <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请搜索<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span></code></pre><p><code>js</code>内可以获取到输入内容</p><pre><code>handleConfirm(e){    console.log(e.detail);}</code></pre><h4 id="confirm-type-quot-quot"><a href="#confirm-type-quot-quot" class="headerlink" title="confirm-type=&quot;&quot;"></a><code>confirm-type=""</code></h4><p><code>confirm-type="send"</code>                        右下角按钮为“发送”</p><p><code>confirm-type="search"</code> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;                &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“搜索”</p><p><code>confirm-type="next"</code> &nbsp;                     &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“下一个”</p><p><code>confirm-type="go"</code> &nbsp;                         &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“前往”</p><p><code>confirm-type="done"</code> &nbsp;                    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“完成”</p><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a><code>form</code>表单</h3><p>通过<code>e.detail.value.search</code>可以获得输入数据</p><p>1、给<code>form</code>表单<code>bindsubmit="submit"</code></p><p>2、给<code>input</code>输入框<code>name="search"</code></p><p>3、给<code>button</code>点击按钮<code>form-type="submit"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">bindsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">form-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><code>index.js</code>里使用<code>submit</code>方法得到输入数据</p><pre><code>submit(e){    console.log(e.detail.value.search); }</code></pre><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>小程序中可以使用<code>node.js</code>中模块化的方案</p><p>导出</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//导出</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">,</span>  http<span class="token punctuation">}</span></code></pre><p>导入</p><pre><code>const obj  =require("../../data/a")</code></pre><h3 id="http请求的封装"><a href="#http请求的封装" class="headerlink" title="http请求的封装"></a><code>http</code>请求的封装</h3><p>在一个模块的文件夹内封装一个接口的地址，之后相同前缀的地址直接通过暴露的接口添加后缀地址获得，减少书写冗余代码</p><p>在<code>model</code>里创建一个<code>http.js</code>,里面写一个地址的接口，并暴露出去，如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> baseUrl <span class="token operator">=</span> <span class="token string">"http://192.168.1.8:3000/"</span><span class="token keyword">function</span> <span class="token function">http</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>  wx<span class="token operator">-</span>wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> baseUrl<span class="token operator">+</span>url<span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>    header<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'content-type'</span><span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    responseType<span class="token punctuation">:</span><span class="token string">'text'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getSearchHttp</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">http</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`search?keywords=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getCatHttp</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">http</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`top/playlist?cat=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cat<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  getSearchHttp<span class="token punctuation">,</span>  getCatHttp<span class="token punctuation">}</span></code></pre><p>接口路径相同的就可以不用写很长的路径直接通过这个接口得到了</p><p>例如</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> getSearchHttp <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../model/http"</span><span class="token punctuation">)</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">getSearchHttp</span><span class="token punctuation">(</span><span class="token string">"晨读"</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这里需要一个路径的数据时候通过接口直接能得到路径为：</p><p><code>http://192.168.1.8:3000/search?keywords=晨读</code></p><p>这里的数据</p><h3 id="小程序中在函数内调用一个函数，要使用this"><a href="#小程序中在函数内调用一个函数，要使用this" class="headerlink" title="小程序中在函数内调用一个函数，要使用this"></a>小程序中在函数内调用一个函数，要使用this</h3>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序入门</title>
      <link href="2019/11/12/wei-xin-xiao-cheng-xu-kai-fa/"/>
      <url>2019/11/12/wei-xin-xiao-cheng-xu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h1><h2 id="小程序开发环境配置"><a href="#小程序开发环境配置" class="headerlink" title="小程序开发环境配置"></a>小程序开发环境配置</h2><p>1、安装微信开发者工具<br>2、扫一扫进入开发者工具<br>3、新建项目<br>4、安装vscode插件<br>5、初始化项目</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="使用动态数据"><a href="#使用动态数据" class="headerlink" title="使用动态数据"></a>使用动态数据</h3><p>使用插值表达式在页面渲染数据，如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.index.js  配置</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"wechat"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//2.index.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    //插值表达式  可以使用变量,使用javascript表达式     {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>通过<code>{{msg}}</code>可以获取到<code>index.js</code>里<code>data</code>里属性<code>msg</code>的属性值，并将其渲染到界面</p><h3 id="列表渲染-wx-for"><a href="#列表渲染-wx-for" class="headerlink" title="列表渲染 wx:for"></a>列表渲染 <code>wx:for</code></h3><p><code>wx:for</code>类似于一个循环，将要循环的数组内需要的对象属性渲染到相应位置，如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    friends<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"h6"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1001</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"html"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1002</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"css"</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//index.wmxl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{friends}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{item.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>使用<code>wx:for="{{friends}}"</code>对<code>frinends</code>这个<code>data</code>里的<code>friends</code>数组进行循环，并通过<code>item.属性名</code>将相应的属性值的循环结果呈现在界面</p><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>使用<code>bindtap</code>在相应的标签内绑定相应的事件</p><p>举个例子：通过点击页面中的字来改变它的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//index.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>页面的数据应该是<code>hello world</code>，我们现在在数据的<code>view</code>标签上绑定了一个事件<code>handleClick</code>,接下来我们在<code>js</code>内设置这个事件的内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//this.setData() 设置data中的值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        msg<span class="token punctuation">:</span><span class="token string">"change"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在<code>handleClick</code>事件内我们使用<code>this.setData()</code>设置data里的属性的属性值，将呈现在页面的<code>msg</code>属性改为<code>“change”</code>，此时点击的时候触发点击事件就会改变页面的字为<code>“change”</code>了</p><h3 id="自定义属性的设置和获取"><a href="#自定义属性的设置和获取" class="headerlink" title="自定义属性的设置和获取"></a>自定义属性的设置和获取</h3><h4 id="自定义属性的设置"><a href="#自定义属性的设置" class="headerlink" title="自定义属性的设置"></a>自定义属性的设置</h4><p>使用<code>data-自定义属性名</code>来自定义一个属性，例如：</p><pre class=" language-html"><code class="language-html">//1.data-id 设置一个自定义属性id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{id}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>在这个使用<code>data-id</code>自定义属性<code>id</code>,并且将<code>data</code>内的<code>id</code>值传给这个自定义属性，比如在<code>data</code>里设定<code>id</code>值为1001</p><pre><code>Page({    data:{        msg:"hello world",        id:1001    }})</code></pre><h4 id="自定义属性的获取"><a href="#自定义属性的获取" class="headerlink" title="自定义属性的获取"></a>自定义属性的获取</h4><p>通过以上例子已经设置好了一个自定义属性并且把已有的<code>id</code>的值传给了这个自定义属性，接下来我们怎么获取这个值呢？我们通过一个点击事件来演示一下这个自定义属性值的获取：</p><pre><code>Page({    data:{        msg:"hello world",        id:1001    },    handleClick(event){        console.log(event)        console.log(event.currentTarget.dataset)    }})</code></pre><p>通过在点击事件传一个event参数<br>我们通过打印<code>event</code>可以看到一些已有的属性<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2158361/1597235311467-f6aa97d3-e5d8-430b-9e17-ebe6724d031b.png#align=left&amp;display=inline&amp;height=204&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fevent.png&amp;originHeight=204&amp;originWidth=583&amp;size=21797&amp;status=done&amp;style=none&amp;width=583" alt="微信小程序event.png"><br>在<code>event.currentTarget</code>里可以看到一些现成的数据，其中<code>dataset</code>里就是自己设置的自定义属性的值了<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2158361/1597235320288-50d1e3cb-95aa-4b36-8bac-ea2f6af44c09.png#align=left&amp;display=inline&amp;height=312&amp;margin=%5Bobject%20Object%5D&amp;name=event.currentTargrt.dataset.png&amp;originHeight=312&amp;originWidth=585&amp;size=26069&amp;status=done&amp;style=none&amp;width=585" alt="event.currentTargrt.dataset.png"><br>此时可以看到id确实在这里面，通过打印<code>event.currentTarget.dataset.id</code>就可以获得1001了</p><h3 id="获取data中的值"><a href="#获取data中的值" class="headerlink" title="获取data中的值"></a>获取data中的值</h3><p>通过<code>this.data.属性</code>就可以获得到<code>data</code> 内相应的属性了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"yyy"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span><span class="token number">1001</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//zzz</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="列表删除"><a href="#列表删除" class="headerlink" title="列表删除"></a>列表删除</h3><p>通过以上的学习我们已经使用<code>wx:for="{{arr}}"</code>,将数组内的数据循环渲染到了界面，我们这时候需要使用到自定义属性，通过自定义属性传一个当前循环的属性，通过这个属性值和循环的数组内的属性的相应属性值比对，找到相同的排除，保留点击相同的就可以实现点击删除了。</p><h4 id="1、首先先循环渲染页面"><a href="#1、首先先循环渲染页面" class="headerlink" title="1、首先先循环渲染页面"></a>1、首先先循环渲染页面</h4><p>使用<code>wx:for="{{arr}}"</code></p><h4 id="2、设置一个自定义属性，绑定点击事件"><a href="#2、设置一个自定义属性，绑定点击事件" class="headerlink" title="2、设置一个自定义属性，绑定点击事件"></a>2、设置一个自定义属性，绑定点击事件</h4><p>设置自定义属性<code>data-id="{{item.id}}"</code>，将自定义属性的值设置为循环的当前<code>id</code>，这样我们就可以通过事件得到当前点击的<code>id</code>并和原数据内的数据比对了</p><p>以上两步完成代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"yyy"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span><span class="token number">1001</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//index.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{arr}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.idid}}<span class="token punctuation">"</span></span>  <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.id}}<span class="token punctuation">"</span></span><span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{item.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>此时页面循环渲染结束</p><h4 id="3、通过点击事件和自定义属性删除相应属性"><a href="#3、通过点击事件和自定义属性删除相应属性" class="headerlink" title="3、通过点击事件和自定义属性删除相应属性"></a>3、通过点击事件和自定义属性删除相应属性</h4><p>因为一开始我们自定义属性绑定的就是相应的id属性，所以我们获取到点击的自定义属性的id值，和原有的数组内的id值比对，相同的过滤掉，就可以实现点击过滤效果，代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span>id <span class="token operator">!=</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      arr<span class="token punctuation">:</span>arr2    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><code>event.currentTarget.dataset.id</code>获得的就是点击的那条对象的<code>id</code>值，通过<code>filter</code>过滤掉</p><h4 id="4、最后将过滤后的结果返回给data"><a href="#4、最后将过滤后的结果返回给data" class="headerlink" title="4、最后将过滤后的结果返回给data"></a>4、最后将过滤后的结果返回给data</h4><p>上一段代码已经写出来了，通过<code>this.setData</code>将处理好的<code>arr2</code>传回<code>data</code></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件化</title>
      <link href="2019/10/20/zu-jian-hua-chong-dian/"/>
      <url>2019/10/20/zu-jian-hua-chong-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="组件化-重点"><a href="#组件化-重点" class="headerlink" title="组件化(重点)"></a>组件化(重点)</h1><h3 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a><code>Vue</code>组件化思想</h3><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>组件化提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</p><p>任何的应用都会被抽象成一个组件树</p><h4 id="组件化思想的应用"><a href="#组件化思想的应用" class="headerlink" title="组件化思想的应用"></a>组件化思想的应用</h4><p>有了组件化的思想，我们在之后的开发中就要充分利用它</p><p>尽可能地将页面拆分成一个小的、可复用地组件</p><p>这样我们的代码更加方便组织和管理，扩展性也更强</p><h3 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h3><h4 id="创建组件构造器"><a href="#创建组件构造器" class="headerlink" title="创建组件构造器"></a>创建组件构造器</h4><p>调用<code>Vue.extend()</code>方法创建<strong>组件构造器</strong></p><p>传入<code>template</code>是自定义组件模板</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标题&lt;/h2>                &lt;p>我是内容哈哈哈&lt;/p>                &lt;p>我是内容笑笑笑笑笑笑笑笑笑&lt;/p>                &lt;p>我是内容水水水水&lt;/p>            &lt;/div>            `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h4><p>调用<code>Vue.component()</code>方法</p><p>调用<code>Vue.component()</code>方法是将刚才的租价能够早期注册为一个组件，并且给他起一个组件的标签名</p><p>所以需要传递两个参数：1、注册组件的标签名 &nbsp;2、组件构造器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//注册组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-cpn'</span><span class="token punctuation">,</span>cpnC<span class="token punctuation">)</span></code></pre><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>在<code>Vue</code>实例的作用范围内使用组件</p><p>比如下例的<code>id="app"</code>下才有效</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h3><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><p>在<code>Vue</code>实例外注册的都是全局组件，只要在<code>Vue</code>的实例范围内使用都可以</p><p>调用<code>Vue.component()</code>方法</p><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><p>在<code>Vue</code>实例内注册组件，这个组件只可以在自己的组件范围内使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//cpn使用组件时的标签名</span>                cpn<span class="token punctuation">:</span>cpnC            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre><code>components:{       //cpn使用组件时的标签名       cpn:cpnC}</code></pre><p>上面的局部组件只可以在<code>id="app"</code>的实例范围内使用这个组件</p><h3 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h3><p>可以在组件内调用组件</p><p>例如我们创建了cpnC1 组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpnC1 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签1&lt;/h2>                &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>            &lt;/div>                `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>接着我们创建第二个组件cpnC2 ，在这个组件内我们想调用第一个组件,我们可以在第二个组件注册第一个组件：<code>components : { cpn1 : cpnC1 }</code>，这样就可以在第二个组件内使用组件一了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpnC2 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签2&lt;/h2>                &lt;p>我是内容，谢谢谢谢谢谢&lt;/p>                &lt;cpn1>&lt;/cpn1>            &lt;/div>                `</span></span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>               cpn1<span class="token punctuation">:</span>cpnC1             <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>同时我们使用组件二的时候也需要注册组件二才可以</p><h3 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h3><p>省去创建的过程，提供注册的语法糖</p><p>我们原来使用组件，首先通过<code>const&nbsp;cpnC1&nbsp;= Vue.extend({...})</code> 创建一个组件，然后注册这个组件<code>Vue.component("cpn1", cpnC1)</code></p><p>我们可以通过语法糖省去第一步创建全局组件：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"cpn1"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签1&lt;/h2>                &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>            &lt;/div>                `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>创建局部组件如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'cpn1'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                        &lt;div>                            &lt;h2>我是标签1&lt;/h2>                            &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>                        &lt;/div>                            `</span></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="组件模板的分离写法"><a href="#组件模板的分离写法" class="headerlink" title="组件模板的分离写法"></a>组件模板的分离写法</h3><h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><p>类型必须是<code>text/x-template</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是标题<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是内容哈哈哈哈<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后注册组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//注册一个全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后在实例范围内调用组件就可以了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="template标签"><a href="#template标签" class="headerlink" title="template标签"></a>template标签</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是内容哈哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>然后注册和调用同上</p><h3 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h3><h4 id="1、组件内部可以访问Vue里的数据吗？"><a href="#1、组件内部可以访问Vue里的数据吗？" class="headerlink" title="1、组件内部可以访问Vue里的数据吗？"></a>1、组件内部可以访问<code>Vue</code>里的数据吗？</h4><p>不能访问，组件是一个单独功能模块的封装，那么组件自己的数据放在哪呢？</p><p>组件对象里也有一个data属性(也可以有methods等属性)，只是这个data属性必须是一个函数，而且这个函数返回一个对象，对象内部保存数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>组件内的数据：：{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>          template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>          <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span><span class="token punctuation">{</span>                  title<span class="token punctuation">:</span><span class="token string">"我是组件内的数据"</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>只有这样才能保存组件内的数据</p><h4 id="2、组件内的data为什么必须是一个函数？"><a href="#2、组件内的data为什么必须是一个函数？" class="headerlink" title="2、组件内的data为什么必须是一个函数？"></a>2、组件内的data为什么必须是一个函数？</h4><p>因为组件封装后就会是一个独立的单位，调用相同组件多次，内部数据由于是用函数保存的，用函数保存，每一次一个新的组件需要的数据都是一个新的地址保存各自的数据，所以不会污染。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        counter<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果使用对象data保存数据，调用多次的时候，修改一个data，其他data数据也会被污染，因为调用对象的实质是调用了对象的地址，如果数据用对象保存，那么相同组件调用的都是同一个对象地址</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        counter<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面使用对象保存数据，就会报错</p><h3 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h3><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>上一节中，我们知道子组件不能引用父组件或者<code>Vue</code>实例的数据的</p><p>但是我们在开发中确实需要一些数据展示在小组间中</p><p>这时候我们不会让小组件再发送一次网络请求，而是直接让父组件将数据传递给子组件</p><h4 id="如何父子组件通信？"><a href="#如何父子组件通信？" class="headerlink" title="如何父子组件通信？"></a>如何父子组件通信？</h4><h5 id="父传子：通过props向子组件传递数据"><a href="#父传子：通过props向子组件传递数据" class="headerlink" title="父传子：通过props向子组件传递数据"></a>父传子：通过props向子组件传递数据</h5><p>父组件的数据：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span><span class="token punctuation">,</span>        movies<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'海王'</span><span class="token punctuation">,</span><span class="token string">'海贼王'</span><span class="token punctuation">,</span><span class="token string">'海尔兄弟'</span><span class="token punctuation">,</span><span class="token string">'火影忍者'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        cpn    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="props用数组接收数据"><a href="#props用数组接收数据" class="headerlink" title="props用数组接收数据"></a>props用数组接收数据</h6><p>首先在<code>props</code>里定义接收数据的容器名字（<strong>注意这里不支持驼峰命名，因为v-bind不支持驼峰命名</strong>）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpn <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn2'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'cmovies'</span><span class="token punctuation">,</span><span class="token string">'cmessage'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在调用组件的标签内绑定父组件传过来的数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>cmovies</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span> <span class="token attr-name">:cmessage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样子组件内就能接收到父组件的数据了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是子组件内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in cmovies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>得到父组件数据电影名称--->{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>得到父组件数据短信--->{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h6 id="props用对象接收数据"><a href="#props用对象接收数据" class="headerlink" title="props用对象接收数据"></a>props用对象接收数据</h6><p>用这种方法，还需要对传过来的数据进行一个验证，对传过来的数据有一个类型限制，还可以设置默认值<code>default</code>，还有如果<code>required:true</code>，调用的时候必须绑定这个属性</p><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span><span class="token punctuation">{</span>    cmovies<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    cmessage<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'aaaaaa'</span><span class="token punctuation">,</span>        required<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="子传父：通过事件向父组件发送消息"><a href="#子传父：通过事件向父组件发送消息" class="headerlink" title="子传父：通过事件向父组件发送消息"></a>子传父：通过事件向父组件发送消息</h5><p>举个例子，从子组件传递子组件的点击事件回到父组件，并且获得点击的id</p><h6 id="首先在子组件定义一个点击事件："><a href="#首先在子组件定义一个点击事件：" class="headerlink" title="首先在子组件定义一个点击事件："></a>首先在子组件定义一个点击事件：</h6><p><code>@click="btnClick(item)"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in categories<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h6 id="在子组件的方法里发送给父组件："><a href="#在子组件的方法里发送给父组件：" class="headerlink" title="在子组件的方法里发送给父组件："></a>在子组件的方法里发送给父组件：</h6><p><code>this.$emit('itemclick',item.id)</code></p><p>注意这里自定义的方法名不能用驼峰命名</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把点击事件传给父组件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'itemclick'</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="父组件的标签上接收这个事件"><a href="#父组件的标签上接收这个事件" class="headerlink" title="父组件的标签上接收这个事件"></a>父组件的标签上接收这个事件</h6><p><code>@itemclick="cpnClick"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">@itemclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h6 id="在父组件的方法里就可以得到子组件传来的数据了"><a href="#在父组件的方法里就可以得到子组件传来的数据了" class="headerlink" title="在父组件的方法里就可以得到子组件传来的数据了"></a>在父组件的方法里就可以得到子组件传来的数据了</h6><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">cpnClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出的是点击的子组件的id</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-on</title>
      <link href="2019/10/17/v-on/"/>
      <url>2019/10/17/v-on/</url>
      
        <content type="html"><![CDATA[<h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><h3 id="v-on的语法糖"><a href="#v-on的语法糖" class="headerlink" title="v-on的语法糖"></a><code>v-on</code>的语法糖</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>increment<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>decrement<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                counter<span class="token punctuation">:</span><span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a><code>v-on</code>参数</h3><p>通过<code>methods</code>中定义方法，以供<code>@click</code>调用的时候，需要注意参数问题</p><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>如果该方法不需要额外参数，那么方法后的()可以不添加</p><p>注意：在事件定义时，写函数时省略了小括号，但是方法本身是需要一个参数的，这个时候，<code>vue</code>会默认将浏览器生产的<code>event</code>事件对象作为参数传入到方法中</p><h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p>方法定义的时候我们需要<code>event</code>对象，同时也需要其他的参数</p><p>在调用方法时我们需要使用<code>$event</code>手动获取到浏览器参数的<code>event</code>对象</p><p><img src="https://i.loli.net/2020/11/05/mrp7toyRNbfFSWI.png" alt="v-on传参.png"><br><img src="https://i.loli.net/2020/11/05/Lvu2ElxFsI4kVYK.png" alt="v-on传参结果.png"></p><h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a><code>v-on</code>修饰符</h3><h4 id="阻止事件冒泡-stop"><a href="#阻止事件冒泡-stop" class="headerlink" title="阻止事件冒泡.stop"></a>阻止事件冒泡<code>.stop</code></h4><p><code>@click.stop="btnClick"</code></p><h4 id="阻止默认事件-prevent"><a href="#阻止默认事件-prevent" class="headerlink" title="阻止默认事件.prevent"></a>阻止默认事件<code>.prevent</code></h4><p><code>@click.prevent="submitClick"</code>例如点击<code>submit</code>自动提交数据，使用该修饰符之后，点击后会触发方法，而不会默认提交数据</p><h4 id="监听键盘的键帽"><a href="#监听键盘的键帽" class="headerlink" title="监听键盘的键帽"></a>监听键盘的键帽</h4><p><code>@keyup.enter="keyup"</code>这个是监听到点击<code>enter</code>后执行<code>keyup</code>方法</p><h4 id="监听组件根元素的原生事件-native"><a href="#监听组件根元素的原生事件-native" class="headerlink" title="监听组件根元素的原生事件.native"></a>监听组件根元素的原生事件<code>.native</code></h4><h4 id="只触发一次回调-once"><a href="#只触发一次回调-once" class="headerlink" title="只触发一次回调.once"></a>只触发一次回调<code>.once</code></h4><p><code>@click.once="btnClick"</code>只会第一次点击触发该方法</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> v-on指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算属性computed</title>
      <link href="2019/10/16/ji-suan-shu-xing/"/>
      <url>2019/10/16/ji-suan-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</p><p>但是在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><pre><code>比如我们有`firstName`和`lastName`两个变量，我们需要显示完整的名称但是如果多个地方都需要显示完整的名称，我们就需要写多个`{{firstName}}`和`{{lastName}}`</code></pre><p>我们可以将上面的代码换成计算属性：</p><pre><code>我们发现计算属性是写在实例的`computed`选项中的</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{firstName+'  '+lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{firstName}} {{lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{getFullName()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                 firstName<span class="token punctuation">:</span> <span class="token string">'Lebron'</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span><span class="token string">'James'</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 计算属性，一般不用动词 */</span>                fullName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'  '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                getFullName <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'  '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>计算属性不要加小括号()</p><h3 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>总价格:{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                books<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">110</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Unix编程艺术'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">119</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'代码大全'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">105</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">112</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'深入理解计算机原理'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">113</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'现代操作系统'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">87</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                totalPrice<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> result  <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> result                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的<code>setter</code>和<code>getter</code></h3><p>我们之前在计算属性的基础操作中使用了一个方法<code>fullName</code>,如下</p><pre><code>fullName:function(){                    return this.firstName + '  ' + this.lastName                }</code></pre><p>其实是这样的</p><pre><code>computed: {                fullName:{                    set:function(){                    },                    get:function(){                        return this.firstName + '  ' + this.lastName                    }                }            }</code></pre><p>其中<code>set</code>属性是不需要实现的，我们不希望计算属性有<code>set</code>属性，其实计算属性是个只读属性，如下</p><pre><code>computed: {                fullName:{                    get:function(){                        return this.firstName + '  ' + this.lastName                    }                }            }</code></pre><p>我们方便使用就使用第一种方式</p><p><strong>计算属性的方法，即使调用多次，计算属性也只是调用了一次，内部是有缓存的</strong>，如果方法的返回结果不变，就不会重复调用多次，直接调用缓存。</p><p><strong>使用<code>methods</code>的时候，调用几次，函数就会调用几次</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> computed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基本语法</title>
      <link href="2019/10/11/vue-ji-ben-yu-fa/"/>
      <url>2019/10/11/vue-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基本语法"><a href="#Vue基本语法" class="headerlink" title="Vue基本语法"></a>Vue基本语法</h1><h3 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h3><h4 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a><code>Mustache</code></h4><p><code>Mustache</code>语法:双大括号</p><p><code>Mustache</code>:胡须/胡子</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{message}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{firstName+' '+lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{counter*2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span><span class="token punctuation">,</span>                firstName<span class="token punctuation">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span> <span class="token string">'Bryant'</span><span class="token punctuation">,</span>                counter<span class="token punctuation">:</span> <span class="token number">1900</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a><code>v-once</code>指令</h4><p>只会在第一次显示数据，之后修改并不会改变</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><code>v-html</code></h4><p>解析字符串，识别a标签，并且能解析<code>href</code>地址</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">'&lt;a href="https://www.baidu.com">百度一下&lt;/a>'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a><code>v-text</code></h4><p>用起来并不灵活，会覆盖后面的内容</p><pre><code>&lt;div id="app"&gt;        &lt;h2 v-once&gt;{{message}},李银河&lt;/h2&gt;            //你好啊,李银河        &lt;h2 v-text="message"&gt;,李银河&lt;/h2&gt;            //你好啊    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        let app = new Vue({            el: `#app`,            data: {                message: '你好啊'            }        })    &lt;/script&gt;</code></pre><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a><code>v-pre</code></h4><p>不解析<code>Mustache</code>语法，将内容原封不动输出</p><pre><code>&lt;div id="app"&gt;        &lt;h2 v-pre&gt;{{message}},李银河&lt;/h2&gt;        //{{message}},李银河    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        let app = new Vue({            el: `#app`,            data: {                message: '你好啊'            }        })    &lt;/script&gt;</code></pre><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a><code>v-cloak</code></h4><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><code>v-bind</code></h4><p>动态绑定属性</p><pre><code>&lt;div id="app"&gt;        {{message}}        &lt;a v-bind:href="url"&gt;百度一下&lt;/a&gt;    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;let app = new Vue({            el: `#app`,            data: {                message: '你好啊',                url:'https://www.baidu.com'            }        })    &lt;/script&gt;</code></pre><p>语法糖（简写）：</p><p><code>&lt;a :href="url"&gt;百度一下&lt;/a&gt;</code></p><h4 id="v-bind动态绑定class属性"><a href="#v-bind动态绑定class属性" class="headerlink" title="v-bind动态绑定class属性"></a><code>v-bind</code>动态绑定<code>class</code>属性</h4><p>点击按钮切换<code>class</code></p><pre><code>&lt;!-- css --&gt;&lt;style&gt;        .active{            color: red;        }        .line{            font-size: larger;        }&lt;/style&gt;&lt;!-- html --&gt;    &lt;div id="app"&gt;        &lt;h2 class="title" v-bind:class="{active:isActive,line:isLine}"&gt;{{message}}&lt;/h2&gt;        &lt;button v-on:click="btnClick"&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;let app = new Vue({            el: `#app`,            data: {                message:'Hello Vuejs',                isActive:true,                isLine:true            },            methods:{                btnClick:function(){                    this.isActive=!this.isActive,                    this.isLine=!this.isLine                }            }        })    &lt;/script&gt;</code></pre><p><img src="https://i.loli.net/2020/11/05/OAr2TMR5pLj9vPw.png" alt="v-bind绑定class.png"><br><img src="https://i.loli.net/2020/11/05/cTLMvb8mFaRqlu5.png" alt="v-bind绑定class2.png"></p><h5 id="绑定方式一、对象语法"><a href="#绑定方式一、对象语法" class="headerlink" title="绑定方式一、对象语法"></a>绑定方式一、对象语法</h5><p>用法有：</p><p>1、通过一个对象绑定一个类(可以传多个值)，并且和普通类同时存在并不冲突</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active:isActive,line:isLine}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>2、如果用法过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</p><pre class=" language-html"><code class="language-html">//hmtl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getClasses()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>//jslet app = new Vue({            el: `#app`,            data: {                message:'Hello Vuejs',                isActive:true,                isLine:true            },            methods:{                btnClick:function(){                    this.isActive=!this.isActive,                    this.isLine=!this.isLine                },                getClasses:function(){                    return {active:this.isActive,line:this.isLine}                }            }        })</code></pre><h5 id="绑定方式二、数组语法"><a href="#绑定方式二、数组语法" class="headerlink" title="绑定方式二、数组语法"></a>绑定方式二、数组语法</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>active<span class="token punctuation">'</span>,<span class="token punctuation">'</span>line<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>注意：其中<code>active</code>加引号就是字符串，不加引号就是变量</p><h4 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-<code>bind</code>绑定<code>style</code></h4><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>属性值需要加引号，使之解析成为字符串，不加引号就会解析成为变量,如下50px必须加引号，否则会被当成变量解析</p><p>对象的值可以来自于<code>data</code>中的属性</p><pre><code>&lt;h2 class="title" :style="{fontSize:'50px'}"&gt;{{message}}&lt;/h2&gt;&lt;h2 class="title" :style="{fontSize:finaSize + 'px',backgroundColor:finaColor}"&gt;{{message}}&lt;/h2&gt;</code></pre><p><img src="https://i.loli.net/2020/11/05/xpUDdeOoZSz6cV3.png" alt="v-bind绑定style.png"></p><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><pre><code>&lt;h2 class="title" :style="[baseStyle1 , baseStyle2]"&gt;{{message}}&lt;/h2&gt;</code></pre><pre><code>data: {     message:'Hello Vuejs',     baseStyle1:{backgroundColor:'red'},     baseStyle2:{fontSize:'100px'}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Mustache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVVM</title>
      <link href="2019/10/08/mvvm/"/>
      <url>2019/10/08/mvvm/</url>
      
        <content type="html"><![CDATA[<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><h3 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是<code>MVVM</code></h3><h4 id="View层"><a href="#View层" class="headerlink" title="View层"></a><code>View</code>层</h4><p>视图层</p><p>在我们前端开发中，通常就是DOM层</p><p>主要的作用是给用户展示各种信息</p><h4 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a><code>Model</code>层</h4><p>数据层</p><p>数据可能是我们固定的死数据，更多的是来自我们服务器，网络上请求下来的数据</p><p>在我们的计数器案例中，就是后面抽取出来的<code>obj</code></p><h4 id="VueModel层"><a href="#VueModel层" class="headerlink" title="VueModel层"></a><code>VueModel</code>层</h4><p>视图模型层</p><p>视图模型层是<code>View</code>和<code>Model</code>沟通的桥梁</p><p>一方面它实现了<code>Data Binding</code>,也就是数据绑定，将<code>Model</code>的改变实时反应到<code>View</code>中</p><p>另一方面它实现了一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的Data。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue简介和安装</title>
      <link href="2019/10/03/vue-jian-jie-he-an-zhuang/"/>
      <url>2019/10/03/vue-jian-jie-he-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="vue简介和安装"><a href="#vue简介和安装" class="headerlink" title="vue简介和安装"></a>vue简介和安装</h1><h3 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a><code>Vue</code>简介</h3><h4 id="vue是一个渐进式框架"><a href="#vue是一个渐进式框架" class="headerlink" title="vue是一个渐进式框架"></a><code>vue</code>是一个渐进式框架</h4><p>渐进式意味着你可以将<code>vue</code>作为你应用的一部分嵌套进去，带来更丰富的交互体验</p><p>或者你希望将更多的业务逻辑使用<code>vue</code>实现，那么<code>vue</code>的核心库以及其生态系统比如<code>Core+Vue+router+Vuex</code>，也可以满足各种需求</p><h4 id="Vue有很多特点和Web开发中常见的高级功能"><a href="#Vue有很多特点和Web开发中常见的高级功能" class="headerlink" title="Vue有很多特点和Web开发中常见的高级功能"></a><code>Vue</code>有很多特点和<code>Web</code>开发中常见的高级功能</h4><h5 id="解耦视图和数据"><a href="#解耦视图和数据" class="headerlink" title="解耦视图和数据"></a>解耦视图和数据</h5><h5 id="可复用组件"><a href="#可复用组件" class="headerlink" title="可复用组件"></a>可复用组件</h5><h5 id="前端路由技术"><a href="#前端路由技术" class="headerlink" title="前端路由技术"></a>前端路由技术</h5><h5 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h5><h5 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h5><h3 id="Vue的安装"><a href="#Vue的安装" class="headerlink" title="Vue的安装"></a><code>Vue</code>的安装</h3><h4 id="一、直接CDN引入"><a href="#一、直接CDN引入" class="headerlink" title="一、直接CDN引入"></a>一、直接CDN引入</h4><pre><code>&lt;!-- 开发环境版本，包含有帮助的命令行警告 --&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt;</code></pre><p>在<code>vue</code>官网右键链接另存为就可以下载下来了</p><h4 id="二、下载和引入"><a href="#二、下载和引入" class="headerlink" title="二、下载和引入"></a>二、下载和引入</h4><p>开发环境：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></p><p>生产环境：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></p><h4 id="三、NPM安装"><a href="#三、NPM安装" class="headerlink" title="三、NPM安装"></a>三、NPM安装</h4><p>后续通过<code>webpack</code>和<code>CLI</code>的使用，我们使用这个方式</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 渐进式框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
