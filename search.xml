<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript的基本使用</title>
      <link href="2020/01/30/typescript/"/>
      <url>2020/01/30/typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="1-1-TS简介"><a href="#1-1-TS简介" class="headerlink" title="1.1 TS简介"></a>1.1 TS简介</h2><p>TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。</p><p>TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。</p><p>和 JavaScript 弱类型不同，TypeScript 这种强类型语言最大的优势在于静态类型检查，可以在代码开发阶段就预知一些低级错误的发生。</p><ul><li>一种类似于 JavaScript 的语言，在 JavaScript 的基础之上增加了类型，同时增强了 JavaScript 部分语法功能</li><li>遵循 EcmaScript 6 标准规范</li><li>由微软开发</li><li>Angular 2 框架采用 TypeScript 编写</li><li>背后有微软和谷歌两大公司的支持</li><li>TypeScript 可以编译成 JavaScript 从而在支持 JavaScript 的环境中运行</li><li>TypeScript 和 JavaScript 的关系就好比 less 和 css 的关系</li></ul><p>TypeScript 中文网     <a href="https://www.tslang.cn/">https://www.tslang.cn/</a></p><p>在线编译环境              <a href="https://www.typescriptlang.org/play/index.html">https://www.typescriptlang.org/play/index.html</a></p><h2 id="1-2-TS环境搭建"><a href="#1-2-TS环境搭建" class="headerlink" title="1.2 TS环境搭建"></a>1.2 TS环境搭建</h2><ol><li>打开命令行，键入<code>npm i -g typescript</code> 全局安装TS</li><li>继续在命令行环境下键入 <code>tsc -init</code> 进行初始化，<br>你会发现根目录下多了 tsconfig.json 的文件，记录了编译成JS的选项</li><li>创建ts文件</li><li>打开VSCode进入该目录，按下 Ctrl+shift+B 快捷键会进行编译，初次编译会选择编译模式</li><li>输入node命令运行js代码</li></ol><h2 id="1-3-变量声明"><a href="#1-3-变量声明" class="headerlink" title="1.3 变量声明"></a>1.3 变量声明</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">var</span><span class="token operator">-</span> 作用域 <span class="token punctuation">:</span> 全局作用域、函数作用域<span class="token operator">-</span> 重复声明<span class="token operator">-</span> 变量提升<span class="token keyword">let</span><span class="token operator">-</span> 块级作用域<span class="token operator">-</span> 在同一个块中不能重复声明<span class="token keyword">const</span><span class="token operator">-</span> 声明同时必须赋值<span class="token operator">-</span> 一旦声明不可改变（对象可以修改）<span class="token operator">-</span> 块级作用域</code></pre><h2 id="1-4-基本数据类型"><a href="#1-4-基本数据类型" class="headerlink" title="1.4 基本数据类型"></a>1.4 基本数据类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//字符串</span><span class="token keyword">var</span> uname<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span><span class="token keyword">let</span> nickname<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my nickname is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> nickname <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.I'll be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> age <span class="token operator">+</span> <span class="token number">1</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.`</span></span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//数组</span><span class="token comment" spellcheck="true">//TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种方式是使用数组泛型，Array&lt;元素类型>：</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ts的数组只能存放单一数据类型的元素，元组则可以很好的解决此问题。</span><span class="token comment" spellcheck="true">//元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span><span class="token comment" spellcheck="true">// Declare a tuple type</span><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Initialize it</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// Initialize it incorrectly</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//object类型</span><span class="token operator">-</span> 允许赋任意值<span class="token operator">-</span> 但是不能调用任意方法，即便它真的有<span class="token keyword">let</span> foo<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//知道即可，用的很少，没有类型校验和语法提示</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Any</span><span class="token comment" spellcheck="true">//有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</span><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">"maybe a string instead"</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, definitely a boolean</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Void 类型</span><span class="token comment" spellcheck="true">//void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</span><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"This is my warning message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined：</span><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//Null 和 Undefined</span><span class="token comment" spellcheck="true">// Not much else we can assign to these variables!</span><span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//never    </span>never 是其它类型（包括 <span class="token keyword">null</span> 和 undefined）的子类型，代表从不会出现的值。<span class="token keyword">let</span> x<span class="token punctuation">:</span> never<span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行错误，数字类型不能转为 never 类型</span>x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行正确，never 类型可以赋值给 never类型</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行正确，never 类型可以赋值给 数字类型</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回值为 never 的函数可以是抛出异常的情况</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//类型推断</span><span class="token comment" spellcheck="true">// 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span><span class="token comment" spellcheck="true">// 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span><span class="token comment" spellcheck="true">// 类型断言有两种形式。 其一是“尖括号”语法：</span><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//另一个为as语法：</span><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//枚举类型</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Blue<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 2</span></code></pre><h2 id="1-5-解构赋值"><a href="#1-5-解构赋值" class="headerlink" title="1.5 解构赋值"></a>1.5 解构赋值</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//数组解构</span><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 2</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//上面的写法等价于：</span>first <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>second <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//利用解构赋值交换变量：</span><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>second<span class="token punctuation">,</span> first<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//函数参数解构：</span><span class="token comment" spellcheck="true">//函数参数解构：</span><span class="token keyword">function</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//解构剩余参数：</span><span class="token keyword">let</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 3, 4]</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//也可以忽略其它参数：</span><span class="token keyword">let</span> <span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 1</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//或者跳过解构：</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token punctuation">,</span> fourth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//对象解构</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token string">"bar"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//let { a, b } = o;</span><span class="token comment" spellcheck="true">//let {a, b}: {a: string, b: number} = o;</span><span class="token comment" spellcheck="true">//你可以在对象里使用 ... 语法创建剩余变量：</span><span class="token keyword">let</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>passthrough <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> passthrough<span class="token punctuation">.</span>b <span class="token operator">+</span> passthrough<span class="token punctuation">.</span>c<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性解构重命名</span><span class="token comment" spellcheck="true">//你也可以给属性以不同的名字：</span><span class="token keyword">let</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> newName1<span class="token punctuation">,</span> b<span class="token punctuation">:</span> newName2 <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span></code></pre><h2 id="1-6-展开操作符-…"><a href="#1-6-展开操作符-…" class="headerlink" title="1.6 展开操作符 (…)"></a>1.6 展开操作符 (…)</h2><ul><li>展开数组</li><li>展开对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span>obj3<span class="token punctuation">)</span></code></pre><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//函数参数</span><span class="token comment" spellcheck="true">//参数及返回值类型</span><span class="token comment" spellcheck="true">//function 函数名字(参数1,参数2,参数3):函数返回值{函数体}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//可选参数</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//默认参数</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//剩余参数</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> ret<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span>    args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        ret <span class="token operator">+</span><span class="token operator">=</span> item    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//箭头函数</span><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y</code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span><span class="token comment" spellcheck="true">//每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span><span class="token comment" spellcheck="true">//参数类型不同：</span><span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数数量不同：</span><span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>n1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数类型顺序不同：</span><span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>n1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>s1<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">disp</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>n<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span></code></pre><h2 id="1-8-联合类型"><a href="#1-8-联合类型" class="headerlink" title="1.8 联合类型"></a>1.8 联合类型</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</span><span class="token keyword">var</span> val<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token operator">|</span><span class="token keyword">number</span> val <span class="token operator">=</span> <span class="token number">12</span> val <span class="token operator">=</span> <span class="token string">"Runoob"</span> <span class="token keyword">var</span> arr<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> i<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Runoob"</span><span class="token punctuation">,</span><span class="token string">"Google"</span><span class="token punctuation">,</span><span class="token string">"Taobao"</span><span class="token punctuation">]</span> </code></pre><h2 id="1-9-类"><a href="#1-9-类" class="headerlink" title="1.9 类"></a>1.9 类</h2><h3 id="1-9-1-类的基本使用"><a href="#1-9-1-类的基本使用" class="headerlink" title="1.9.1 类的基本使用"></a>1.9.1 类的基本使用</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//基本示例</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> zs<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-8-2-super关键字的使用"><a href="#1-8-2-super关键字的使用" class="headerlink" title="1.8.2 super关键字的使用"></a>1.8.2 super关键字的使用</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//继承</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Animal moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof! Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</span><span class="token comment" spellcheck="true">//因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//下面是一个更复杂的例子：</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Slithering..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Galloping..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> sam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">"Sammy the Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">"Tommy the Palomino"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sam<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</span><span class="token comment" spellcheck="true">//这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：</span>Slithering<span class="token operator">...</span>Sammy the Python moved 5m<span class="token punctuation">.</span>Galloping<span class="token operator">...</span>Tommy the Palomino moved 34m<span class="token punctuation">.</span></code></pre><h3 id="1-9-3-成员修饰符"><a href="#1-9-3-成员修饰符" class="headerlink" title="1.9.3 成员修饰符"></a>1.9.3 成员修饰符</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//public 公共的</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//private 私有的</span><span class="token operator">-</span> 不能被外部访问，只能在类的内部访问使用<span class="token operator">-</span> 私有成员不会被继承<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> type<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'human'</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//protected 受保护的</span><span class="token operator">-</span> 和 <span class="token keyword">private</span> 类似，但是可以被继承<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Howard"</span><span class="token punctuation">,</span> <span class="token string">"Sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span><span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误</span><span class="token comment" spellcheck="true">//注意，我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为Employee是由 Person派生而来的。</span></code></pre><h3 id="1-9-4-getter和setter"><a href="#1-9-4-getter和setter" class="headerlink" title="1.9.4 getter和setter"></a>1.9.4 getter和setter</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> _name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hi, my name is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-9-5-静态成员"><a href="#1-9-5-静态成员" class="headerlink" title="1.9.5 静态成员"></a>1.9.5 静态成员</h3><ul><li>不需要实例化访问的成员称之为静态成员，即只能被类访问的成员</li><li><code>static</code> 关键字</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态变量</span>    <span class="token keyword">static</span> country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//京塔方法</span>    <span class="token keyword">static</span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>country<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//静态变量，直接通过类型来访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>country<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//错误</span></code></pre><h2 id="1-10-接口"><a href="#1-10-接口" class="headerlink" title="1.10 接口"></a>1.10 接口</h2><p>在面向对象编程中，接口是一种规范的定义，它定义了行为和动作规范，起到一种限制和规范的作用。<br>接口不关心状态数据，也不关心方法的实现细节，它只规定了一些属性和方法，而实现接口的类必须提供具体的信息。</p><h3 id="1-10-1-接口对类的规范"><a href="#1-10-1-接口对类的规范" class="headerlink" title="1.10.1 接口对类的规范"></a>1.10.1 接口对类的规范</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//定义一个人的接口</span><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//让老师类实现Human接口，老师类实现接口的时候必须提供接口的具体信息</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"老师"</span><span class="token punctuation">;</span>    age <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"老师说"</span><span class="token operator">+</span>word<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//让学生类实现Human接口，学生类实现接口的时候必须提供接口的具体信息</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"学生"</span><span class="token punctuation">;</span>    age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"学生说"</span><span class="token operator">+</span>word<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-10-2-接口对对象的规范"><a href="#1-10-2-接口对对象的规范" class="headerlink" title="1.10.2 接口对对象的规范"></a>1.10.2 接口对对象的规范</h3><p>TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    head<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    arm<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    shape<span class="token punctuation">:</span> Shape<span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    shape<span class="token punctuation">:</span> <span class="token punctuation">{</span>        head<span class="token punctuation">:</span> <span class="token string">'head'</span><span class="token punctuation">,</span>        arm<span class="token punctuation">:</span> <span class="token string">'arm'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>jack<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span></code></pre><h3 id="1-10-3-接口可选属性"><a href="#1-10-3-接口可选属性" class="headerlink" title="1.10.3 接口可选属性"></a>1.10.3 接口可选属性</h3><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    gender<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    gender<span class="token punctuation">:</span> <span class="token string">'Male'</span>    <span class="token comment" spellcheck="true">// 可以不赋值 age 属性，因为是可选的</span><span class="token punctuation">}</span></code></pre><h3 id="1-10-4-接口只读属性"><a href="#1-10-4-接口只读属性" class="headerlink" title="1.10.4 接口只读属性"></a>1.10.4 接口只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>来指定只读属性:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">}</span>jack<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Ivan'</span> <span class="token comment" spellcheck="true">// 报错: name 是只读的</span></code></pre><p><code>readonly</code> vs <code>const</code></p><ul><li>常量使用 const</li><li>对象属性使用 readonly</li></ul><h3 id="1-10-5-函数接口"><a href="#1-10-5-函数接口" class="headerlink" title="1.10.5 函数接口"></a>1.10.5 函数接口</h3><p>因为函数也是对象，所以我们也可以通过接口来对函数做“规定”。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>a<span class="token punctuation">:</span> number<span class="token punctuation">,</span> b<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> add<span class="token punctuation">:</span> Fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> number<span class="token punctuation">,</span> b<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="1-10-6-接口继承"><a href="#1-10-6-接口继承" class="headerlink" title="1.10.6 接口继承"></a>1.10.6 接口继承</h3><p>就像 ES6 的 class 一样，接口也可以做继承操作，效果就是会继承父接口的“规定”。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> jack<span class="token punctuation">:</span> Human <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'move'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-11-命名空间"><a href="#1-11-命名空间" class="headerlink" title="1.11 命名空间"></a>1.11 命名空间</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//命名空间就是内部模块，目的就是解决重名问题。</span><span class="token comment" spellcheck="true">//a.ts  声明命名空间</span><span class="token comment" spellcheck="true">//TypeScript 的命名空间只对外暴露需要在外部访问的对象，命名空间内的对象通过 export 关键字对外暴露</span>namespace Utils <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>      age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//my.ts  使用命名空间</span><span class="token comment" spellcheck="true">// reference 引用命名空间(可以加也可以不加)</span><span class="token comment" spellcheck="true">/// &lt;reference path="a.ts" /></span><span class="token keyword">const</span> me<span class="token punctuation">:</span> Utils<span class="token punctuation">.</span>IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'funlee'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: 'funlee', age: 18}</span></code></pre><h2 id="1-12-模块"><a href="#1-12-模块" class="headerlink" title="1.12 模块"></a>1.12 模块</h2><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的(其实就是ES6的模块化语法)</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//导出模块</span><span class="token keyword">export</span> <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string">"标题"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> title<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入模块</span><span class="token keyword">import</span> title<span class="token punctuation">,</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span>str<span class="token punctuation">,</span>say<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./a'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>str<span class="token punctuation">,</span>say<span class="token punctuation">)</span></code></pre><h2 id="1-13-声明文件"><a href="#1-13-声明文件" class="headerlink" title="1.13 声明文件"></a>1.13 声明文件</h2><blockquote><p>d.ts为声明文件  主要用作类型的声明</p></blockquote><ul><li>在d.ts使用了declare，表示全局声明类型，需要结合tsconfig.json一起使用才能<br>有效果。 (使用方式：类似于命名空间)</li><li>或者使用export的方式，在普通ts中将d.ts导入(使用方式：类似于模块)</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//data.d.ts    注意：只有声明没有实现</span><span class="token comment" spellcheck="true">//声明一个类型</span><span class="token keyword">declare</span> type StringFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个命名空间</span><span class="token keyword">declare</span> namespace API <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//导出CurrentUser接口类型</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CurrentUser</span> <span class="token punctuation">{</span>    avatar<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    title<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-14-小练习"><a href="#1-14-小练习" class="headerlink" title="1.14 小练习"></a>1.14 小练习</h2><p>写出下列ts代码的含义：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//导出一个函数 函数名字是defineConfig，函数参数是config，参数类型是IConfigFromPlugins或者IConfig，返回值是IConfigFromPlugins或者IConfig</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> IConfigFromPlugins <span class="token operator">|</span> IConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> IConfigFromPlugins <span class="token operator">|</span> IConfig<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个类型叫OverlayFunc，该类型是一个函数，该函数的返回值是ReactNode</span><span class="token keyword">declare</span> type OverlayFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导出一个类型，该类型叫SiderTheme，他的值是light或者dark</span><span class="token keyword">export</span> type SiderTheme <span class="token operator">=</span> <span class="token string">'light'</span> <span class="token operator">|</span> <span class="token string">'dark'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个常量，名字叫columns，他的类型是ProColumns的数组，数组中的元素是TableListItem</span><span class="token keyword">const</span> columns<span class="token punctuation">:</span> ProColumns<span class="token operator">&lt;</span>TableListItem<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//声明一个常量，名字叫LoginMessage，他的类型是React.FC，React.FC中接收{content: string}类型的数据。LoginMessage的值是一个箭头函数，该函数通过解构赋值或者content作为函数的入参，函数没有返回值</span><span class="token keyword">const</span> LoginMessage<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span>  content<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> content <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//type的 | 和 &amp;</span>type Env1 <span class="token operator">=</span> <span class="token string">'prod'</span> <span class="token operator">|</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token string">'dev'</span><span class="token punctuation">;</span>type Env2 <span class="token operator">=</span> <span class="token string">'prod'</span> <span class="token operator">|</span> <span class="token string">'boe'</span> <span class="token operator">|</span> <span class="token string">'ppe'</span><span class="token punctuation">;</span>type EnvUnion <span class="token operator">=</span> Env1 <span class="token operator">|</span> Env2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'prod' | 'test' | 'dev' | 'boe' | 'ppe'  取并集</span>type EnvInter <span class="token operator">=</span> Env1 <span class="token operator">&amp;</span> Env2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'prod'   取交集</span><span class="token comment" spellcheck="true">//声明一个类型叫Partial，主要作用就是将T中的每一个键可选</span>type Partial<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个类型叫Pick 主要作用选择T中的符合条件的属性</span><span class="token comment" spellcheck="true">//https://blog.csdn.net/weixin_34376986/article/details/93167453</span>type Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断T是不是继承U，如果是则取never类型，否则取T类型本身</span>type Exclude<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断T是不是继承U，如果是则取T类型，否则取never类型</span>type Extract<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> T <span class="token punctuation">:</span> never<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Omit 主要作用 选择T中除了K之外的其他属性          </span>type Omit<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span>keyof T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个常量REACT_APP_ENV，他的值是test  dev  pre 或者false中的任意一个</span><span class="token keyword">declare</span> <span class="token keyword">const</span> REACT_APP_ENV<span class="token punctuation">:</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token string">'dev'</span> <span class="token operator">|</span> <span class="token string">'pre'</span> <span class="token operator">|</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app的基本使用</title>
      <link href="2019/11/23/uniapp-ji-chu-zhi-shi/"/>
      <url>2019/11/23/uniapp-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>#1.uni-app的基本使用</p><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：极客商城项目</p><h2 id="1-1-uni-app介绍-官方网页"><a href="#1-1-uni-app介绍-官方网页" class="headerlink" title="1.1 uni-app介绍 官方网页"></a>1.1 uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h2><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><p>安装编辑器HbuilderX  <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p><h2 id="1-3-利用HbuilderX初始化项目-js"><a href="#1-3-利用HbuilderX初始化项目-js" class="headerlink" title="1.3 利用HbuilderX初始化项目(js)"></a>1.3 利用HbuilderX初始化项目(js)</h2><ul><li><p>点击HbuilderX菜单栏文件&gt;项目&gt;新建</p></li><li><p>选择uni-app,填写项目名称，项目创建的目录</p><p><img src="https://i.loli.net/2020/11/09/LmBqE7uJa2KoGQl.png"></p></li></ul><h2 id="1-4-使用vue-cli脚手架创建ts项目"><a href="#1-4-使用vue-cli脚手架创建ts项目" class="headerlink" title="1.4 使用vue/cli脚手架创建ts项目"></a>1.4 使用vue/cli脚手架创建ts项目</h2><pre class=" language-javascript"><code class="language-javascript">vue create <span class="token operator">-</span>p dcloudio<span class="token operator">/</span>uni<span class="token operator">-</span>preset<span class="token operator">-</span>vue my<span class="token operator">-</span>ts</code></pre><p><img src="https://i.loli.net/2020/11/09/4Kvbp9yzcCJ6gnj.png" alt="1602848342568.png"></p><h2 id="1-5-运行项目"><a href="#1-5-运行项目" class="headerlink" title="1.5 运行项目"></a>1.5 运行项目</h2><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h2 id="1-6-介绍项目目录和文件作用"><a href="#1-6-介绍项目目录和文件作用" class="headerlink" title="1.6 介绍项目目录和文件作用"></a>1.6 介绍项目目录和文件作用</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><p><code>unpackage</code> 就是打包目录，在这里有各个平台的打包文件</p><p><code>pages</code> 所有的页面存放目录</p><p><code>static</code> 静态资源目录，例如图片等</p><p><code>components</code> 组件存放目录</p><p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p><ul><li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.html">Vue 单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README">uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见<a href="https://uniapp.dcloud.io/api/README">uni-app接口规范</a></li><li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><h1 id="2-vue-ts语法"><a href="#2-vue-ts语法" class="headerlink" title="2.vue ts语法"></a>2.vue ts语法</h1><h2 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>image <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo"</span> src<span class="token operator">=</span><span class="token string">"/static/logo.png"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>属性绑定<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text-area"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span>view<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span>image v<span class="token operator">-</span>bind<span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>v<span class="token operator">-</span><span class="token keyword">if</span>和v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,i) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"i"</span><span class="token operator">></span>名字：<span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"flag"</span><span class="token operator">></span>显示我<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>点击事件<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"tapHandle(1,$event)"</span><span class="token operator">></span>点我传参<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">"printTitle"</span><span class="token operator">></span>点我不传参<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"title = 'ggg'"</span><span class="token operator">></span>点我修改title<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue<span class="token punctuation">,</span>        Watch    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.响应式属性，对标之前的data函数返回的对象</span>        <span class="token keyword">private</span> title<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token string">'myTitle'</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> num<span class="token punctuation">:</span> Number <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> img<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token string">'http://destiny001.gitee.io/image/monkey_02.jpg'</span>        <span class="token keyword">private</span> arr<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'刘能'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">29</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'赵四'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">39</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'宋小宝'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">49</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'小沈阳'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">59</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token keyword">private</span> flag<span class="token punctuation">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.计算属性</span>        <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Number <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3.生命周期</span>        <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> a<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onLoad~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onShow~~~~~~~~~~~"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//4.属性监听 此处是监听title的变化</span>        @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>        <span class="token function">titleChange</span><span class="token punctuation">(</span>newVal<span class="token punctuation">:</span> Number<span class="token punctuation">,</span> oldVal<span class="token punctuation">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.methods，对标之前methods中写的方法</span>        <span class="token function">printTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hahahhhaha'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">tapHandle</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> number<span class="token punctuation">,</span> event<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> event<span class="token punctuation">.</span>type<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>content <span class="token punctuation">{</span>        display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        flex<span class="token operator">-</span>direction<span class="token punctuation">:</span> column<span class="token punctuation">;</span>        align<span class="token operator">-</span>items<span class="token punctuation">:</span> center<span class="token punctuation">;</span>        justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>logo <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 200rpx<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 200rpx<span class="token punctuation">;</span>        margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 200rpx<span class="token punctuation">;</span>        margin<span class="token operator">-</span>left<span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        margin<span class="token operator">-</span>right<span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 50rpx<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>text<span class="token operator">-</span>area <span class="token punctuation">{</span>        display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>title <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token punctuation">:</span> 36rpx<span class="token punctuation">;</span>        color<span class="token punctuation">:</span> #8f8f94<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.vue-class-component：强化 Vue 组件，使用 TypeScript/装饰器 增强 Vue 组件</span><span class="token comment" spellcheck="true">//2.vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器：</span>@Emit  @Inject    @Model@Prop@Provide@Watch@Component <span class="token punctuation">(</span>从 vue<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>component 继承<span class="token punctuation">)</span></code></pre><h2 id="2-2-uni-app中组件的创建"><a href="#2-2-uni-app中组件的创建" class="headerlink" title="2.2 uni-app中组件的创建"></a>2.2 uni-app中组件的创建</h2><p><a href="https://juejin.im/post/6844903741456384014">https://juejin.im/post/6844903741456384014</a></p><p><a href="https://blog.csdn.net/sllailcp/article/details/102542796/">https://blog.csdn.net/sllailcp/article/details/102542796/</a></p><p><a href="https://www.jianshu.com/p/d8ed3aa76e9b">https://www.jianshu.com/p/d8ed3aa76e9b</a></p><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建head组件，在component中创建head.vue文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        这是头部组件    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span>Vue<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p>在其他组件中导入该组件并注册</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Head<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span>        <span class="token operator">&lt;</span>text<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token operator">|</span><span class="token function">msgFormat</span><span class="token punctuation">(</span><span class="token string">'疯狂+1'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>        <span class="token operator">&lt;</span>text v<span class="token operator">-</span>fontsize<span class="token operator">=</span><span class="token string">"15"</span><span class="token operator">></span>测试文字<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'@/components/head.vue'</span>    <span class="token comment" spellcheck="true">//@Component 装饰器可以接收一个对象作为参数，可以在对象中声明 components ，filters，directives等未提供装饰器的选项，也可以声明computed，watch等</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            Head        <span class="token punctuation">}</span><span class="token punctuation">,</span>        filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msgFormat<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> string<span class="token punctuation">,</span> arg<span class="token punctuation">:</span> string<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/少年/g</span><span class="token punctuation">,</span> arg <span class="token operator">+</span> arg2<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//只在浏览器中有效</span>        directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'fontsize'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 注意：这个 function 等同于把代码写到了 bind 和 update 中去</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> msg<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token string">'曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人'</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>使用组件</p><pre><code>&lt;Head&gt;&lt;/Head&gt;</code></pre></li></ul><h2 id="2-3-组件的生命周期函数"><a href="#2-3-组件的生命周期函数" class="headerlink" title="2.3 组件的生命周期函数"></a>2.3 组件的生命周期函数</h2><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h2 id="2-4-组件的通讯"><a href="#2-4-组件的通讯" class="headerlink" title="2.4 组件的通讯"></a>2.4 组件的通讯</h2><h3 id="2-4-1-父组件给子组件传值"><a href="#2-4-1-父组件给子组件传值" class="headerlink" title="2.4.1 父组件给子组件传值"></a>2.4.1 父组件给子组件传值</h3><p>head.vue通过@props来接受外界传递到组件内部的值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        这是头部组件    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue<span class="token punctuation">,</span>        Prop    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        @Prop(options: (PropOptions | Constructor[] | Constructor) = {})        @Prop装饰器接收一个参数，这个参数可以有三种写法：        Constructor，例如String，Number，Boolean等，指定 prop 的类型；        Constructor[]，指定 prop 的可选类型；        PropOptions，可以使用以下选项：type，default，required，validator。        */</span>        <span class="token comment" spellcheck="true">//!表示非null 非undefined</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> readonly name<span class="token operator">!</span><span class="token punctuation">:</span> string <span class="token operator">|</span> undefined<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> Number        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">private</span> age<span class="token operator">!</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">[</span>String<span class="token punctuation">,</span> Boolean<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">private</span> sex<span class="token operator">!</span><span class="token punctuation">:</span> string <span class="token operator">|</span> boolean<span class="token punctuation">;</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>其他组件在使用head组件的时候传递值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Head <span class="token punctuation">:</span>name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> <span class="token punctuation">:</span>sex<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'@/components/head.vue'</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span>            Head        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> sex <span class="token operator">=</span> <span class="token string">'nan'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="2-4-2-子组件给父组件传值"><a href="#2-4-2-子组件给父组件传值" class="headerlink" title="2.4.2 子组件给父组件传值"></a>2.4.2 子组件给父组件传值</h3><p>通过@emit触发事件进行传递参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父组件</span><span class="token operator">&lt;</span>Head <span class="token punctuation">:</span>name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> <span class="token punctuation">:</span>sex<span class="token operator">=</span><span class="token string">"sex"</span> @del<span class="token operator">=</span><span class="token string">"delFromChild"</span> @add<span class="token operator">=</span><span class="token string">"addFromChild"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span><span class="token function">addFromChild</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// this.emitData = data;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">"父组件 returnPersons"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">delFromChild</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">,</span>data<span class="token punctuation">:</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(this.emitData);</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">"父组件 delemit"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//子组件</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"del($event,{id:1})"</span><span class="token operator">></span>点击触发del emit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add({name:'张三'})"</span><span class="token operator">></span>点击触发add emit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token comment" spellcheck="true">/*        @Emit 装饰器接收一个可选参数，该参数是$Emit的第一个参数，充当事件名。如果没有提供这个参数，$Emit会将回调函数名的camelCase转为kebab-case，并将其作为事件名；        @Emit会将回调函数的返回值作为第二个参数，如果返回值是一个Promise对象，$emit会在Promise对象被标记为resolved之后触发；        @Emit的回调函数的参数，会放在其返回值之后，一起被$emit当做参数使用。*/</span><span class="token comment" spellcheck="true">//当前组件的del点击事件会触发delClick执行，delClick会触发父组件传递过来的del执行，就相当于之前的this.$emit()</span>@<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token function">delClick</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">,</span> data<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">del</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> MouseEvent<span class="token punctuation">,</span> data<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">delClick</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果此处不设置别名字,则默认使用下面的函数命名,该函数既代表当前组件的点击事件，又代表触发父组件传递过来的add事件</span>@<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 此处不return,则会默认使用括号里的参数p;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-3-兄弟组件通讯"><a href="#2-4-3-兄弟组件通讯" class="headerlink" title="2.4.3 兄弟组件通讯"></a>2.4.3 兄弟组件通讯</h3><pre><code>uni.$emit(eventName,OBJECT)  触发全局的自定事件。uni.$on(eventName,callback)  监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。uni.$off([eventName, callback])  移除全局自定义事件监听器</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.head.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>text<span class="token operator">></span>这是头部<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"send"</span><span class="token operator">></span>点击向head发送数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"eventType1"</span><span class="token punctuation">,</span><span class="token string">"你好，head"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//2.foot.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>text<span class="token operator">></span>这是尾巴<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue<span class="token punctuation">,</span>        Prop<span class="token punctuation">,</span>        Emit    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"eventType1"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到来自foot的数据"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//index.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Head<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span>        <span class="token operator">&lt;</span>Foot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Foot<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'@/components/head.vue'</span>    <span class="token keyword">import</span> Foot <span class="token keyword">from</span> <span class="token string">'@/components/foot.vue'</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            Head<span class="token punctuation">,</span>            Foot        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h1 id="3-全局配置和页面配置"><a href="#3-全局配置和页面配置" class="headerlink" title="3 全局配置和页面配置"></a>3 全局配置和页面配置</h1><h2 id="3-1-通过globalStyle进行全局配置"><a href="#3-1-通过globalStyle进行全局配置" class="headerlink" title="3.1 通过globalStyle进行全局配置"></a>3.1 通过globalStyle进行全局配置</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td></tr></tbody></table><h2 id="3-2-创建新的message页面"><a href="#3-2-创建新的message页面" class="headerlink" title="3.2 创建新的message页面"></a>3.2 创建新的message页面</h2><p>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        这是信息页面    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-通过pages来配置页面"><a href="#3-3-通过pages来配置页面" class="headerlink" title="3.3 通过pages来配置页面"></a>3.3 通过pages来配置页面</h2><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><pre class=" language-html"><code class="language-html">"pages": [         {            "path":"pages/message/message"        },        {            "path": "pages/index/index",            "style": {                "navigationBarTitleText": "uni-app"            }        }    ]</code></pre><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><pre class=" language-js"><code class="language-js"><span class="token string">"pages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span>        <span class="token punctuation">{</span>            <span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"pages/message/message"</span><span class="token punctuation">,</span>            <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"navigationBarBackgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#007AFF"</span><span class="token punctuation">,</span>                <span class="token string">"navigationBarTextStyle"</span><span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>                <span class="token string">"enablePullDownRefresh"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token string">"disableScroll"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token string">"h5"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"pullToRefresh"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#007AFF"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span></code></pre><h2 id="3-4-配置tabbar"><a href="#3-4-配置tabbar" class="headerlink" title="3.4 配置tabbar"></a>3.4 配置tabbar</h2><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><pre class=" language-js"><code class="language-js"><span class="token string">"tabBar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/home.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/home-active.png"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"信息"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/message/message"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/message.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/message-active.png"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/contact/contact"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/contact.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/contact-active.png"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><h2 id="3-5-condition启动模式配置"><a href="#3-5-condition启动模式配置" class="headerlink" title="3.5 condition启动模式配置"></a>3.5 condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p>记得要在微信开发工具里选中你要调试的模式</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><h1 id="4-uni基础组件的基本使用"><a href="#4-uni基础组件的基本使用" class="headerlink" title="4 uni基础组件的基本使用"></a>4 uni基础组件的基本使用</h1><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h2 id="4-1-text文本组件的用法"><a href="#4-1-text文本组件的用法" class="headerlink" title="4.1 text文本组件的用法"></a>4.1 text文本组件的用法</h2><h4 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h4><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">默认值</th><th align="center">必填</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">selectable</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">文本是否可选</td></tr><tr><td align="center">space</td><td align="center">string</td><td align="center">.</td><td align="center">否</td><td align="center">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td align="center">decode</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h4 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 长按文本是否可选 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">selectable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 显示连续空格的方式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ensp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>emsp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>nbsp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>skyblue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 是否解码 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> <span class="token entity" title="&lt;">&amp;lt;</span> <span class="token entity" title="&gt;">&amp;gt;</span> <span class="token entity" title="&amp;">&amp;amp;</span> <span class="token entity" title="&apos;">&amp;apos;</span> <span class="token entity" title="&ensp;">&amp;ensp;</span> <span class="token entity" title="&emsp;">&amp;emsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h2 id="4-2-view视图容器组件的用法"><a href="#4-2-view视图容器组件的用法" class="headerlink" title="4.2 view视图容器组件的用法"></a>4.2 view视图容器组件的用法</h2><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h4 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><p><img src="https://i.loli.net/2020/11/09/7Atvbg1BofdWGaQ.png"></p><h4 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2_active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box1<span class="token punctuation">'</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>active<span class="token punctuation">'</span></span> <span class="token attr-name">hover-stop-propagation</span> <span class="token attr-name">:hover-start-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span> <span class="token attr-name">:hover-stay-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>2000<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h2 id="4-3-button按钮组件的用法"><a href="#4-3-button按钮组件的用法" class="headerlink" title="4.3 button按钮组件的用法"></a>4.3 button按钮组件的用法</h2><h4 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">size</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的大小</td></tr><tr><td align="center">type</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的样式类型</td></tr><tr><td align="center">plain</td><td align="center">Boolean</td><td align="center">false</td><td align="center">按钮是否镂空，背景色透明</td></tr><tr><td align="center">disabled</td><td align="center">Boolean</td><td align="center">false</td><td align="center">是否按钮</td></tr><tr><td align="center">loading</td><td align="center">Boolean</td><td align="center">false</td><td align="center">名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h4 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>primary<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>default<span class="token punctuation">'</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>warn<span class="token punctuation">'</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h3 id="1-7-4-image组件的使用"><a href="#1-7-4-image组件的使用" class="headerlink" title="1.7.4 image组件的使用"></a>1.7.4 image组件的使用</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image">image</a>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image{will-change: transform}</code> ,可优化此问题。</li></ul><h1 id="5-uni-app中的样式"><a href="#5-uni-app中的样式" class="headerlink" title="5 uni-app中的样式"></a>5 uni-app中的样式</h1><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式（scoped）为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p></li><li><p><a href="https://www.jianshu.com/p/f423b4e937af">https://www.jianshu.com/p/f423b4e937af</a></p><pre><code> @font-face {     font-family: test1-icon;     src: url('~@/static/iconfont.ttf'); }</code></pre></li></ul></li><li><p>如何使用scss或者less</p><pre><code>//1.安装插件npm install less less-loader --save//2.vue文件中使用 &lt;style lang="less"&gt;</code></pre></li></ul><h1 id="6-uni的生命周期"><a href="#6-uni的生命周期" class="headerlink" title="6 uni的生命周期"></a>6 uni的生命周期</h1><h2 id="6-1-应用的生命周期"><a href="#6-1-应用的生命周期" class="headerlink" title="6.1 应用的生命周期"></a>6.1 应用的生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h2 id="6-2-页面的生命周期"><a href="#6-2-页面的生命周期" class="headerlink" title="6.2 页面的生命周期"></a>6.2 页面的生命周期</h2><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h1 id="7-uni相关API"><a href="#7-uni相关API" class="headerlink" title="7 uni相关API"></a>7 uni相关API</h1><h2 id="7-1-下拉刷新"><a href="#7-1-下拉刷新" class="headerlink" title="7.1 下拉刷新"></a>7.1 下拉刷新</h2><h3 id="7-1-1-开启下拉刷新"><a href="#7-1-1-开启下拉刷新" class="headerlink" title="7.1.1 开启下拉刷新"></a>7.1.1 开启下拉刷新</h3><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h4 id="a-通过配置文件开启"><a href="#a-通过配置文件开启" class="headerlink" title="a) 通过配置文件开启"></a>a) 通过配置文件开启</h4><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"pages/list/list"</span><span class="token punctuation">,</span>    <span class="token string">"style"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token string">"enablePullDownRefresh"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="b-通过API开启"><a href="#b-通过API开启" class="headerlink" title="b) 通过API开启"></a>b) 通过API开启</h4><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p><pre class=" language-html"><code class="language-html">uni.startPullDownRefresh({})</code></pre><h3 id="7-1-2-监听下拉刷新"><a href="#7-1-2-监听下拉刷新" class="headerlink" title="7.1.2 监听下拉刷新"></a>7.1.2 监听下拉刷新</h3><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        这是信息页面    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">startPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">startPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">onPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发下拉刷新了'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="7-1-3-关闭下拉刷新"><a href="#7-1-3-关闭下拉刷新" class="headerlink" title="7.1.3 关闭下拉刷新"></a>7.1.3 关闭下拉刷新</h3><p>uni.stopPullDownRefresh()      停止当前页面下拉刷新 </p><h2 id="7-2-上拉加载"><a href="#7-2-上拉加载" class="headerlink" title="7.2 上拉加载"></a>7.2 上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'ui'</span><span class="token punctuation">,</span> <span class="token string">'大数据'</span><span class="token punctuation">,</span> <span class="token string">'前端'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'ui'</span><span class="token punctuation">,</span> <span class="token string">'大数据'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">,</span> <span class="token string">'大数据'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">startPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">startPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">onPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发下拉刷新了'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">onReachBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触底了'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span><span class="token operator">></span>    <span class="token punctuation">.</span>item <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//App.vue中添加</span><span class="token operator">&lt;</span>style<span class="token operator">></span>    page<span class="token punctuation">{</span>        overflow<span class="token operator">-</span>y<span class="token punctuation">:</span>scroll<span class="token operator">!</span>important<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="7-3-网络请求"><a href="#7-3-网络请求" class="headerlink" title="7.3 网络请求"></a>7.3 网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><pre class=" language-javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'http://localhost/myUniApp/php/login.php'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//仅为示例，并非真实接口地址。</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//参数</span>        rawData<span class="token punctuation">:</span> rawData<span class="token punctuation">,</span>        code<span class="token punctuation">:</span> loginRes<span class="token punctuation">.</span>code    <span class="token punctuation">}</span><span class="token punctuation">,</span>    header<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'custom-header'</span><span class="token punctuation">:</span> <span class="token string">'hello'</span> <span class="token comment" spellcheck="true">//自定义请求头信息</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span><span class="token string">'POST'</span><span class="token comment" spellcheck="true">//请求方式  或GET</span>    success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'返回'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>请求示例</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sendGet"</span><span class="token operator">></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"movieData"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>text<span class="token operator">></span>电影名字：<span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>originalName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span>view<span class="token operator">></span>                导演：                <span class="token operator">&lt;</span>text v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in movieData.director"</span><span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span>view<span class="token operator">></span>电影信息                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>genre<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>language<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token punctuation">{</span>movieData<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>country<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    type MovieBasicType <span class="token operator">=</span> <span class="token punctuation">{</span>        genre<span class="token punctuation">:</span>string        name<span class="token punctuation">:</span>string        lang<span class="token punctuation">:</span>string        language<span class="token punctuation">:</span>string        poster<span class="token punctuation">:</span>string        description<span class="token punctuation">:</span>string        country<span class="token punctuation">:</span>string    <span class="token punctuation">}</span>    type MovieDirectorType <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>        lang<span class="token punctuation">:</span>string    <span class="token punctuation">}</span>    type MovieDataType <span class="token operator">=</span> <span class="token punctuation">{</span>        id<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">,</span>        originalName<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">,</span>        duration<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">,</span>        data<span class="token operator">?</span><span class="token punctuation">:</span>MovieBasicType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        director<span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span>MovieDirectorType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> movieData<span class="token punctuation">:</span>MovieDataType<span class="token operator">|</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">'https://movie.querydata.org/api?id=1302425'</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">const</span> resobj <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>movieData <span class="token operator">=</span> resobj <span class="token keyword">as</span> MovieDataType<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//uni-app中对ts的支持只是一般，没有非常严格</span></code></pre><h2 id="7-4-数据缓存"><a href="#7-4-数据缓存" class="headerlink" title="7.4 数据缓存"></a>7.4 数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"setStor"</span><span class="token operator">></span>存储数据<span class="token operator">-</span>异步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"setStorSync"</span><span class="token operator">></span>存储数据<span class="token operator">-</span>同步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"getStorage"</span><span class="token operator">></span>获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"getStorageSync"</span><span class="token operator">></span>获取数据<span class="token operator">-</span>同步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"removeStorage"</span><span class="token operator">></span>删除数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"removeStorageSync"</span><span class="token operator">></span>删除数据<span class="token operator">-</span>同步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token function">setStor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'存储成功'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">setStorSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'id2'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> id <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">removeStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">removeStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">removeStorageSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">removeStorageSync</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="7-5-上传图片、预览图片"><a href="#7-5-上传图片、预览图片" class="headerlink" title="7.5 上传图片、预览图片"></a>7.5 上传图片、预览图片</h2><h3 id="7-5-1-上传图片"><a href="#7-5-1-上传图片" class="headerlink" title="7.5.1 上传图片"></a>7.5.1 上传图片</h3><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chooseImg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in imgArr<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> <span class="token punctuation">{</span>        Component<span class="token punctuation">,</span>        Vue    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> imgArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token function">chooseImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>            uni<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                count<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>imgArr <span class="token operator">=</span> res<span class="token punctuation">.</span>tempFilePaths                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="7-5-2-预览图片"><a href="#7-5-2-预览图片" class="headerlink" title="7.5.2 预览图片"></a>7.5.2 预览图片</h3><p>结构</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in imgArr<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>previewImg(item)<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>预览图片的方法</p><pre class=" language-js"><code class="language-js">previewImg <span class="token punctuation">(</span>current<span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    urls<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imgArr<span class="token punctuation">,</span>    current  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="7-6-uni中的导航跳转"><a href="#7-6-uni中的导航跳转" class="headerlink" title="7.6 uni中的导航跳转"></a>7.6 uni中的导航跳转</h2><h3 id="7-6-1-利用navigator进行跳转"><a href="#7-6-1-利用navigator进行跳转" class="headerlink" title="7.6.1 利用navigator进行跳转"></a>7.6.1 利用navigator进行跳转</h3><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/pages/about/about<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navigator-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span></code></pre><p>跳转到tabbar页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/pages/message/message<span class="token punctuation">"</span></span> <span class="token attr-name">open-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchTab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span></code></pre><h3 id="7-6-2-利用编程式导航进行跳转"><a href="#7-6-2-利用编程式导航进行跳转" class="headerlink" title="7.6.2 利用编程式导航进行跳转"></a>7.6.2 利用编程式导航进行跳转</h3><p><a href="%5Buni.navigateTo%5D(https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><h3 id="7-6-3-利用navigateTo进行导航跳转"><a href="#7-6-3-利用navigateTo进行导航跳转" class="headerlink" title="7.6.3 利用navigateTo进行导航跳转"></a>7.6.3 利用navigateTo进行导航跳转</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goAbout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>通过navigateTo方法进行跳转到普通页面</p><pre class=" language-js"><code class="language-js">goAbout <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/about/about'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>通过switchTab方法进行跳转</p><pre class=" language-js"><code class="language-js">goMessage <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span>  <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/message/message'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>redirectTo进行跳转</strong> </p><p>关闭当前页面，跳转到应用内的某个页面。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- template --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- js --></span>goMessage ():void  {  uni.switchTab({    url: '/pages/message/message'  })}</code></pre><p>通过onUnload测试当前组件确实卸载</p><pre class=" language-js"><code class="language-js">onUnload <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件卸载了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="7-6-4-导航跳转传递参数"><a href="#7-6-4-导航跳转传递参数" class="headerlink" title="7.6.4 导航跳转传递参数"></a>7.6.4 导航跳转传递参数</h3><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><pre class=" language-js"><code class="language-js">goAbout <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span>  <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/about/about?id=80'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接收参数的页面</p><pre class=" language-js"><code class="language-js">onLoad <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h1 id="8-条件注释实现跨端兼容"><a href="#8-条件注释实现跨端兼容" class="headerlink" title="8 条件注释实现跨端兼容"></a>8 条件注释实现跨端兼容</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h2 id="8-1-组件的条件注释"><a href="#8-1-组件的条件注释" class="headerlink" title="8.1 组件的条件注释"></a>8.1 组件的条件注释</h2><p>代码演示</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- #ifdef H5 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  h5页面会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span><span class="token comment" spellcheck="true">&lt;!-- #ifdef MP-WEIXIN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  微信小程序会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span><span class="token comment" spellcheck="true">&lt;!-- #ifdef APP-PLUS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  app会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span></code></pre><h2 id="8-2-api的条件注释"><a href="#8-2-api的条件注释" class="headerlink" title="8.2 api的条件注释"></a>8.2 api的条件注释</h2><p>代码演示</p><pre class=" language-js"><code class="language-js">onLoad <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//#ifdef MP-WEIXIN</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'微信小程序'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//#endif</span>  <span class="token comment" spellcheck="true">//#ifdef H5</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h5页面'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//#endif</span><span class="token punctuation">}</span></code></pre><h2 id="8-3-样式的条件注释"><a href="#8-3-样式的条件注释" class="headerlink" title="8.3 样式的条件注释"></a>8.3 样式的条件注释</h2><p>代码演示</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* #ifdef H5 */</span><span class="token selector">view</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* #endif */</span><span class="token comment" spellcheck="true">/* #ifdef MP-WEIXIN */</span><span class="token selector">view</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* #endif */</span></code></pre><h1 id="9-uni-ui的使用"><a href="#9-uni-ui的使用" class="headerlink" title="9 uni-ui的使用"></a>9 uni-ui的使用</h1><p>uni-app中的UI组件库：<a href="https://ask.dcloud.net.cn/article/35489">https://ask.dcloud.net.cn/article/35489</a></p><p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.将资料中的uni-ui放入到项目components目录下(注意：不要npm install @dcloudio/uni-ui ，这种方式在子组件中无法使用)</span><span class="token comment" spellcheck="true">//2.安装sass-loader</span>npm install node<span class="token operator">-</span>sass sass<span class="token operator">-</span>loader@<span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">2</span>      重启hubuilderX<span class="token comment" spellcheck="true">//3.在页面组件和自定义组件中使用uni-ui</span><span class="token keyword">import</span> uniBadge <span class="token keyword">from</span> <span class="token string">"@/components/uni-ui/lib/uni-badge/uni-badge.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> uniGrid <span class="token keyword">from</span> <span class="token string">"@/components/uni-ui/lib/uni-grid/uni-grid.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> uniGridItem <span class="token keyword">from</span> <span class="token string">"@/components/uni-ui/lib/uni-grid-item/uni-grid-item.vue"</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        uniBadge<span class="token punctuation">,</span>        uniGrid<span class="token punctuation">,</span>        uniGridItem    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>badge text<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>badge<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>badge text<span class="token operator">=</span><span class="token string">"2"</span> type<span class="token operator">=</span><span class="token string">"success"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>badge<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>badge text<span class="token operator">=</span><span class="token string">"3"</span> type<span class="token operator">=</span><span class="token string">"primary"</span> <span class="token punctuation">:</span>inverted<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>badge<span class="token operator">></span>        <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid <span class="token punctuation">:</span>column<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>                <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>文本<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>                <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>文本<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>                <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>文本<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">-</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>uni<span class="token operator">-</span>grid<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件的生命周期</title>
      <link href="2019/11/15/zu-jian-de-sheng-ming-zhou-qi/"/>
      <url>2019/11/15/zu-jian-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><h3 id="组件的生命周期-1"><a href="#组件的生命周期-1" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><h4 id="created"><a href="#created" class="headerlink" title="created()"></a><code>created()</code></h4><p>在data同层级下：</p><pre class=" language-javascript"><code class="language-javascript">lifetimes<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.data.msg"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//能获取到</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.properties.item"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取不到</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>created()在组件实例刚刚被创建的时候执行，这里不能调用<code>setData</code>方法</p><h4 id="attached"><a href="#attached" class="headerlink" title="attached()"></a><code>attached()</code></h4><p>在组件实例进入页面节点树的时候执行</p><p>可以获取<code>this.properties.item</code></p><pre><code>lifetimes:{    attached(){      console.log("this.data.msg",this.data.msg);               //能获取到      console.log("this.properties.item",this.properties.items);//能获取到    }},</code></pre><h4 id="ready"><a href="#ready" class="headerlink" title="ready()"></a><code>ready()</code></h4><p>组件布局完成后执行</p><pre><code>lifetimes:{    ready(){      console.log("this.data.msg",this.data.msg);               //能获取到      console.log("this.properties.item",this.properties.items);//能获取到    }},</code></pre><h4 id="move"><a href="#move" class="headerlink" title="move()"></a><code>move()</code></h4><p>组件被移动到节点树的另一个位置的时候执行</p><h4 id="detached"><a href="#detached" class="headerlink" title="detached()"></a><code>detached()</code></h4><p>组件被从节点树上移除的时候触发</p><pre><code>lifetimes:{    detached(){      console.log("detached");    }}</code></pre><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>在子组件中：</p><p>方法要写在methods里面</p><p>在子组件的标签上绑定点击事件</p><pre><code>&lt;view class="box"  bindtap="handleClick"&gt;    &lt;view class="img"&gt;      &lt;image class="imgs" src="{{items.img}}"&gt;      &lt;/image&gt;    &lt;/view&gt;    &lt;view class="text"&gt;      {{items.name}}    &lt;/view&gt;    &lt;view class="count"&gt;{{items.count}}&lt;/view&gt;  &lt;/view&gt;</code></pre><p>在<code>methods</code>里写点击事件</p><p><code>this.triggerEvent</code></p><pre><code>methods: {    handleClick(){      console.log(this.properties.items.id);      this.triggerEvent("delete",id)    }     }})</code></pre><p>在父组件中接收自己定义的方法<br><img src="https://i.loli.net/2020/11/05/nWJGLiIqdSurBMH.png" alt="子传父-父组件绑定事件.png"></p><p>在父组件的<code>js</code>中写这个删除事件</p><pre><code>handleDelete(e){    console.log(e.detail);    let datas = this.data.arr;    let result =  datas.filter(v=&gt;{      return v.id!=e.detail;    })    this.setData({      arr:result    })  }</code></pre><h3 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽<code>slot</code></h3><p>有的存在一个固定样式，有的不存在那个样式，可以在子组件内设置一个插槽，谁需要这个插槽就调用，不需要就不调用</p><p>在子组件中：<br><img src="https://i.loli.net/2020/11/05/JTSb281Vko3BlW9.png" alt="插槽.png"></p><p>并且在<code>item.js</code>中设置</p><pre><code> options:{    multipleSlots:true }</code></pre><p>在需要调用这个插槽的地方<br><img src="https://i.loli.net/2020/11/05/ysoXNSt4vHQjmKZ.png" alt="父组件调用插槽.png"></p><p>样式在父组件中设置</p><p>大概效果如下：</p><p>使用插槽：<br><img src="https://i.loli.net/2020/11/05/qfQGWHPwsKT5rvt.png" alt="界面一使用插槽.png"></p><p>未使用插槽：<br><img src="https://i.loli.net/2020/11/05/49IYcE2feX8lzsQ.png" alt="界面二未使用插槽.png"></p><h3 id="vant-ui的使用"><a href="#vant-ui的使用" class="headerlink" title="vant-ui的使用"></a><code>vant-ui</code>的使用</h3><p>在<code>github</code>下载<code>vant-ui</code></p><p>放在自己的项目下解压</p><p>在项目下新建文件<code>plugins</code>,</p><p>再再目录下新建文件夹<code>vant</code></p><p>将解压包中的<code>dist</code>文件夹下所有文件站粘贴到刚才新建的<code>vant</code> 文件夹下</p><p>需要用这个组件的<code>json</code>文件添加：</p><pre><code>{  "usingComponents": {    "van-button":"/plugins/vant/button/index"  }}</code></pre><p><code>wxml</code>里可以使用了：</p><pre><code>&lt;van-button type="warning"&gt;警告按钮&lt;/van-button&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序组件的使用</title>
      <link href="2019/11/14/wei-xin-xiao-cheng-xu-zu-jian-de-shi-yong/"/>
      <url>2019/11/14/wei-xin-xiao-cheng-xu-zu-jian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序组件的使用"><a href="#微信小程序组件的使用" class="headerlink" title="微信小程序组件的使用"></a>微信小程序组件的使用</h1><h3 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h3><h4 id="组件的使用原因"><a href="#组件的使用原因" class="headerlink" title="组件的使用原因"></a>组件的使用原因</h4><p>重复出现的代码在组件的使用下可以不用去写重复的代码</p><p>例如两个页面的排版相似，只有内部的数据渲染不同，这样的部分可以使用组件去封装<br><img src="https://i.loli.net/2020/11/05/6AXOsKT8jfY2vVU.png" alt="components相似页面.png"></p><p>如果两个页面都重新写，会有一大部分重复代码</p><p>这里可以使用<code>components</code>组件</p><h3 id="使用组件步骤"><a href="#使用组件步骤" class="headerlink" title="使用组件步骤"></a>使用组件步骤</h3><h4 id="一、创建文件夹以及文件"><a href="#一、创建文件夹以及文件" class="headerlink" title="一、创建文件夹以及文件"></a>一、创建文件夹以及文件</h4><p>创建<code>components</code>文件夹，里面创建复用的代码片段，例如创建一个<code>item</code>组件，右键创建<br><img src="https://i.loli.net/2020/11/05/KMicLjoqOp65zBT.png" alt="创建一个新的组件文件.png"></p><h4 id="二、在item-wxml里写复用代码"><a href="#二、在item-wxml里写复用代码" class="headerlink" title="二、在item.wxml里写复用代码"></a>二、在<code>item.wxml</code>里写复用代码</h4><p>这样的样式就相同了</p><h4 id="三、使用组件"><a href="#三、使用组件" class="headerlink" title="三、使用组件"></a>三、使用组件</h4><p>在需要使用的文件夹下的<code>json</code>文件内写引用<strong>组件标签名</strong>和<strong>地址</strong></p><p>在<code>wxml</code>文件内就可以使用组件标签来调用这个写好的组件了<br><img src="https://i.loli.net/2020/11/05/PRlTFhULf1DvsW7.png" alt="使用组件的标签.png"></p><h4 id="四、父组件自定义属性数据传向子组件"><a href="#四、父组件自定义属性数据传向子组件" class="headerlink" title="四、父组件自定义属性数据传向子组件"></a>四、父组件自定义属性数据传向子组件</h4><p>父组件数据传入子组件内原因：</p><p>因为调用组件的每一个地方添加的数据可能都不同，也就是说每一个父组件的数据是独立的，所以每次单独调用组件的时候渲染的数据都是各自父组件自己的</p><h5 id="首先父组件标签内自定义一个属性"><a href="#首先父组件标签内自定义一个属性" class="headerlink" title="首先父组件标签内自定义一个属性"></a>首先父组件标签内自定义一个属性</h5><p><img src="https://i.loli.net/2020/11/05/zLPKec5d2ZM6FV4.png" alt="组件自定义属性.png"></p><h5 id="接着在子组件注册这个属性"><a href="#接着在子组件注册这个属性" class="headerlink" title="接着在子组件注册这个属性"></a>接着在子组件注册这个属性</h5><p><img src="https://i.loli.net/2020/11/05/pwbX75ZYSMargL4.png" alt="在子组件内注册这个属性.png"></p><p>这样就将父组件内的数据传给了子组件，在子组件内调用父组件的数据就用</p>，如下<p><img src="https://i.loli.net/2020/11/05/CFX9yYiBZvWuT1Q.png" alt="使用父组件的属性.png"></p><p>这里面的<code>img</code>,<code>name</code>,<code>count</code>都是父组件数据对象中有的属性</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序wxs</title>
      <link href="2019/11/14/wei-xin-xiao-cheng-xu-wxs/"/>
      <url>2019/11/14/wei-xin-xiao-cheng-xu-wxs/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序wxs"><a href="#微信小程序wxs" class="headerlink" title="微信小程序wxs"></a>微信小程序wxs</h1><h3 id="1、wxs"><a href="#1、wxs" class="headerlink" title="1、wxs"></a>1、<code>wxs</code></h3><p>作用:可以在模板中使用方法，对数据再次处理</p><pre><code>data: {    name:"华语私人最懂你"  },</code></pre><pre><code>//1-1定义一个wxs文件//utils/util.wxsfunction handleName(value){  if(value.length&gt;5){    value = value.slice(0,5)+"..."  }  return value}module.exports = {  handleName:handleName}</code></pre><pre><code>//1-2在模板中引入//pages/index/index.wxml&lt;wxs src="../../utils/util.wxs" module="tools"&gt;&lt;/wxs&gt;&lt;view&gt;    {{tools.handleName(name)}}&lt;/view&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> wxs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序基础</title>
      <link href="2019/11/13/wei-xin-xiao-cheng-xu-zhi-shi-dian/"/>
      <url>2019/11/13/wei-xin-xiao-cheng-xu-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序知识点"><a href="#微信小程序知识点" class="headerlink" title="微信小程序知识点"></a>微信小程序知识点</h1><h3 id="hidden属性"><a href="#hidden属性" class="headerlink" title="hidden属性"></a><code>hidden</code>属性</h3><p>使用<code>hidden</code>属性控制显示隐藏</p><p>先在<code>index.js</code>的<code>page</code>里设置<code>flag</code>为<code>true</code></p><pre><code>Page({  data: {    flag:true  }})</code></pre><p>在<code>wxml</code>里设置<code>hidden</code>属性，使用三元表达式</p><pre><code>&lt;view hidden="{{flag?true:false}}"&gt;  hidden&lt;/view&gt;</code></pre><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>在<code>wxml</code>里标签后使用</p><pre><code>wx:if=""wx:elif=""wx:else=""</code></pre><p>例如</p><pre><code>&lt;view wx:if="{{flag}}"&gt;  a&lt;/view&gt;&lt;view wx:else&gt;  b&lt;/view&gt;</code></pre><p>在Page里</p><pre><code>data: {   flag:true  }</code></pre><h3 id="三元实现点击切换"><a href="#三元实现点击切换" class="headerlink" title="三元实现点击切换"></a>三元实现点击切换</h3><p>绑定一个点击事件,实现点击播放和暂停的图片切换</p><pre><code>&lt;image src="{{state?'/images/play.png':'/images/pause.png'}}" bindtap="handleClick"&gt;&lt;/image&gt;</code></pre><p><code>index.js</code>里写一个状态和点击事件逻辑</p><pre><code>data: {    state:true  },  onLoad: function () {  },  handleClick(e){    let flag = !this.data.state;    this.setData({      state:flag    })  }</code></pre><h3 id="block"><a href="#block" class="headerlink" title="block"></a><code>block</code></h3><p>相当于一个占位符，实际上并不会渲染到<code>html</code>页面</p><h3 id="input表单属性"><a href="#input表单属性" class="headerlink" title="input表单属性"></a><code>input</code>表单属性</h3><h4 id="bindconfirm"><a href="#bindconfirm" class="headerlink" title="bindconfirm"></a><code>bindconfirm</code></h4><p><code>bindconfirm=""</code>，确认后使用<code>e.detail</code>可以获取到输入的内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">confirm-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>到达<span class="token punctuation">"</span></span>    <span class="token attr-name">bindconfirm</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleConfirm<span class="token punctuation">"</span></span>   <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请搜索<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span></code></pre><p><code>js</code>内可以获取到输入内容</p><pre><code>handleConfirm(e){    console.log(e.detail);}</code></pre><h4 id="confirm-type-quot-quot"><a href="#confirm-type-quot-quot" class="headerlink" title="confirm-type=&quot;&quot;"></a><code>confirm-type=""</code></h4><p><code>confirm-type="send"</code>                        右下角按钮为“发送”</p><p><code>confirm-type="search"</code> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;                &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“搜索”</p><p><code>confirm-type="next"</code> &nbsp;                     &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“下一个”</p><p><code>confirm-type="go"</code> &nbsp;                         &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“前往”</p><p><code>confirm-type="done"</code> &nbsp;                    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;右下角按钮为“完成”</p><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a><code>form</code>表单</h3><p>通过<code>e.detail.value.search</code>可以获得输入数据</p><p>1、给<code>form</code>表单<code>bindsubmit="submit"</code></p><p>2、给<code>input</code>输入框<code>name="search"</code></p><p>3、给<code>button</code>点击按钮<code>form-type="submit"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">bindsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">form-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><code>index.js</code>里使用<code>submit</code>方法得到输入数据</p><pre><code>submit(e){    console.log(e.detail.value.search); }</code></pre><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>小程序中可以使用<code>node.js</code>中模块化的方案</p><p>导出</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//导出</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">,</span>  http<span class="token punctuation">}</span></code></pre><p>导入</p><pre><code>const obj  =require("../../data/a")</code></pre><h3 id="http请求的封装"><a href="#http请求的封装" class="headerlink" title="http请求的封装"></a><code>http</code>请求的封装</h3><p>在一个模块的文件夹内封装一个接口的地址，之后相同前缀的地址直接通过暴露的接口添加后缀地址获得，减少书写冗余代码</p><p>在<code>model</code>里创建一个<code>http.js</code>,里面写一个地址的接口，并暴露出去，如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> baseUrl <span class="token operator">=</span> <span class="token string">"http://192.168.1.8:3000/"</span><span class="token keyword">function</span> <span class="token function">http</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>  wx<span class="token operator">-</span>wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> baseUrl<span class="token operator">+</span>url<span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>    header<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'content-type'</span><span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    responseType<span class="token punctuation">:</span><span class="token string">'text'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getSearchHttp</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">http</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`search?keywords=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getCatHttp</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">http</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`top/playlist?cat=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cat<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  getSearchHttp<span class="token punctuation">,</span>  getCatHttp<span class="token punctuation">}</span></code></pre><p>接口路径相同的就可以不用写很长的路径直接通过这个接口得到了</p><p>例如</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> getSearchHttp <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../model/http"</span><span class="token punctuation">)</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">getSearchHttp</span><span class="token punctuation">(</span><span class="token string">"晨读"</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这里需要一个路径的数据时候通过接口直接能得到路径为：</p><p><code>http://192.168.1.8:3000/search?keywords=晨读</code></p><p>这里的数据</p><h3 id="小程序中在函数内调用一个函数，要使用this"><a href="#小程序中在函数内调用一个函数，要使用this" class="headerlink" title="小程序中在函数内调用一个函数，要使用this"></a>小程序中在函数内调用一个函数，要使用this</h3>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序入门</title>
      <link href="2019/11/12/wei-xin-xiao-cheng-xu-kai-fa/"/>
      <url>2019/11/12/wei-xin-xiao-cheng-xu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h1><h2 id="小程序开发环境配置"><a href="#小程序开发环境配置" class="headerlink" title="小程序开发环境配置"></a>小程序开发环境配置</h2><p>1、安装微信开发者工具<br>2、扫一扫进入开发者工具<br>3、新建项目<br>4、安装vscode插件<br>5、初始化项目</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="使用动态数据"><a href="#使用动态数据" class="headerlink" title="使用动态数据"></a>使用动态数据</h3><p>使用插值表达式在页面渲染数据，如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.index.js  配置</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"wechat"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//2.index.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    //插值表达式  可以使用变量,使用javascript表达式     {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>通过<code>{{msg}}</code>可以获取到<code>index.js</code>里<code>data</code>里属性<code>msg</code>的属性值，并将其渲染到界面</p><h3 id="列表渲染-wx-for"><a href="#列表渲染-wx-for" class="headerlink" title="列表渲染 wx:for"></a>列表渲染 <code>wx:for</code></h3><p><code>wx:for</code>类似于一个循环，将要循环的数组内需要的对象属性渲染到相应位置，如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    friends<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"h6"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1001</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"html"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1002</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"css"</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//index.wmxl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{friends}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{item.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>使用<code>wx:for="{{friends}}"</code>对<code>frinends</code>这个<code>data</code>里的<code>friends</code>数组进行循环，并通过<code>item.属性名</code>将相应的属性值的循环结果呈现在界面</p><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>使用<code>bindtap</code>在相应的标签内绑定相应的事件</p><p>举个例子：通过点击页面中的字来改变它的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//index.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>页面的数据应该是<code>hello world</code>，我们现在在数据的<code>view</code>标签上绑定了一个事件<code>handleClick</code>,接下来我们在<code>js</code>内设置这个事件的内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//this.setData() 设置data中的值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        msg<span class="token punctuation">:</span><span class="token string">"change"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在<code>handleClick</code>事件内我们使用<code>this.setData()</code>设置data里的属性的属性值，将呈现在页面的<code>msg</code>属性改为<code>“change”</code>，此时点击的时候触发点击事件就会改变页面的字为<code>“change”</code>了</p><h3 id="自定义属性的设置和获取"><a href="#自定义属性的设置和获取" class="headerlink" title="自定义属性的设置和获取"></a>自定义属性的设置和获取</h3><h4 id="自定义属性的设置"><a href="#自定义属性的设置" class="headerlink" title="自定义属性的设置"></a>自定义属性的设置</h4><p>使用<code>data-自定义属性名</code>来自定义一个属性，例如：</p><pre class=" language-html"><code class="language-html">//1.data-id 设置一个自定义属性id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{id}}<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>在这个使用<code>data-id</code>自定义属性<code>id</code>,并且将<code>data</code>内的<code>id</code>值传给这个自定义属性，比如在<code>data</code>里设定<code>id</code>值为1001</p><pre><code>Page({    data:{        msg:"hello world",        id:1001    }})</code></pre><h4 id="自定义属性的获取"><a href="#自定义属性的获取" class="headerlink" title="自定义属性的获取"></a>自定义属性的获取</h4><p>通过以上例子已经设置好了一个自定义属性并且把已有的<code>id</code>的值传给了这个自定义属性，接下来我们怎么获取这个值呢？我们通过一个点击事件来演示一下这个自定义属性值的获取：</p><pre><code>Page({    data:{        msg:"hello world",        id:1001    },    handleClick(event){        console.log(event)        console.log(event.currentTarget.dataset)    }})</code></pre><p>通过在点击事件传一个event参数<br>我们通过打印<code>event</code>可以看到一些已有的属性<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2158361/1597235311467-f6aa97d3-e5d8-430b-9e17-ebe6724d031b.png#align=left&amp;display=inline&amp;height=204&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fevent.png&amp;originHeight=204&amp;originWidth=583&amp;size=21797&amp;status=done&amp;style=none&amp;width=583" alt="微信小程序event.png"><br>在<code>event.currentTarget</code>里可以看到一些现成的数据，其中<code>dataset</code>里就是自己设置的自定义属性的值了<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2158361/1597235320288-50d1e3cb-95aa-4b36-8bac-ea2f6af44c09.png#align=left&amp;display=inline&amp;height=312&amp;margin=%5Bobject%20Object%5D&amp;name=event.currentTargrt.dataset.png&amp;originHeight=312&amp;originWidth=585&amp;size=26069&amp;status=done&amp;style=none&amp;width=585" alt="event.currentTargrt.dataset.png"><br>此时可以看到id确实在这里面，通过打印<code>event.currentTarget.dataset.id</code>就可以获得1001了</p><h3 id="获取data中的值"><a href="#获取data中的值" class="headerlink" title="获取data中的值"></a>获取data中的值</h3><p>通过<code>this.data.属性</code>就可以获得到<code>data</code> 内相应的属性了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"yyy"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span><span class="token number">1001</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//zzz</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="列表删除"><a href="#列表删除" class="headerlink" title="列表删除"></a>列表删除</h3><p>通过以上的学习我们已经使用<code>wx:for="{{arr}}"</code>,将数组内的数据循环渲染到了界面，我们这时候需要使用到自定义属性，通过自定义属性传一个当前循环的属性，通过这个属性值和循环的数组内的属性的相应属性值比对，找到相同的排除，保留点击相同的就可以实现点击删除了。</p><h4 id="1、首先先循环渲染页面"><a href="#1、首先先循环渲染页面" class="headerlink" title="1、首先先循环渲染页面"></a>1、首先先循环渲染页面</h4><p>使用<code>wx:for="{{arr}}"</code></p><h4 id="2、设置一个自定义属性，绑定点击事件"><a href="#2、设置一个自定义属性，绑定点击事件" class="headerlink" title="2、设置一个自定义属性，绑定点击事件"></a>2、设置一个自定义属性，绑定点击事件</h4><p>设置自定义属性<code>data-id="{{item.id}}"</code>，将自定义属性的值设置为循环的当前<code>id</code>，这样我们就可以通过事件得到当前点击的<code>id</code>并和原数据内的数据比对了</p><p>以上两步完成代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span><span class="token string">"hello world"</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"yyy"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span><span class="token number">1001</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">//index.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{arr}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.idid}}<span class="token punctuation">"</span></span>  <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.id}}<span class="token punctuation">"</span></span><span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{item.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>此时页面循环渲染结束</p><h4 id="3、通过点击事件和自定义属性删除相应属性"><a href="#3、通过点击事件和自定义属性删除相应属性" class="headerlink" title="3、通过点击事件和自定义属性删除相应属性"></a>3、通过点击事件和自定义属性删除相应属性</h4><p>因为一开始我们自定义属性绑定的就是相应的id属性，所以我们获取到点击的自定义属性的id值，和原有的数组内的id值比对，相同的过滤掉，就可以实现点击过滤效果，代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span>id <span class="token operator">!=</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      arr<span class="token punctuation">:</span>arr2    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><code>event.currentTarget.dataset.id</code>获得的就是点击的那条对象的<code>id</code>值，通过<code>filter</code>过滤掉</p><h4 id="4、最后将过滤后的结果返回给data"><a href="#4、最后将过滤后的结果返回给data" class="headerlink" title="4、最后将过滤后的结果返回给data"></a>4、最后将过滤后的结果返回给data</h4><p>上一段代码已经写出来了，通过<code>this.setData</code>将处理好的<code>arr2</code>传回<code>data</code></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件化</title>
      <link href="2019/10/20/zu-jian-hua-chong-dian/"/>
      <url>2019/10/20/zu-jian-hua-chong-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="组件化-重点"><a href="#组件化-重点" class="headerlink" title="组件化(重点)"></a>组件化(重点)</h1><h3 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a><code>Vue</code>组件化思想</h3><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>组件化提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</p><p>任何的应用都会被抽象成一个组件树</p><h4 id="组件化思想的应用"><a href="#组件化思想的应用" class="headerlink" title="组件化思想的应用"></a>组件化思想的应用</h4><p>有了组件化的思想，我们在之后的开发中就要充分利用它</p><p>尽可能地将页面拆分成一个小的、可复用地组件</p><p>这样我们的代码更加方便组织和管理，扩展性也更强</p><h3 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h3><h4 id="创建组件构造器"><a href="#创建组件构造器" class="headerlink" title="创建组件构造器"></a>创建组件构造器</h4><p>调用<code>Vue.extend()</code>方法创建<strong>组件构造器</strong></p><p>传入<code>template</code>是自定义组件模板</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标题&lt;/h2>                &lt;p>我是内容哈哈哈&lt;/p>                &lt;p>我是内容笑笑笑笑笑笑笑笑笑&lt;/p>                &lt;p>我是内容水水水水&lt;/p>            &lt;/div>            `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h4><p>调用<code>Vue.component()</code>方法</p><p>调用<code>Vue.component()</code>方法是将刚才的租价能够早期注册为一个组件，并且给他起一个组件的标签名</p><p>所以需要传递两个参数：1、注册组件的标签名 &nbsp;2、组件构造器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//注册组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-cpn'</span><span class="token punctuation">,</span>cpnC<span class="token punctuation">)</span></code></pre><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>在<code>Vue</code>实例的作用范围内使用组件</p><p>比如下例的<code>id="app"</code>下才有效</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h3><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><p>在<code>Vue</code>实例外注册的都是全局组件，只要在<code>Vue</code>的实例范围内使用都可以</p><p>调用<code>Vue.component()</code>方法</p><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><p>在<code>Vue</code>实例内注册组件，这个组件只可以在自己的组件范围内使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//cpn使用组件时的标签名</span>                cpn<span class="token punctuation">:</span>cpnC            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre><code>components:{       //cpn使用组件时的标签名       cpn:cpnC}</code></pre><p>上面的局部组件只可以在<code>id="app"</code>的实例范围内使用这个组件</p><h3 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h3><p>可以在组件内调用组件</p><p>例如我们创建了cpnC1 组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpnC1 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签1&lt;/h2>                &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>            &lt;/div>                `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>接着我们创建第二个组件cpnC2 ，在这个组件内我们想调用第一个组件,我们可以在第二个组件注册第一个组件：<code>components : { cpn1 : cpnC1 }</code>，这样就可以在第二个组件内使用组件一了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpnC2 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签2&lt;/h2>                &lt;p>我是内容，谢谢谢谢谢谢&lt;/p>                &lt;cpn1>&lt;/cpn1>            &lt;/div>                `</span></span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>               cpn1<span class="token punctuation">:</span>cpnC1             <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>同时我们使用组件二的时候也需要注册组件二才可以</p><h3 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h3><p>省去创建的过程，提供注册的语法糖</p><p>我们原来使用组件，首先通过<code>const&nbsp;cpnC1&nbsp;= Vue.extend({...})</code> 创建一个组件，然后注册这个组件<code>Vue.component("cpn1", cpnC1)</code></p><p>我们可以通过语法糖省去第一步创建全局组件：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"cpn1"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签1&lt;/h2>                &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>            &lt;/div>                `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>创建局部组件如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'cpn1'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                        &lt;div>                            &lt;h2>我是标签1&lt;/h2>                            &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>                        &lt;/div>                            `</span></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="组件模板的分离写法"><a href="#组件模板的分离写法" class="headerlink" title="组件模板的分离写法"></a>组件模板的分离写法</h3><h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><p>类型必须是<code>text/x-template</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是标题<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是内容哈哈哈哈<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后注册组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//注册一个全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后在实例范围内调用组件就可以了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="template标签"><a href="#template标签" class="headerlink" title="template标签"></a>template标签</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是内容哈哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>然后注册和调用同上</p><h3 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h3><h4 id="1、组件内部可以访问Vue里的数据吗？"><a href="#1、组件内部可以访问Vue里的数据吗？" class="headerlink" title="1、组件内部可以访问Vue里的数据吗？"></a>1、组件内部可以访问<code>Vue</code>里的数据吗？</h4><p>不能访问，组件是一个单独功能模块的封装，那么组件自己的数据放在哪呢？</p><p>组件对象里也有一个data属性(也可以有methods等属性)，只是这个data属性必须是一个函数，而且这个函数返回一个对象，对象内部保存数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>组件内的数据：：{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>          template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>          <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span><span class="token punctuation">{</span>                  title<span class="token punctuation">:</span><span class="token string">"我是组件内的数据"</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>只有这样才能保存组件内的数据</p><h4 id="2、组件内的data为什么必须是一个函数？"><a href="#2、组件内的data为什么必须是一个函数？" class="headerlink" title="2、组件内的data为什么必须是一个函数？"></a>2、组件内的data为什么必须是一个函数？</h4><p>因为组件封装后就会是一个独立的单位，调用相同组件多次，内部数据由于是用函数保存的，用函数保存，每一次一个新的组件需要的数据都是一个新的地址保存各自的数据，所以不会污染。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        counter<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果使用对象data保存数据，调用多次的时候，修改一个data，其他data数据也会被污染，因为调用对象的实质是调用了对象的地址，如果数据用对象保存，那么相同组件调用的都是同一个对象地址</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        counter<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面使用对象保存数据，就会报错</p><h3 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h3><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>上一节中，我们知道子组件不能引用父组件或者<code>Vue</code>实例的数据的</p><p>但是我们在开发中确实需要一些数据展示在小组间中</p><p>这时候我们不会让小组件再发送一次网络请求，而是直接让父组件将数据传递给子组件</p><h4 id="如何父子组件通信？"><a href="#如何父子组件通信？" class="headerlink" title="如何父子组件通信？"></a>如何父子组件通信？</h4><h5 id="父传子：通过props向子组件传递数据"><a href="#父传子：通过props向子组件传递数据" class="headerlink" title="父传子：通过props向子组件传递数据"></a>父传子：通过props向子组件传递数据</h5><p>父组件的数据：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span><span class="token punctuation">,</span>        movies<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'海王'</span><span class="token punctuation">,</span><span class="token string">'海贼王'</span><span class="token punctuation">,</span><span class="token string">'海尔兄弟'</span><span class="token punctuation">,</span><span class="token string">'火影忍者'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        cpn    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="props用数组接收数据"><a href="#props用数组接收数据" class="headerlink" title="props用数组接收数据"></a>props用数组接收数据</h6><p>首先在<code>props</code>里定义接收数据的容器名字（<strong>注意这里不支持驼峰命名，因为v-bind不支持驼峰命名</strong>）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpn <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn2'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'cmovies'</span><span class="token punctuation">,</span><span class="token string">'cmessage'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在调用组件的标签内绑定父组件传过来的数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>cmovies</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span> <span class="token attr-name">:cmessage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样子组件内就能接收到父组件的数据了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是子组件内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in cmovies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>得到父组件数据电影名称--->{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>得到父组件数据短信--->{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h6 id="props用对象接收数据"><a href="#props用对象接收数据" class="headerlink" title="props用对象接收数据"></a>props用对象接收数据</h6><p>用这种方法，还需要对传过来的数据进行一个验证，对传过来的数据有一个类型限制，还可以设置默认值<code>default</code>，还有如果<code>required:true</code>，调用的时候必须绑定这个属性</p><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span><span class="token punctuation">{</span>    cmovies<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    cmessage<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'aaaaaa'</span><span class="token punctuation">,</span>        required<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="子传父：通过事件向父组件发送消息"><a href="#子传父：通过事件向父组件发送消息" class="headerlink" title="子传父：通过事件向父组件发送消息"></a>子传父：通过事件向父组件发送消息</h5><p>举个例子，从子组件传递子组件的点击事件回到父组件，并且获得点击的id</p><h6 id="首先在子组件定义一个点击事件："><a href="#首先在子组件定义一个点击事件：" class="headerlink" title="首先在子组件定义一个点击事件："></a>首先在子组件定义一个点击事件：</h6><p><code>@click="btnClick(item)"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in categories<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h6 id="在子组件的方法里发送给父组件："><a href="#在子组件的方法里发送给父组件：" class="headerlink" title="在子组件的方法里发送给父组件："></a>在子组件的方法里发送给父组件：</h6><p><code>this.$emit('itemclick',item.id)</code></p><p>注意这里自定义的方法名不能用驼峰命名</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把点击事件传给父组件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'itemclick'</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="父组件的标签上接收这个事件"><a href="#父组件的标签上接收这个事件" class="headerlink" title="父组件的标签上接收这个事件"></a>父组件的标签上接收这个事件</h6><p><code>@itemclick="cpnClick"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">@itemclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h6 id="在父组件的方法里就可以得到子组件传来的数据了"><a href="#在父组件的方法里就可以得到子组件传来的数据了" class="headerlink" title="在父组件的方法里就可以得到子组件传来的数据了"></a>在父组件的方法里就可以得到子组件传来的数据了</h6><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">cpnClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出的是点击的子组件的id</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-on</title>
      <link href="2019/10/17/v-on/"/>
      <url>2019/10/17/v-on/</url>
      
        <content type="html"><![CDATA[<h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><h3 id="v-on的语法糖"><a href="#v-on的语法糖" class="headerlink" title="v-on的语法糖"></a><code>v-on</code>的语法糖</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>increment<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>decrement<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                counter<span class="token punctuation">:</span><span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a><code>v-on</code>参数</h3><p>通过<code>methods</code>中定义方法，以供<code>@click</code>调用的时候，需要注意参数问题</p><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>如果该方法不需要额外参数，那么方法后的()可以不添加</p><p>注意：在事件定义时，写函数时省略了小括号，但是方法本身是需要一个参数的，这个时候，<code>vue</code>会默认将浏览器生产的<code>event</code>事件对象作为参数传入到方法中</p><h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p>方法定义的时候我们需要<code>event</code>对象，同时也需要其他的参数</p><p>在调用方法时我们需要使用<code>$event</code>手动获取到浏览器参数的<code>event</code>对象</p><p><img src="https://i.loli.net/2020/11/05/mrp7toyRNbfFSWI.png" alt="v-on传参.png"><br><img src="https://i.loli.net/2020/11/05/Lvu2ElxFsI4kVYK.png" alt="v-on传参结果.png"></p><h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a><code>v-on</code>修饰符</h3><h4 id="阻止事件冒泡-stop"><a href="#阻止事件冒泡-stop" class="headerlink" title="阻止事件冒泡.stop"></a>阻止事件冒泡<code>.stop</code></h4><p><code>@click.stop="btnClick"</code></p><h4 id="阻止默认事件-prevent"><a href="#阻止默认事件-prevent" class="headerlink" title="阻止默认事件.prevent"></a>阻止默认事件<code>.prevent</code></h4><p><code>@click.prevent="submitClick"</code>例如点击<code>submit</code>自动提交数据，使用该修饰符之后，点击后会触发方法，而不会默认提交数据</p><h4 id="监听键盘的键帽"><a href="#监听键盘的键帽" class="headerlink" title="监听键盘的键帽"></a>监听键盘的键帽</h4><p><code>@keyup.enter="keyup"</code>这个是监听到点击<code>enter</code>后执行<code>keyup</code>方法</p><h4 id="监听组件根元素的原生事件-native"><a href="#监听组件根元素的原生事件-native" class="headerlink" title="监听组件根元素的原生事件.native"></a>监听组件根元素的原生事件<code>.native</code></h4><h4 id="只触发一次回调-once"><a href="#只触发一次回调-once" class="headerlink" title="只触发一次回调.once"></a>只触发一次回调<code>.once</code></h4><p><code>@click.once="btnClick"</code>只会第一次点击触发该方法</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> v-on指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算属性computed</title>
      <link href="2019/10/16/ji-suan-shu-xing/"/>
      <url>2019/10/16/ji-suan-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</p><p>但是在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><pre><code>比如我们有`firstName`和`lastName`两个变量，我们需要显示完整的名称但是如果多个地方都需要显示完整的名称，我们就需要写多个`{{firstName}}`和`{{lastName}}`</code></pre><p>我们可以将上面的代码换成计算属性：</p><pre><code>我们发现计算属性是写在实例的`computed`选项中的</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{firstName+'  '+lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{firstName}} {{lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{getFullName()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                 firstName<span class="token punctuation">:</span> <span class="token string">'Lebron'</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span><span class="token string">'James'</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 计算属性，一般不用动词 */</span>                fullName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'  '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                getFullName <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'  '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>计算属性不要加小括号()</p><h3 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>总价格:{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                books<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">110</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Unix编程艺术'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">119</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'代码大全'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">105</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">112</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'深入理解计算机原理'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">113</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'现代操作系统'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">87</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                totalPrice<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> result  <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> result                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的<code>setter</code>和<code>getter</code></h3><p>我们之前在计算属性的基础操作中使用了一个方法<code>fullName</code>,如下</p><pre><code>fullName:function(){                    return this.firstName + '  ' + this.lastName                }</code></pre><p>其实是这样的</p><pre><code>computed: {                fullName:{                    set:function(){                    },                    get:function(){                        return this.firstName + '  ' + this.lastName                    }                }            }</code></pre><p>其中<code>set</code>属性是不需要实现的，我们不希望计算属性有<code>set</code>属性，其实计算属性是个只读属性，如下</p><pre><code>computed: {                fullName:{                    get:function(){                        return this.firstName + '  ' + this.lastName                    }                }            }</code></pre><p>我们方便使用就使用第一种方式</p><p><strong>计算属性的方法，即使调用多次，计算属性也只是调用了一次，内部是有缓存的</strong>，如果方法的返回结果不变，就不会重复调用多次，直接调用缓存。</p><p><strong>使用<code>methods</code>的时候，调用几次，函数就会调用几次</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> computed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基本语法</title>
      <link href="2019/10/11/vue-ji-ben-yu-fa/"/>
      <url>2019/10/11/vue-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基本语法"><a href="#Vue基本语法" class="headerlink" title="Vue基本语法"></a>Vue基本语法</h1><h3 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h3><h4 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a><code>Mustache</code></h4><p><code>Mustache</code>语法:双大括号</p><p><code>Mustache</code>:胡须/胡子</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{message}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{firstName+' '+lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{counter*2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span><span class="token punctuation">,</span>                firstName<span class="token punctuation">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span> <span class="token string">'Bryant'</span><span class="token punctuation">,</span>                counter<span class="token punctuation">:</span> <span class="token number">1900</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a><code>v-once</code>指令</h4><p>只会在第一次显示数据，之后修改并不会改变</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><code>v-html</code></h4><p>解析字符串，识别a标签，并且能解析<code>href</code>地址</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">'&lt;a href="https://www.baidu.com">百度一下&lt;/a>'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a><code>v-text</code></h4><p>用起来并不灵活，会覆盖后面的内容</p><pre><code>&lt;div id="app"&gt;        &lt;h2 v-once&gt;{{message}},李银河&lt;/h2&gt;            //你好啊,李银河        &lt;h2 v-text="message"&gt;,李银河&lt;/h2&gt;            //你好啊    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        let app = new Vue({            el: `#app`,            data: {                message: '你好啊'            }        })    &lt;/script&gt;</code></pre><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a><code>v-pre</code></h4><p>不解析<code>Mustache</code>语法，将内容原封不动输出</p><pre><code>&lt;div id="app"&gt;        &lt;h2 v-pre&gt;{{message}},李银河&lt;/h2&gt;        //{{message}},李银河    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        let app = new Vue({            el: `#app`,            data: {                message: '你好啊'            }        })    &lt;/script&gt;</code></pre><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a><code>v-cloak</code></h4><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><code>v-bind</code></h4><p>动态绑定属性</p><pre><code>&lt;div id="app"&gt;        {{message}}        &lt;a v-bind:href="url"&gt;百度一下&lt;/a&gt;    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;let app = new Vue({            el: `#app`,            data: {                message: '你好啊',                url:'https://www.baidu.com'            }        })    &lt;/script&gt;</code></pre><p>语法糖（简写）：</p><p><code>&lt;a :href="url"&gt;百度一下&lt;/a&gt;</code></p><h4 id="v-bind动态绑定class属性"><a href="#v-bind动态绑定class属性" class="headerlink" title="v-bind动态绑定class属性"></a><code>v-bind</code>动态绑定<code>class</code>属性</h4><p>点击按钮切换<code>class</code></p><pre><code>&lt;!-- css --&gt;&lt;style&gt;        .active{            color: red;        }        .line{            font-size: larger;        }&lt;/style&gt;&lt;!-- html --&gt;    &lt;div id="app"&gt;        &lt;h2 class="title" v-bind:class="{active:isActive,line:isLine}"&gt;{{message}}&lt;/h2&gt;        &lt;button v-on:click="btnClick"&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;let app = new Vue({            el: `#app`,            data: {                message:'Hello Vuejs',                isActive:true,                isLine:true            },            methods:{                btnClick:function(){                    this.isActive=!this.isActive,                    this.isLine=!this.isLine                }            }        })    &lt;/script&gt;</code></pre><p><img src="https://i.loli.net/2020/11/05/OAr2TMR5pLj9vPw.png" alt="v-bind绑定class.png"><br><img src="https://i.loli.net/2020/11/05/cTLMvb8mFaRqlu5.png" alt="v-bind绑定class2.png"></p><h5 id="绑定方式一、对象语法"><a href="#绑定方式一、对象语法" class="headerlink" title="绑定方式一、对象语法"></a>绑定方式一、对象语法</h5><p>用法有：</p><p>1、通过一个对象绑定一个类(可以传多个值)，并且和普通类同时存在并不冲突</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active:isActive,line:isLine}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>2、如果用法过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</p><pre class=" language-html"><code class="language-html">//hmtl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getClasses()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>//jslet app = new Vue({            el: `#app`,            data: {                message:'Hello Vuejs',                isActive:true,                isLine:true            },            methods:{                btnClick:function(){                    this.isActive=!this.isActive,                    this.isLine=!this.isLine                },                getClasses:function(){                    return {active:this.isActive,line:this.isLine}                }            }        })</code></pre><h5 id="绑定方式二、数组语法"><a href="#绑定方式二、数组语法" class="headerlink" title="绑定方式二、数组语法"></a>绑定方式二、数组语法</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>active<span class="token punctuation">'</span>,<span class="token punctuation">'</span>line<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>注意：其中<code>active</code>加引号就是字符串，不加引号就是变量</p><h4 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-<code>bind</code>绑定<code>style</code></h4><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>属性值需要加引号，使之解析成为字符串，不加引号就会解析成为变量,如下50px必须加引号，否则会被当成变量解析</p><p>对象的值可以来自于<code>data</code>中的属性</p><pre><code>&lt;h2 class="title" :style="{fontSize:'50px'}"&gt;{{message}}&lt;/h2&gt;&lt;h2 class="title" :style="{fontSize:finaSize + 'px',backgroundColor:finaColor}"&gt;{{message}}&lt;/h2&gt;</code></pre><p><img src="https://i.loli.net/2020/11/05/xpUDdeOoZSz6cV3.png" alt="v-bind绑定style.png"></p><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><pre><code>&lt;h2 class="title" :style="[baseStyle1 , baseStyle2]"&gt;{{message}}&lt;/h2&gt;</code></pre><pre><code>data: {     message:'Hello Vuejs',     baseStyle1:{backgroundColor:'red'},     baseStyle2:{fontSize:'100px'}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Mustache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVVM</title>
      <link href="2019/10/08/mvvm/"/>
      <url>2019/10/08/mvvm/</url>
      
        <content type="html"><![CDATA[<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><h3 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是<code>MVVM</code></h3><h4 id="View层"><a href="#View层" class="headerlink" title="View层"></a><code>View</code>层</h4><p>视图层</p><p>在我们前端开发中，通常就是DOM层</p><p>主要的作用是给用户展示各种信息</p><h4 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a><code>Model</code>层</h4><p>数据层</p><p>数据可能是我们固定的死数据，更多的是来自我们服务器，网络上请求下来的数据</p><p>在我们的计数器案例中，就是后面抽取出来的<code>obj</code></p><h4 id="VueModel层"><a href="#VueModel层" class="headerlink" title="VueModel层"></a><code>VueModel</code>层</h4><p>视图模型层</p><p>视图模型层是<code>View</code>和<code>Model</code>沟通的桥梁</p><p>一方面它实现了<code>Data Binding</code>,也就是数据绑定，将<code>Model</code>的改变实时反应到<code>View</code>中</p><p>另一方面它实现了一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的Data。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue简介和安装</title>
      <link href="2019/10/03/vue-jian-jie-he-an-zhuang/"/>
      <url>2019/10/03/vue-jian-jie-he-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="vue简介和安装"><a href="#vue简介和安装" class="headerlink" title="vue简介和安装"></a>vue简介和安装</h1><h3 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a><code>Vue</code>简介</h3><h4 id="vue是一个渐进式框架"><a href="#vue是一个渐进式框架" class="headerlink" title="vue是一个渐进式框架"></a><code>vue</code>是一个渐进式框架</h4><p>渐进式意味着你可以将<code>vue</code>作为你应用的一部分嵌套进去，带来更丰富的交互体验</p><p>或者你希望将更多的业务逻辑使用<code>vue</code>实现，那么<code>vue</code>的核心库以及其生态系统比如<code>Core+Vue+router+Vuex</code>，也可以满足各种需求</p><h4 id="Vue有很多特点和Web开发中常见的高级功能"><a href="#Vue有很多特点和Web开发中常见的高级功能" class="headerlink" title="Vue有很多特点和Web开发中常见的高级功能"></a><code>Vue</code>有很多特点和<code>Web</code>开发中常见的高级功能</h4><h5 id="解耦视图和数据"><a href="#解耦视图和数据" class="headerlink" title="解耦视图和数据"></a>解耦视图和数据</h5><h5 id="可复用组件"><a href="#可复用组件" class="headerlink" title="可复用组件"></a>可复用组件</h5><h5 id="前端路由技术"><a href="#前端路由技术" class="headerlink" title="前端路由技术"></a>前端路由技术</h5><h5 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h5><h5 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h5><h3 id="Vue的安装"><a href="#Vue的安装" class="headerlink" title="Vue的安装"></a><code>Vue</code>的安装</h3><h4 id="一、直接CDN引入"><a href="#一、直接CDN引入" class="headerlink" title="一、直接CDN引入"></a>一、直接CDN引入</h4><pre><code>&lt;!-- 开发环境版本，包含有帮助的命令行警告 --&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt;</code></pre><p>在<code>vue</code>官网右键链接另存为就可以下载下来了</p><h4 id="二、下载和引入"><a href="#二、下载和引入" class="headerlink" title="二、下载和引入"></a>二、下载和引入</h4><p>开发环境：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></p><p>生产环境：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></p><h4 id="三、NPM安装"><a href="#三、NPM安装" class="headerlink" title="三、NPM安装"></a>三、NPM安装</h4><p>后续通过<code>webpack</code>和<code>CLI</code>的使用，我们使用这个方式</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 渐进式框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
