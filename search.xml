<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>组件化</title>
      <link href="2019/10/20/zu-jian-hua-chong-dian/"/>
      <url>2019/10/20/zu-jian-hua-chong-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="组件化-重点"><a href="#组件化-重点" class="headerlink" title="组件化(重点)"></a>组件化(重点)</h1><h3 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a><code>Vue</code>组件化思想</h3><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>组件化提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</p><p>任何的应用都会被抽象成一个组件树</p><h4 id="组件化思想的应用"><a href="#组件化思想的应用" class="headerlink" title="组件化思想的应用"></a>组件化思想的应用</h4><p>有了组件化的思想，我们在之后的开发中就要充分利用它</p><p>尽可能地将页面拆分成一个小的、可复用地组件</p><p>这样我们的代码更加方便组织和管理，扩展性也更强</p><h3 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h3><h4 id="创建组件构造器"><a href="#创建组件构造器" class="headerlink" title="创建组件构造器"></a>创建组件构造器</h4><p>调用<code>Vue.extend()</code>方法创建<strong>组件构造器</strong></p><p>传入<code>template</code>是自定义组件模板</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标题&lt;/h2>                &lt;p>我是内容哈哈哈&lt;/p>                &lt;p>我是内容笑笑笑笑笑笑笑笑笑&lt;/p>                &lt;p>我是内容水水水水&lt;/p>            &lt;/div>            `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h4><p>调用<code>Vue.component()</code>方法</p><p>调用<code>Vue.component()</code>方法是将刚才的租价能够早期注册为一个组件，并且给他起一个组件的标签名</p><p>所以需要传递两个参数：1、注册组件的标签名 &nbsp;2、组件构造器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//注册组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-cpn'</span><span class="token punctuation">,</span>cpnC<span class="token punctuation">)</span></code></pre><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>在<code>Vue</code>实例的作用范围内使用组件</p><p>比如下例的<code>id="app"</code>下才有效</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h3><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><p>在<code>Vue</code>实例外注册的都是全局组件，只要在<code>Vue</code>的实例范围内使用都可以</p><p>调用<code>Vue.component()</code>方法</p><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><p>在<code>Vue</code>实例内注册组件，这个组件只可以在自己的组件范围内使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//cpn使用组件时的标签名</span>                cpn<span class="token punctuation">:</span>cpnC            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre><code>components:{       //cpn使用组件时的标签名       cpn:cpnC}</code></pre><p>上面的局部组件只可以在<code>id="app"</code>的实例范围内使用这个组件</p><h3 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h3><p>可以在组件内调用组件</p><p>例如我们创建了cpnC1 组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpnC1 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签1&lt;/h2>                &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>            &lt;/div>                `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>接着我们创建第二个组件cpnC2 ，在这个组件内我们想调用第一个组件,我们可以在第二个组件注册第一个组件：<code>components : { cpn1 : cpnC1 }</code>，这样就可以在第二个组件内使用组件一了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpnC2 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签2&lt;/h2>                &lt;p>我是内容，谢谢谢谢谢谢&lt;/p>                &lt;cpn1>&lt;/cpn1>            &lt;/div>                `</span></span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>               cpn1<span class="token punctuation">:</span>cpnC1             <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>同时我们使用组件二的时候也需要注册组件二才可以</p><h3 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h3><p>省去创建的过程，提供注册的语法糖</p><p>我们原来使用组件，首先通过<code>const&nbsp;cpnC1&nbsp;= Vue.extend({...})</code> 创建一个组件，然后注册这个组件<code>Vue.component("cpn1", cpnC1)</code></p><p>我们可以通过语法糖省去第一步创建全局组件：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"cpn1"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`            &lt;div>                &lt;h2>我是标签1&lt;/h2>                &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>            &lt;/div>                `</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>创建局部组件如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'cpn1'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                        &lt;div>                            &lt;h2>我是标签1&lt;/h2>                            &lt;p>我是内容，哈哈哈哈哈哈&lt;/p>                        &lt;/div>                            `</span></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="组件模板的分离写法"><a href="#组件模板的分离写法" class="headerlink" title="组件模板的分离写法"></a>组件模板的分离写法</h3><h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><p>类型必须是<code>text/x-template</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是标题<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是内容哈哈哈哈<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后注册组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//注册一个全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后在实例范围内调用组件就可以了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="template标签"><a href="#template标签" class="headerlink" title="template标签"></a>template标签</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是内容哈哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>然后注册和调用同上</p><h3 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h3><h4 id="1、组件内部可以访问Vue里的数据吗？"><a href="#1、组件内部可以访问Vue里的数据吗？" class="headerlink" title="1、组件内部可以访问Vue里的数据吗？"></a>1、组件内部可以访问<code>Vue</code>里的数据吗？</h4><p>不能访问，组件是一个单独功能模块的封装，那么组件自己的数据放在哪呢？</p><p>组件对象里也有一个data属性(也可以有methods等属性)，只是这个data属性必须是一个函数，而且这个函数返回一个对象，对象内部保存数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>组件内的数据：：{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>          template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>          <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span><span class="token punctuation">{</span>                  title<span class="token punctuation">:</span><span class="token string">"我是组件内的数据"</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>只有这样才能保存组件内的数据</p><h4 id="2、组件内的data为什么必须是一个函数？"><a href="#2、组件内的data为什么必须是一个函数？" class="headerlink" title="2、组件内的data为什么必须是一个函数？"></a>2、组件内的data为什么必须是一个函数？</h4><p>因为组件封装后就会是一个独立的单位，调用相同组件多次，内部数据由于是用函数保存的，用函数保存，每一次一个新的组件需要的数据都是一个新的地址保存各自的数据，所以不会污染。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        counter<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果使用对象data保存数据，调用多次的时候，修改一个data，其他data数据也会被污染，因为调用对象的实质是调用了对象的地址，如果数据用对象保存，那么相同组件调用的都是同一个对象地址</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        counter<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面使用对象保存数据，就会报错</p><h3 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h3><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>上一节中，我们知道子组件不能引用父组件或者<code>Vue</code>实例的数据的</p><p>但是我们在开发中确实需要一些数据展示在小组间中</p><p>这时候我们不会让小组件再发送一次网络请求，而是直接让父组件将数据传递给子组件</p><h4 id="如何父子组件通信？"><a href="#如何父子组件通信？" class="headerlink" title="如何父子组件通信？"></a>如何父子组件通信？</h4><h5 id="父传子：通过props向子组件传递数据"><a href="#父传子：通过props向子组件传递数据" class="headerlink" title="父传子：通过props向子组件传递数据"></a>父传子：通过props向子组件传递数据</h5><p>父组件的数据：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span><span class="token punctuation">,</span>        movies<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'海王'</span><span class="token punctuation">,</span><span class="token string">'海贼王'</span><span class="token punctuation">,</span><span class="token string">'海尔兄弟'</span><span class="token punctuation">,</span><span class="token string">'火影忍者'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        cpn    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h6 id="props用数组接收数据"><a href="#props用数组接收数据" class="headerlink" title="props用数组接收数据"></a>props用数组接收数据</h6><p>首先在<code>props</code>里定义接收数据的容器名字（<strong>注意这里不支持驼峰命名，因为v-bind不支持驼峰命名</strong>）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cpn <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn2'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'cmovies'</span><span class="token punctuation">,</span><span class="token string">'cmessage'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在调用组件的标签内绑定父组件传过来的数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>cmovies</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span> <span class="token attr-name">:cmessage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样子组件内就能接收到父组件的数据了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是子组件内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in cmovies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>得到父组件数据电影名称--->{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>得到父组件数据短信--->{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h6 id="props用对象接收数据"><a href="#props用对象接收数据" class="headerlink" title="props用对象接收数据"></a>props用对象接收数据</h6><p>用这种方法，还需要对传过来的数据进行一个验证，对传过来的数据有一个类型限制，还可以设置默认值<code>default</code>，还有如果<code>required:true</code>，调用的时候必须绑定这个属性</p><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span><span class="token punctuation">{</span>    cmovies<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    cmessage<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'aaaaaa'</span><span class="token punctuation">,</span>        required<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="子传父：通过事件向父组件发送消息"><a href="#子传父：通过事件向父组件发送消息" class="headerlink" title="子传父：通过事件向父组件发送消息"></a>子传父：通过事件向父组件发送消息</h5><p>举个例子，从子组件传递子组件的点击事件回到父组件，并且获得点击的id</p><h6 id="首先在子组件定义一个点击事件："><a href="#首先在子组件定义一个点击事件：" class="headerlink" title="首先在子组件定义一个点击事件："></a>首先在子组件定义一个点击事件：</h6><p><code>@click="btnClick(item)"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in categories<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h6 id="在子组件的方法里发送给父组件："><a href="#在子组件的方法里发送给父组件：" class="headerlink" title="在子组件的方法里发送给父组件："></a>在子组件的方法里发送给父组件：</h6><p><code>this.$emit('itemclick',item.id)</code></p><p>注意这里自定义的方法名不能用驼峰命名</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把点击事件传给父组件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'itemclick'</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="父组件的标签上接收这个事件"><a href="#父组件的标签上接收这个事件" class="headerlink" title="父组件的标签上接收这个事件"></a>父组件的标签上接收这个事件</h6><p><code>@itemclick="cpnClick"</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">@itemclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h6 id="在父组件的方法里就可以得到子组件传来的数据了"><a href="#在父组件的方法里就可以得到子组件传来的数据了" class="headerlink" title="在父组件的方法里就可以得到子组件传来的数据了"></a>在父组件的方法里就可以得到子组件传来的数据了</h6><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">cpnClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出的是点击的子组件的id</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-on</title>
      <link href="2019/10/17/v-on/"/>
      <url>2019/10/17/v-on/</url>
      
        <content type="html"><![CDATA[<h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><h3 id="v-on的语法糖"><a href="#v-on的语法糖" class="headerlink" title="v-on的语法糖"></a><code>v-on</code>的语法糖</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>increment<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>decrement<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                counter<span class="token punctuation">:</span><span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a><code>v-on</code>参数</h3><p>通过<code>methods</code>中定义方法，以供<code>@click</code>调用的时候，需要注意参数问题</p><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>如果该方法不需要额外参数，那么方法后的()可以不添加</p><p>注意：在事件定义时，写函数时省略了小括号，但是方法本身是需要一个参数的，这个时候，<code>vue</code>会默认将浏览器生产的<code>event</code>事件对象作为参数传入到方法中</p><h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p>方法定义的时候我们需要<code>event</code>对象，同时也需要其他的参数</p><p>在调用方法时我们需要使用<code>$event</code>手动获取到浏览器参数的<code>event</code>对象</p><p><img src="https://i.loli.net/2020/11/05/mrp7toyRNbfFSWI.png" alt="v-on传参.png"><br><img src="https://i.loli.net/2020/11/05/Lvu2ElxFsI4kVYK.png" alt="v-on传参结果.png"></p><h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a><code>v-on</code>修饰符</h3><h4 id="阻止事件冒泡-stop"><a href="#阻止事件冒泡-stop" class="headerlink" title="阻止事件冒泡.stop"></a>阻止事件冒泡<code>.stop</code></h4><p><code>@click.stop="btnClick"</code></p><h4 id="阻止默认事件-prevent"><a href="#阻止默认事件-prevent" class="headerlink" title="阻止默认事件.prevent"></a>阻止默认事件<code>.prevent</code></h4><p><code>@click.prevent="submitClick"</code>例如点击<code>submit</code>自动提交数据，使用该修饰符之后，点击后会触发方法，而不会默认提交数据</p><h4 id="监听键盘的键帽"><a href="#监听键盘的键帽" class="headerlink" title="监听键盘的键帽"></a>监听键盘的键帽</h4><p><code>@keyup.enter="keyup"</code>这个是监听到点击<code>enter</code>后执行<code>keyup</code>方法</p><h4 id="监听组件根元素的原生事件-native"><a href="#监听组件根元素的原生事件-native" class="headerlink" title="监听组件根元素的原生事件.native"></a>监听组件根元素的原生事件<code>.native</code></h4><h4 id="只触发一次回调-once"><a href="#只触发一次回调-once" class="headerlink" title="只触发一次回调.once"></a>只触发一次回调<code>.once</code></h4><p><code>@click.once="btnClick"</code>只会第一次点击触发该方法</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> v-on指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算属性computed</title>
      <link href="2019/10/16/ji-suan-shu-xing/"/>
      <url>2019/10/16/ji-suan-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</p><p>但是在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><pre><code>比如我们有`firstName`和`lastName`两个变量，我们需要显示完整的名称但是如果多个地方都需要显示完整的名称，我们就需要写多个`{{firstName}}`和`{{lastName}}`</code></pre><p>我们可以将上面的代码换成计算属性：</p><pre><code>我们发现计算属性是写在实例的`computed`选项中的</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{firstName+'  '+lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{firstName}} {{lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{getFullName()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                 firstName<span class="token punctuation">:</span> <span class="token string">'Lebron'</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span><span class="token string">'James'</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 计算属性，一般不用动词 */</span>                fullName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'  '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                getFullName <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'  '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>计算属性不要加小括号()</p><h3 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>总价格:{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                books<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">110</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Unix编程艺术'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">119</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'代码大全'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">105</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">112</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'深入理解计算机原理'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">113</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'现代操作系统'</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">87</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                totalPrice<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> result  <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> result                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的<code>setter</code>和<code>getter</code></h3><p>我们之前在计算属性的基础操作中使用了一个方法<code>fullName</code>,如下</p><pre><code>fullName:function(){                    return this.firstName + '  ' + this.lastName                }</code></pre><p>其实是这样的</p><pre><code>computed: {                fullName:{                    set:function(){                    },                    get:function(){                        return this.firstName + '  ' + this.lastName                    }                }            }</code></pre><p>其中<code>set</code>属性是不需要实现的，我们不希望计算属性有<code>set</code>属性，其实计算属性是个只读属性，如下</p><pre><code>computed: {                fullName:{                    get:function(){                        return this.firstName + '  ' + this.lastName                    }                }            }</code></pre><p>我们方便使用就使用第一种方式</p><p><strong>计算属性的方法，即使调用多次，计算属性也只是调用了一次，内部是有缓存的</strong>，如果方法的返回结果不变，就不会重复调用多次，直接调用缓存。</p><p><strong>使用<code>methods</code>的时候，调用几次，函数就会调用几次</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> computed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基本语法</title>
      <link href="2019/10/11/vue-ji-ben-yu-fa/"/>
      <url>2019/10/11/vue-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基本语法"><a href="#Vue基本语法" class="headerlink" title="Vue基本语法"></a>Vue基本语法</h1><h3 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h3><h4 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a><code>Mustache</code></h4><p><code>Mustache</code>语法:双大括号</p><p><code>Mustache</code>:胡须/胡子</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{message}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{firstName+' '+lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{counter*2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span><span class="token punctuation">,</span>                firstName<span class="token punctuation">:</span> <span class="token string">'Kobe'</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span> <span class="token string">'Bryant'</span><span class="token punctuation">,</span>                counter<span class="token punctuation">:</span> <span class="token number">1900</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a><code>v-once</code>指令</h4><p>只会在第一次显示数据，之后修改并不会改变</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><code>v-html</code></h4><p>解析字符串，识别a标签，并且能解析<code>href</code>地址</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#app`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">'&lt;a href="https://www.baidu.com">百度一下&lt;/a>'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a><code>v-text</code></h4><p>用起来并不灵活，会覆盖后面的内容</p><pre><code>&lt;div id="app"&gt;        &lt;h2 v-once&gt;{{message}},李银河&lt;/h2&gt;            //你好啊,李银河        &lt;h2 v-text="message"&gt;,李银河&lt;/h2&gt;            //你好啊    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        let app = new Vue({            el: `#app`,            data: {                message: '你好啊'            }        })    &lt;/script&gt;</code></pre><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a><code>v-pre</code></h4><p>不解析<code>Mustache</code>语法，将内容原封不动输出</p><pre><code>&lt;div id="app"&gt;        &lt;h2 v-pre&gt;{{message}},李银河&lt;/h2&gt;        //{{message}},李银河    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        let app = new Vue({            el: `#app`,            data: {                message: '你好啊'            }        })    &lt;/script&gt;</code></pre><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a><code>v-cloak</code></h4><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><code>v-bind</code></h4><p>动态绑定属性</p><pre><code>&lt;div id="app"&gt;        {{message}}        &lt;a v-bind:href="url"&gt;百度一下&lt;/a&gt;    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;let app = new Vue({            el: `#app`,            data: {                message: '你好啊',                url:'https://www.baidu.com'            }        })    &lt;/script&gt;</code></pre><p>语法糖（简写）：</p><p><code>&lt;a :href="url"&gt;百度一下&lt;/a&gt;</code></p><h4 id="v-bind动态绑定class属性"><a href="#v-bind动态绑定class属性" class="headerlink" title="v-bind动态绑定class属性"></a><code>v-bind</code>动态绑定<code>class</code>属性</h4><p>点击按钮切换<code>class</code></p><pre><code>&lt;!-- css --&gt;&lt;style&gt;        .active{            color: red;        }        .line{            font-size: larger;        }&lt;/style&gt;&lt;!-- html --&gt;    &lt;div id="app"&gt;        &lt;h2 class="title" v-bind:class="{active:isActive,line:isLine}"&gt;{{message}}&lt;/h2&gt;        &lt;button v-on:click="btnClick"&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script src="../js/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;let app = new Vue({            el: `#app`,            data: {                message:'Hello Vuejs',                isActive:true,                isLine:true            },            methods:{                btnClick:function(){                    this.isActive=!this.isActive,                    this.isLine=!this.isLine                }            }        })    &lt;/script&gt;</code></pre><p><img src="https://i.loli.net/2020/11/05/OAr2TMR5pLj9vPw.png" alt="v-bind绑定class.png"><br><img src="https://i.loli.net/2020/11/05/cTLMvb8mFaRqlu5.png" alt="v-bind绑定class2.png"></p><h5 id="绑定方式一、对象语法"><a href="#绑定方式一、对象语法" class="headerlink" title="绑定方式一、对象语法"></a>绑定方式一、对象语法</h5><p>用法有：</p><p>1、通过一个对象绑定一个类(可以传多个值)，并且和普通类同时存在并不冲突</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active:isActive,line:isLine}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>2、如果用法过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</p><pre class=" language-html"><code class="language-html">//hmtl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getClasses()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>//jslet app = new Vue({            el: `#app`,            data: {                message:'Hello Vuejs',                isActive:true,                isLine:true            },            methods:{                btnClick:function(){                    this.isActive=!this.isActive,                    this.isLine=!this.isLine                },                getClasses:function(){                    return {active:this.isActive,line:this.isLine}                }            }        })</code></pre><h5 id="绑定方式二、数组语法"><a href="#绑定方式二、数组语法" class="headerlink" title="绑定方式二、数组语法"></a>绑定方式二、数组语法</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>active<span class="token punctuation">'</span>,<span class="token punctuation">'</span>line<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>注意：其中<code>active</code>加引号就是字符串，不加引号就是变量</p><h4 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-<code>bind</code>绑定<code>style</code></h4><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>属性值需要加引号，使之解析成为字符串，不加引号就会解析成为变量,如下50px必须加引号，否则会被当成变量解析</p><p>对象的值可以来自于<code>data</code>中的属性</p><pre><code>&lt;h2 class="title" :style="{fontSize:'50px'}"&gt;{{message}}&lt;/h2&gt;&lt;h2 class="title" :style="{fontSize:finaSize + 'px',backgroundColor:finaColor}"&gt;{{message}}&lt;/h2&gt;</code></pre><p><img src="https://i.loli.net/2020/11/05/xpUDdeOoZSz6cV3.png" alt="v-bind绑定style.png"></p><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><pre><code>&lt;h2 class="title" :style="[baseStyle1 , baseStyle2]"&gt;{{message}}&lt;/h2&gt;</code></pre><pre><code>data: {     message:'Hello Vuejs',     baseStyle1:{backgroundColor:'red'},     baseStyle2:{fontSize:'100px'}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Mustache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVVM</title>
      <link href="2019/10/08/mvvm/"/>
      <url>2019/10/08/mvvm/</url>
      
        <content type="html"><![CDATA[<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><h3 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是<code>MVVM</code></h3><h4 id="View层"><a href="#View层" class="headerlink" title="View层"></a><code>View</code>层</h4><p>视图层</p><p>在我们前端开发中，通常就是DOM层</p><p>主要的作用是给用户展示各种信息</p><h4 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a><code>Model</code>层</h4><p>数据层</p><p>数据可能是我们固定的死数据，更多的是来自我们服务器，网络上请求下来的数据</p><p>在我们的计数器案例中，就是后面抽取出来的<code>obj</code></p><h4 id="VueModel层"><a href="#VueModel层" class="headerlink" title="VueModel层"></a><code>VueModel</code>层</h4><p>视图模型层</p><p>视图模型层是<code>View</code>和<code>Model</code>沟通的桥梁</p><p>一方面它实现了<code>Data Binding</code>,也就是数据绑定，将<code>Model</code>的改变实时反应到<code>View</code>中</p><p>另一方面它实现了一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的Data。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue简介和安装</title>
      <link href="2019/10/03/vue-jian-jie-he-an-zhuang/"/>
      <url>2019/10/03/vue-jian-jie-he-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="vue简介和安装"><a href="#vue简介和安装" class="headerlink" title="vue简介和安装"></a>vue简介和安装</h1><h3 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a><code>Vue</code>简介</h3><h4 id="vue是一个渐进式框架"><a href="#vue是一个渐进式框架" class="headerlink" title="vue是一个渐进式框架"></a><code>vue</code>是一个渐进式框架</h4><p>渐进式意味着你可以将<code>vue</code>作为你应用的一部分嵌套进去，带来更丰富的交互体验</p><p>或者你希望将更多的业务逻辑使用<code>vue</code>实现，那么<code>vue</code>的核心库以及其生态系统比如<code>Core+Vue+router+Vuex</code>，也可以满足各种需求</p><h4 id="Vue有很多特点和Web开发中常见的高级功能"><a href="#Vue有很多特点和Web开发中常见的高级功能" class="headerlink" title="Vue有很多特点和Web开发中常见的高级功能"></a><code>Vue</code>有很多特点和<code>Web</code>开发中常见的高级功能</h4><h5 id="解耦视图和数据"><a href="#解耦视图和数据" class="headerlink" title="解耦视图和数据"></a>解耦视图和数据</h5><h5 id="可复用组件"><a href="#可复用组件" class="headerlink" title="可复用组件"></a>可复用组件</h5><h5 id="前端路由技术"><a href="#前端路由技术" class="headerlink" title="前端路由技术"></a>前端路由技术</h5><h5 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h5><h5 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h5><h3 id="Vue的安装"><a href="#Vue的安装" class="headerlink" title="Vue的安装"></a><code>Vue</code>的安装</h3><h4 id="一、直接CDN引入"><a href="#一、直接CDN引入" class="headerlink" title="一、直接CDN引入"></a>一、直接CDN引入</h4><pre><code>&lt;!-- 开发环境版本，包含有帮助的命令行警告 --&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt;</code></pre><p>在<code>vue</code>官网右键链接另存为就可以下载下来了</p><h4 id="二、下载和引入"><a href="#二、下载和引入" class="headerlink" title="二、下载和引入"></a>二、下载和引入</h4><p>开发环境：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></p><p>生产环境：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></p><h4 id="三、NPM安装"><a href="#三、NPM安装" class="headerlink" title="三、NPM安装"></a>三、NPM安装</h4><p>后续通过<code>webpack</code>和<code>CLI</code>的使用，我们使用这个方式</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 渐进式框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
